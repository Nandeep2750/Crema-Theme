{"version":3,"sources":["../node_modules/@mui/icons-material/ChevronRight.js","../node_modules/@mui/lab/TreeView/TreeViewContext.js","../node_modules/@mui/lab/TreeView/descendants.js","../node_modules/@mui/lab/TreeItem/treeItemClasses.js","../node_modules/@mui/lab/TreeItem/useTreeItem.js","../node_modules/@mui/lab/TreeView/treeViewClasses.js","../node_modules/@mui/lab/TreeView/TreeView.js","../node_modules/@mui/lab/TreeItem/TreeItemContent.js","../node_modules/@mui/lab/TreeItem/TreeItem.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","TreeViewContext","React","_excluded","DescendantContext","noop","useDescendant","descendant","forceUpdate","registerDescendant","unregisterDescendant","descendants","parentId","index","array","comp","i","length","findIndex","item","element","previousDescendants","ref","current","usePrevious","someDescendantsHaveChanged","some","newDescendant","position","useEnhancedEffect","_extends","DescendantProvider","props","children","id","items","set","_ref","other","_objectWithoutPropertiesLoose","oldItems","newItems","start","end","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","binaryFindElement","newItem","slice","splice","forEach","filter","_jsx","Provider","getTreeItemUtilityClass","slot","generateUtilityClass","treeItemClasses","generateUtilityClasses","useTreeItem","nodeId","focus","isExpanded","isExpandable","isFocused","isDisabled","isSelected","multiSelect","selectNode","selectRange","toggleExpansion","expandable","expanded","focused","disabled","selected","handleExpansion","event","multiple","shiftKey","ctrlKey","metaKey","handleSelection","preventSelection","preventDefault","getTreeViewUtilityClass","TreeViewRoot","styled","name","overridesResolver","styles","root","padding","margin","listStyle","outline","findNextFirstChar","firstChars","startIndex","char","noopSelection","defaultDefaultExpanded","defaultDefaultSelected","TreeView","inProps","useThemeProps","className","defaultCollapseIcon","defaultEndIcon","defaultExpanded","defaultExpandIcon","defaultParentIcon","defaultSelected","disabledItemsFocusable","disableSelection","expandedProp","idProp","onBlur","onFocus","onKeyDown","onNodeFocus","onNodeSelect","onNodeToggle","selectedProp","isRtl","useTheme","direction","ownerState","classes","composeClasses","useUtilityClasses","treeId","useId","treeRef","handleRef","useForkRef","focusedNodeId","setFocusedNodeId","nodeMap","firstCharMap","useControlled","controlled","state","setExpandedState","setSelectedState","Array","isArray","indexOf","node","getChildrenIds","keys","map","key","sort","a","b","child","getNavigableChildrenIds","childrenIds","getNextNode","siblings","nextSibling","getPreviousNode","nodeIndex","currentNode","pop","getLastNode","lastNode","getFirstNode","getNodesInRange","nodeA","nodeB","nodeAId","nodeBId","aFamily","bFamily","aAncestor","bAncestor","aAncestorIsCommon","bAncestorIsCommon","continueA","continueB","push","commonAncestor","ancestorFamily","aSide","bSide","findOrderInTremauxTree","first","last","nodes","focusNextNode","newExpanded","concat","lastSelectedNode","lastSelectionWasRange","currentRangeSelection","handleRangeArrowSelect","base","next","handleRangeSelect","range","newSelected","handleMultipleSelect","handleSingleSelect","stacked","registerNode","idAttribute","unregisterNode","newMap","oldFocusedNodeId","ownerDocument","activeElement","mapFirstChar","firstChar","unMapFirstChar","handleNextArrow","handlePreviousArrow","parent","activeDescendant","icons","role","clsx","tabIndex","flag","altKey","currentTarget","target","string","ctrlPressed","stopPropagation","selectNextNode","selectPreviousNode","focusPreviousNode","rangeSelectToFirst","focusFirstNode","rangeSelectToLast","focusLastNode","diff","expandAllSiblings","toLowerCase","selectAllNodes","match","lowercaseChar","firstCharIds","visible","shouldBeSkipped","focusByFirstCharacter","firstSelected","TreeItemContent","displayIcon","expansionIcon","iconProp","icon","label","onClick","onMouseDown","_jsxs","iconContainer","TreeItemRoot","StyledTreeItemContent","content","theme","width","display","alignItems","cursor","WebkitTapHighlightColor","backgroundColor","palette","action","hover","opacity","disabledOpacity","alpha","primary","main","selectedOpacity","hoverOpacity","focusOpacity","marginRight","flexShrink","justifyContent","fontSize","minWidth","paddingLeft","typography","body1","TreeItemGroup","Collapse","group","marginLeft","TreeItem","collapseIcon","ContentComponent","ContentProps","endIcon","expandIcon","disabledProp","TransitionComponent","TransitionProps","contextIcons","ariaSelected","treeitemElement","setTreeitemElement","contentRef","Boolean","textContent","substring","getElementById","preventScroll","unfocusable","as","unmountOnExit","in","component"],"mappings":"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","file":"static/js/8.532195b6.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'ChevronRight');\n\nexports.default = _default;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst TreeViewContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeViewContext.displayName = 'TreeViewContext';\n}\n\nexport default TreeViewContext;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n// To replace with .findIndex() once we stop IE11 support.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n\n    if (array[middle].element === element) {\n      return middle;\n    } // eslint-disable-next-line no-bitwise\n\n\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n\n  return start;\n}\n\nconst DescendantContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\n\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\nconst noop = () => {};\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\n\n\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext); // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants); // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  }); // Prevent any flashing\n\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n      element\n    } = _ref,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    set(oldItems => {\n      let newItems;\n\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n\n      const index = binaryFindElement(oldItems, element);\n\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n        const newItem = _extends({}, other, {\n          element,\n          index\n        }); // If an index is not found we will push the element to the end.\n\n\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTreeItemUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeItem', slot);\n}\nconst treeItemClasses = generateUtilityClasses('MuiTreeItem', ['root', 'group', 'content', 'expanded', 'selected', 'focused', 'disabled', 'iconContainer', 'label']);\nexport default treeItemClasses;","import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTreeViewUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeView', slot);\n}\nconst treeViewClasses = generateUtilityClasses('MuiTreeView', ['root']);\nexport default treeViewClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"defaultSelected\", \"disabledItemsFocusable\", \"disableSelection\", \"expanded\", \"id\", \"multiSelect\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"onNodeFocus\", \"onNodeSelect\", \"onNodeToggle\", \"selected\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useControlled, useForkRef, ownerDocument, unstable_useId as useId } from '@mui/material/utils';\nimport TreeViewContext from './TreeViewContext';\nimport { DescendantProvider } from './descendants';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\n\nconst TreeViewRoot = styled('ul', {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 0,\n  margin: 0,\n  listStyle: 'none',\n  outline: 0\n});\n\nfunction isPrintableCharacter(string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\n\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction noopSelection() {\n  return false;\n}\n\nconst defaultDefaultExpanded = [];\nconst defaultDefaultSelected = [];\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n\n  const {\n    children,\n    className,\n    defaultCollapseIcon,\n    defaultEndIcon,\n    defaultExpanded = defaultDefaultExpanded,\n    defaultExpandIcon,\n    defaultParentIcon,\n    defaultSelected = defaultDefaultSelected,\n    disabledItemsFocusable = false,\n    disableSelection = false,\n    expanded: expandedProp,\n    id: idProp,\n    multiSelect = false,\n    onBlur,\n    onFocus,\n    onKeyDown,\n    onNodeFocus,\n    onNodeSelect,\n    onNodeToggle,\n    selected: selectedProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n\n  const ownerState = _extends({}, props, {\n    defaultExpanded,\n    defaultSelected,\n    disabledItemsFocusable,\n    disableSelection,\n    multiSelect\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const treeId = useId(idProp);\n  const treeRef = React.useRef(null);\n  const handleRef = useForkRef(treeRef, ref);\n  const [focusedNodeId, setFocusedNodeId] = React.useState(null);\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n  const [expanded, setExpandedState] = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView',\n    state: 'expanded'\n  });\n  const [selected, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected,\n    name: 'TreeView',\n    state: 'selected'\n  });\n  /*\n   * Status Helpers\n   */\n\n  const isExpanded = React.useCallback(id => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);\n  const isExpandable = React.useCallback(id => nodeMap.current[id] && nodeMap.current[id].expandable, []);\n  const isSelected = React.useCallback(id => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);\n  const isDisabled = React.useCallback(id => {\n    let node = nodeMap.current[id]; // This can be called before the node has been added to the node map.\n\n    if (!node) {\n      return false;\n    }\n\n    if (node.disabled) {\n      return true;\n    }\n\n    while (node.parentId != null) {\n      node = nodeMap.current[node.parentId];\n\n      if (node.disabled) {\n        return true;\n      }\n    }\n\n    return false;\n  }, []);\n\n  const isFocused = id => focusedNodeId === id;\n  /*\n   * Child Helpers\n   */\n  // Using Object.keys -> .map to mimic Object.values we should replace with Object.values() once we stop IE11 support.\n\n\n  const getChildrenIds = id => Object.keys(nodeMap.current).map(key => {\n    return nodeMap.current[key];\n  }).filter(node => node.parentId === id).sort((a, b) => a.index - b.index).map(child => child.id);\n\n  const getNavigableChildrenIds = id => {\n    let childrenIds = getChildrenIds(id);\n\n    if (!disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(node => !isDisabled(node));\n    }\n\n    return childrenIds;\n  };\n  /*\n   * Node Helpers\n   */\n\n\n  const getNextNode = id => {\n    // If expanded get first child\n    if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {\n      return getNavigableChildrenIds(id)[0];\n    }\n\n    let node = nodeMap.current[id];\n\n    while (node != null) {\n      // Try to get next sibling\n      const siblings = getNavigableChildrenIds(node.parentId);\n      const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n\n      if (nextSibling) {\n        return nextSibling;\n      } // If the sibling does not exist, go up a level to the parent and try again.\n\n\n      node = nodeMap.current[node.parentId];\n    }\n\n    return null;\n  };\n\n  const getPreviousNode = id => {\n    const node = nodeMap.current[id];\n    const siblings = getNavigableChildrenIds(node.parentId);\n    const nodeIndex = siblings.indexOf(id);\n\n    if (nodeIndex === 0) {\n      return node.parentId;\n    }\n\n    let currentNode = siblings[nodeIndex - 1];\n\n    while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {\n      currentNode = getNavigableChildrenIds(currentNode).pop();\n    }\n\n    return currentNode;\n  };\n\n  const getLastNode = () => {\n    let lastNode = getNavigableChildrenIds(null).pop();\n\n    while (isExpanded(lastNode)) {\n      lastNode = getNavigableChildrenIds(lastNode).pop();\n    }\n\n    return lastNode;\n  };\n\n  const getFirstNode = () => getNavigableChildrenIds(null)[0];\n\n  const getParent = id => nodeMap.current[id].parentId;\n  /**\n   * This is used to determine the start and end of a selection range so\n   * we can get the nodes between the two border nodes.\n   *\n   * It finds the nodes' common ancestor using\n   * a naive implementation of a lowest common ancestor algorithm\n   * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n   * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n   * so we can compare their indexes to work out which node comes first in a depth first search.\n   * (https://en.wikipedia.org/wiki/Depth-first_search)\n   *\n   * Another way to put it is which node is shallower in a trémaux tree\n   * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n   */\n\n\n  const findOrderInTremauxTree = (nodeAId, nodeBId) => {\n    if (nodeAId === nodeBId) {\n      return [nodeAId, nodeBId];\n    }\n\n    const nodeA = nodeMap.current[nodeAId];\n    const nodeB = nodeMap.current[nodeBId];\n\n    if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n      return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];\n    }\n\n    const aFamily = [nodeA.id];\n    const bFamily = [nodeB.id];\n    let aAncestor = nodeA.parentId;\n    let bAncestor = nodeB.parentId;\n    let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n    let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n    let continueA = true;\n    let continueB = true;\n\n    while (!bAncestorIsCommon && !aAncestorIsCommon) {\n      if (continueA) {\n        aFamily.push(aAncestor);\n        aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n        continueA = aAncestor !== null;\n\n        if (!aAncestorIsCommon && continueA) {\n          aAncestor = nodeMap.current[aAncestor].parentId;\n        }\n      }\n\n      if (continueB && !aAncestorIsCommon) {\n        bFamily.push(bAncestor);\n        bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n        continueB = bAncestor !== null;\n\n        if (!bAncestorIsCommon && continueB) {\n          bAncestor = nodeMap.current[bAncestor].parentId;\n        }\n      }\n    }\n\n    const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n    const ancestorFamily = getChildrenIds(commonAncestor);\n    const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n    const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n    return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];\n  };\n\n  const getNodesInRange = (nodeA, nodeB) => {\n    const [first, last] = findOrderInTremauxTree(nodeA, nodeB);\n    const nodes = [first];\n    let current = first;\n\n    while (current !== last) {\n      current = getNextNode(current);\n      nodes.push(current);\n    }\n\n    return nodes;\n  };\n  /*\n   * Focus Helpers\n   */\n\n\n  const focus = (event, id) => {\n    if (id) {\n      setFocusedNodeId(id);\n\n      if (onNodeFocus) {\n        onNodeFocus(event, id);\n      }\n    }\n  };\n\n  const focusNextNode = (event, id) => focus(event, getNextNode(id));\n\n  const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));\n\n  const focusFirstNode = event => focus(event, getFirstNode());\n\n  const focusLastNode = event => focus(event, getLastNode());\n\n  const focusByFirstCharacter = (event, id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = []; // This really only works since the ids are strings\n\n    Object.keys(firstCharMap.current).forEach(nodeId => {\n      const firstChar = firstCharMap.current[nodeId];\n      const map = nodeMap.current[nodeId];\n      const visible = map.parentId ? isExpanded(map.parentId) : true;\n      const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);\n\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start >= firstCharIds.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = findNextFirstChar(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(event, firstCharIds[index]);\n    }\n  };\n  /*\n   * Expansion Helpers\n   */\n\n\n  const toggleExpansion = (event, value = focusedNodeId) => {\n    let newExpanded;\n\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(id => id !== value);\n    } else {\n      newExpanded = [value].concat(expanded);\n    }\n\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n\n    setExpandedState(newExpanded);\n  };\n\n  const expandAllSiblings = (event, id) => {\n    const map = nodeMap.current[id];\n    const siblings = getChildrenIds(map.parentId);\n    const diff = siblings.filter(child => isExpandable(child) && !isExpanded(child));\n    const newExpanded = expanded.concat(diff);\n\n    if (diff.length > 0) {\n      setExpandedState(newExpanded);\n\n      if (onNodeToggle) {\n        onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n  /*\n   * Selection Helpers\n   */\n\n\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n\n    if (!next || !current) {\n      return;\n    }\n\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, base);\n    }\n\n    setSelectedState(base);\n  };\n\n  const handleRangeSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      end\n    } = nodes; // If last selection was a range selection ignore nodes that were selected.\n\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !isDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleMultipleSelect = (event, value) => {\n    let newSelected;\n\n    if (selected.indexOf(value) !== -1) {\n      newSelected = selected.filter(id => id !== value);\n    } else {\n      newSelected = [value].concat(selected);\n    }\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const handleSingleSelect = (event, value) => {\n    const newSelected = multiSelect ? [value] : value;\n\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n\n    setSelectedState(newSelected);\n  };\n\n  const selectNode = (event, id, multiple = false) => {\n    if (id) {\n      if (multiple) {\n        handleMultipleSelect(event, id);\n      } else {\n        handleSingleSelect(event, id);\n      }\n\n      lastSelectedNode.current = id;\n      lastSelectionWasRange.current = false;\n      currentRangeSelection.current = [];\n      return true;\n    }\n\n    return false;\n  };\n\n  const selectRange = (event, nodes, stacked = false) => {\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n\n    lastSelectionWasRange.current = true;\n  };\n\n  const rangeSelectToFirst = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getFirstNode()\n    });\n  };\n\n  const rangeSelectToLast = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getLastNode()\n    });\n  };\n\n  const selectNextNode = (event, id) => {\n    if (!isDisabled(getNextNode(id))) {\n      selectRange(event, {\n        end: getNextNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectPreviousNode = (event, id) => {\n    if (!isDisabled(getPreviousNode(id))) {\n      selectRange(event, {\n        end: getPreviousNode(id),\n        current: id\n      }, true);\n    }\n  };\n\n  const selectAllNodes = event => {\n    selectRange(event, {\n      start: getFirstNode(),\n      end: getLastNode()\n    });\n  };\n  /*\n   * Mapping Helpers\n   */\n\n\n  const registerNode = React.useCallback(node => {\n    const {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    } = node;\n    nodeMap.current[id] = {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    };\n  }, []);\n  const unregisterNode = React.useCallback(id => {\n    const newMap = _extends({}, nodeMap.current);\n\n    delete newMap[id];\n    nodeMap.current = newMap;\n    setFocusedNodeId(oldFocusedNodeId => {\n      if (oldFocusedNodeId === id && treeRef.current === ownerDocument(treeRef.current).activeElement) {\n        return getChildrenIds(null)[0];\n      }\n\n      return oldFocusedNodeId;\n    });\n  }, []);\n  const mapFirstChar = React.useCallback((id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  }, []);\n  const unMapFirstChar = React.useCallback(id => {\n    const newMap = _extends({}, firstCharMap.current);\n\n    delete newMap[id];\n    firstCharMap.current = newMap;\n  }, []);\n  /**\n   * Event handlers and Navigation\n   */\n\n  const handleNextArrow = event => {\n    if (isExpandable(focusedNodeId)) {\n      if (isExpanded(focusedNodeId)) {\n        focusNextNode(event, focusedNodeId);\n      } else if (!isDisabled(focusedNodeId)) {\n        toggleExpansion(event);\n      }\n    }\n\n    return true;\n  };\n\n  const handlePreviousArrow = event => {\n    if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {\n      toggleExpansion(event, focusedNodeId);\n      return true;\n    }\n\n    const parent = getParent(focusedNodeId);\n\n    if (parent) {\n      focus(event, parent);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key; // If the tree is empty there will be no focused node\n\n    if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {\n      return;\n    }\n\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n\n    switch (key) {\n      case ' ':\n        if (!disableSelection && !isDisabled(focusedNodeId)) {\n          if (multiSelect && event.shiftKey) {\n            selectRange(event, {\n              end: focusedNodeId\n            });\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'Enter':\n        if (!isDisabled(focusedNodeId)) {\n          if (isExpandable(focusedNodeId)) {\n            toggleExpansion(event);\n            flag = true;\n          }\n        }\n\n        event.stopPropagation();\n        break;\n\n      case 'ArrowDown':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectNextNode(event, focusedNodeId);\n        }\n\n        focusNextNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowUp':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectPreviousNode(event, focusedNodeId);\n        }\n\n        focusPreviousNode(event, focusedNodeId);\n        flag = true;\n        break;\n\n      case 'ArrowRight':\n        if (isRtl) {\n          flag = handlePreviousArrow(event);\n        } else {\n          flag = handleNextArrow(event);\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (isRtl) {\n          flag = handleNextArrow(event);\n        } else {\n          flag = handlePreviousArrow(event);\n        }\n\n        break;\n\n      case 'Home':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToFirst(event, focusedNodeId);\n        }\n\n        focusFirstNode(event);\n        flag = true;\n        break;\n\n      case 'End':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToLast(event, focusedNodeId);\n        }\n\n        focusLastNode(event);\n        flag = true;\n        break;\n\n      default:\n        if (key === '*') {\n          expandAllSiblings(event, focusedNodeId);\n          flag = true;\n        } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a' && !disableSelection) {\n          selectAllNodes(event);\n          flag = true;\n        } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {\n          focusByFirstCharacter(event, focusedNodeId, key);\n          flag = true;\n        }\n\n    }\n\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleFocus = event => {\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      const firstSelected = Array.isArray(selected) ? selected[0] : selected;\n      focus(event, firstSelected || getNavigableChildrenIds(null)[0]);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocusedNodeId(null);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    value: {\n      icons: {\n        defaultCollapseIcon,\n        defaultExpandIcon,\n        defaultParentIcon,\n        defaultEndIcon\n      },\n      focus,\n      toggleExpansion,\n      isExpanded,\n      isExpandable,\n      isFocused,\n      isSelected,\n      isDisabled,\n      selectNode: disableSelection ? noopSelection : selectNode,\n      selectRange: disableSelection ? noopSelection : selectRange,\n      multiSelect,\n      disabledItemsFocusable,\n      mapFirstChar,\n      unMapFirstChar,\n      registerNode,\n      unregisterNode,\n      treeId\n    },\n    children: /*#__PURE__*/_jsx(DescendantProvider, {\n      children: /*#__PURE__*/_jsx(TreeViewRoot, _extends({\n        role: \"tree\",\n        id: treeId,\n        \"aria-activedescendant\": activeDescendant,\n        \"aria-multiselectable\": multiSelect,\n        className: clsx(classes.root, className),\n        ref: handleRef,\n        tabIndex: 0,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        ownerState: ownerState\n      }, other, {\n        children: children\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids. (Uncontrolled)\n   * @default []\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are focused.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are selected/unselected.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect: PropTypes.func,\n\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func,\n\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TreeView;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"classes\", \"className\", \"displayIcon\", \"expansionIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport useTreeItem from './useTreeItem';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TreeItemContent = /*#__PURE__*/React.forwardRef(function TreeItemContent(props, ref) {\n  const {\n    classes,\n    className,\n    displayIcon,\n    expansionIcon,\n    icon: iconProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  } = useTreeItem(nodeId);\n  const icon = iconProp || expansionIcon || displayIcon;\n\n  const handleMouseDown = event => {\n    preventSelection(event);\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n\n  const handleClick = event => {\n    handleExpansion(event);\n    handleSelection(event);\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */\n    _jsxs(\"div\", _extends({\n      className: clsx(className, classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),\n      onClick: handleClick,\n      onMouseDown: handleMouseDown,\n      ref: ref\n    }, other, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: classes.iconContainer,\n        children: icon\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.label,\n        children: label\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItemContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * className applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display next to the tree node's label. Either a parent or end icon.\n   */\n  displayIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label. Either an expansion or collapse icon.\n   */\n  expansionIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func\n} : void 0;\nexport default TreeItemContent;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport Collapse from '@mui/material/Collapse';\nimport { alpha, styled, useThemeProps } from '@mui/material/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport treeItemClasses, { getTreeItemUtilityClass } from './treeItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    content: ['content'],\n    expanded: ['expanded'],\n    selected: ['selected'],\n    focused: ['focused'],\n    disabled: ['disabled'],\n    iconContainer: ['iconContainer'],\n    label: ['label'],\n    group: ['group']\n  };\n  return composeClasses(slots, getTreeItemUtilityClass, classes);\n};\n\nconst TreeItemRoot = styled('li', {\n  name: 'MuiTreeItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  outline: 0\n});\nconst StyledTreeItemContent = styled(TreeItemContent, {\n  name: 'MuiTreeItem',\n  slot: 'Content',\n  overridesResolver: (props, styles) => {\n    return [styles.content, styles.iconContainer && {\n      [`& .${treeItemClasses.iconContainer}`]: styles.iconContainer\n    }, styles.label && {\n      [`& .${treeItemClasses.label}`]: styles.label\n    }];\n  }\n})(({\n  theme\n}) => ({\n  padding: '0 8px',\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${treeItemClasses.disabled}`]: {\n    opacity: theme.palette.action.disabledOpacity,\n    backgroundColor: 'transparent'\n  },\n  [`&.${treeItemClasses.focused}`]: {\n    backgroundColor: theme.palette.action.focus\n  },\n  [`&.${treeItemClasses.selected}`]: {\n    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n    [`&.${treeItemClasses.focused}`]: {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`& .${treeItemClasses.iconContainer}`]: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n  [`& .${treeItemClasses.label}`]: _extends({\n    width: '100%',\n    // fixes overflow - see https://github.com/mui-org/material-ui/issues/27372\n    minWidth: 0,\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n}));\nconst TreeItemGroup = styled(Collapse, {\n  name: 'MuiTreeItem',\n  slot: 'Group',\n  overridesResolver: (props, styles) => styles.group\n})({\n  margin: 0,\n  padding: 0,\n  marginLeft: 17\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeItem'\n  });\n\n  const {\n    children,\n    className,\n    collapseIcon,\n    ContentComponent = TreeItemContent,\n    ContentProps,\n    endIcon,\n    expandIcon,\n    disabled: disabledProp,\n    icon,\n    id: idProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown,\n    TransitionComponent = Collapse,\n    TransitionProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(TreeViewContext);\n  let id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n\n  const ownerState = _extends({}, props, {\n    expanded,\n    focused,\n    selected,\n    disabled\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let displayIcon;\n  let expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/TR/wai-aria-practices/#TreeView\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    const unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(TreeItemRoot, _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    ownerState: ownerState,\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(StyledTreeItemContent, _extends({\n      as: ContentComponent,\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon,\n      ownerState: ownerState\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TreeItemGroup, _extends({\n        as: TransitionComponent,\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the node is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default TreeItem;"],"sourceRoot":""}