{"version":3,"sources":["../node_modules/@mui/base/NoSsr/NoSsr.js","pages/muiComponents/utils/NoSSR1/SimpleNoSsr.js","webpack:///./src/pages/muiComponents/utils/NoSSR1/SimpleNoSsr.js?eab1","pages/muiComponents/utils/NoSSR1/FrameDeferring.js","pages/muiComponents/utils/NoSSR1/index.js","webpack:///./src/pages/muiComponents/utils/NoSSR1/FrameDeferring.js?72d9"],"names":["NoSsr","props","children","defer","fallback","React","mountedState","setMountedState","useEnhancedEffect","_jsx","SimpleNoSsr","Box","sx","p","bgcolor","color","LargeTree","Array","from","map","_","index","FrameDeferring","open","state","setState","type","onClick","width","display","flexWrap","NoSSR1","AppComponentHeader","title","description","refUrl","AppGridContainer","Grid","item","xs","md","AppComponentCard","component","source","noScrollbar"],"mappings":"+IAsEeA,IAvDf,SAAeC,GACb,IACEC,EAGED,EAHFC,SADF,EAIID,EAFFE,aAFF,WAIIF,EADFG,gBAHF,MAGa,KAHb,EAKA,EAAwCC,YAAe,GAAvD,mBAAOC,EAAP,KAAqBC,EAArB,KAYA,OAXAC,aAAkB,WACXL,GACHI,GAAgB,KAEjB,CAACJ,IACJE,aAAgB,WACVF,GACFI,GAAgB,KAEjB,CAACJ,IAEgBM,cAAKJ,WAAgB,CACvCH,SAAUI,EAAeJ,EAAWE,M,gHC9BzB,SAASM,IACtB,OACE,gCACE,cAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,EAAG,EAAGC,QAAS,eAAgBC,MAAO,wBAAhD,+BAGA,cAACf,EAAA,EAAD,UACE,cAACW,EAAA,EAAD,CACEC,GAAI,CACFC,EAAG,EACHC,QAAS,iBACTC,MAAO,0BAJX,8BCXO,I,QCIf,SAASC,IACP,OAAOC,MAAMC,KAAK,IAAID,MAAM,MAAOE,KAAI,SAACC,EAAGC,GAAJ,OACrC,oCAAWA,MAIA,SAASC,IACtB,MAA0BjB,WAAe,CACvCkB,MAAM,EACNpB,OAAO,IAFT,mBAAOqB,EAAP,KAAcC,EAAd,KAKA,OACE,gCACE,wBACEC,KAAK,SACLC,QAAS,kBACPF,EAAS,CACPF,MAAOC,EAAMD,KACbpB,OAAO,KALb,SASG,+BAEH,uBACA,wBACEuB,KAAK,SACLC,QAAS,kBACPF,EAAS,CACPF,MAAOC,EAAMD,KACbpB,OAAO,KALb,SASG,8BAEH,uBACA,uBACA,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAACgB,MAAO,IAAKC,QAAS,OAAQC,SAAU,QAAjD,SACGN,EAAMD,KACL,eAAC,WAAD,WACE,gDACA,eAACvB,EAAA,EAAD,CAAOG,MAAOqB,EAAMrB,MAApB,8BAEE,cAACa,EAAD,UAGF,UCRGe,UAhCA,WACb,OACE,qCACE,cAACC,EAAA,EAAD,CACEC,MAAM,SACNC,YAAY,sFACZC,OAAO,uCAGT,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACC,EAAA,EAAD,CACER,MAAM,gBACNS,UAAWhC,EACXiC,OF1BG,4lBE2BHC,aAAW,MAGf,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACC,EAAA,EAAD,CACER,MAAM,iBACNS,UAAWpB,EACXqB,OClCG,k3CDmCHC,aAAW,EACXV,YAAY","file":"static/js/119.6d58522d.chunk.js","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","import * as React from 'react';\r\nimport NoSsr from '@mui/material/NoSsr';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function SimpleNoSsr() {\r\n  return (\r\n    <div>\r\n      <Box sx={{p: 2, bgcolor: 'primary.main', color: 'primary.contrastText'}}>\r\n        Server and Client\r\n      </Box>\r\n      <NoSsr>\r\n        <Box\r\n          sx={{\r\n            p: 2,\r\n            bgcolor: 'secondary.main',\r\n            color: 'secondary.contrastText',\r\n          }}\r\n        >\r\n          Client only\r\n        </Box>\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport NoSsr from '@mui/material/NoSsr';\\r\\nimport Box from '@mui/material/Box';\\r\\n\\r\\nexport default function SimpleNoSsr() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Box sx={{p: 2, bgcolor: 'primary.main', color: 'primary.contrastText'}}>\\r\\n        Server and Client\\r\\n      </Box>\\r\\n      <NoSsr>\\r\\n        <Box\\r\\n          sx={{\\r\\n            p: 2,\\r\\n            bgcolor: 'secondary.main',\\r\\n            color: 'secondary.contrastText',\\r\\n          }}\\r\\n        >\\r\\n          Client only\\r\\n        </Box>\\r\\n      </NoSsr>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport NoSsr from '@mui/material/NoSsr';\r\n\r\nfunction LargeTree() {\r\n  return Array.from(new Array(5000)).map((_, index) => (\r\n    <span key={index}>.</span>\r\n  ));\r\n}\r\n\r\nexport default function FrameDeferring() {\r\n  const [state, setState] = React.useState({\r\n    open: false,\r\n    defer: false,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type='button'\r\n        onClick={() =>\r\n          setState({\r\n            open: !state.open,\r\n            defer: false,\r\n          })\r\n        }\r\n      >\r\n        {'Render NoSsr defer=\"false\"'}\r\n      </button>\r\n      <br />\r\n      <button\r\n        type='button'\r\n        onClick={() =>\r\n          setState({\r\n            open: !state.open,\r\n            defer: true,\r\n          })\r\n        }\r\n      >\r\n        {'Render NoSsr defer=\"true\"'}\r\n      </button>\r\n      <br />\r\n      <br />\r\n      <Box sx={{width: 300, display: 'flex', flexWrap: 'wrap'}}>\r\n        {state.open ? (\r\n          <React.Fragment>\r\n            <div>Outside NoSsr</div>\r\n            <NoSsr defer={state.defer}>\r\n              .....Inside NoSsr\r\n              <LargeTree />\r\n            </NoSsr>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '../../../../@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '../../../../@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '../../../../@crema/core/AppComponentCard';\r\n\r\nimport SimpleNoSsr from './SimpleNoSsr';\r\nimport SimpleNoSsrSource from '!raw-loader!./SimpleNoSsr';\r\n\r\nimport FrameDeferring from './FrameDeferring';\r\nimport FrameDeferringSource from '!raw-loader!./FrameDeferring';\r\n\r\nconst NoSSR1 = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='NoSSR1'\r\n        description='NoSsr purposely removes components from the subject of Server Side Rendering (SSR).'\r\n        refUrl='https://mui.com/components/no-ssr/'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Simple No Ssr'\r\n            component={SimpleNoSsr}\r\n            source={SimpleNoSsrSource}\r\n            noScrollbar\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='FrameDeferring'\r\n            component={FrameDeferring}\r\n            source={FrameDeferringSource}\r\n            noScrollbar\r\n            description='At its core, the NoSsr components purpose is to defer rendering. As its illustrated in the previous demo, you can use it to defer the rendering from the server to the client.'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoSSR1;\r\n","export default \"import * as React from 'react';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport NoSsr from '@mui/material/NoSsr';\\r\\n\\r\\nfunction LargeTree() {\\r\\n  return Array.from(new Array(5000)).map((_, index) => (\\r\\n    <span key={index}>.</span>\\r\\n  ));\\r\\n}\\r\\n\\r\\nexport default function FrameDeferring() {\\r\\n  const [state, setState] = React.useState({\\r\\n    open: false,\\r\\n    defer: false,\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <button\\r\\n        type='button'\\r\\n        onClick={() =>\\r\\n          setState({\\r\\n            open: !state.open,\\r\\n            defer: false,\\r\\n          })\\r\\n        }\\r\\n      >\\r\\n        {'Render NoSsr defer=\\\"false\\\"'}\\r\\n      </button>\\r\\n      <br />\\r\\n      <button\\r\\n        type='button'\\r\\n        onClick={() =>\\r\\n          setState({\\r\\n            open: !state.open,\\r\\n            defer: true,\\r\\n          })\\r\\n        }\\r\\n      >\\r\\n        {'Render NoSsr defer=\\\"true\\\"'}\\r\\n      </button>\\r\\n      <br />\\r\\n      <br />\\r\\n      <Box sx={{width: 300, display: 'flex', flexWrap: 'wrap'}}>\\r\\n        {state.open ? (\\r\\n          <React.Fragment>\\r\\n            <div>Outside NoSsr</div>\\r\\n            <NoSsr defer={state.defer}>\\r\\n              .....Inside NoSsr\\r\\n              <LargeTree />\\r\\n            </NoSsr>\\r\\n          </React.Fragment>\\r\\n        ) : null}\\r\\n      </Box>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}