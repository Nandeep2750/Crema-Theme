(this.webpackJsonphister=this.webpackJsonphister||[]).push([[138],{2385:function(r,n,t){"use strict";t.r(n);var e=t(2),i=t(72),o=t(60),a=t(1458),c=t(38),s=t(5),u=t(14),l=t(1599),d=t(1);function h(){var r=function(r,n){var t=e.useState({columns:[],rows:[]}),i=Object(u.a)(t,2),o=i[0],a=i[1];return e.useEffect((function(){for(var t=[],e=0;e<r;e+=1){for(var i={id:e},o=1;o<=n;o+=1)i["price".concat(o,"M")]="".concat(e.toString(),", ").concat(o," ");t.push(i)}for(var c=[{field:"id",hide:!0}],s=1;s<=n;s+=1)c.push({field:"price".concat(s,"M"),headerName:"".concat(s,"M")});a({rows:t,columns:c})}),[r,n]),o}(100,1e3);return Object(d.jsx)("div",{style:{height:400,width:"100%"},children:Object(d.jsx)(l.a,Object(s.a)(Object(s.a)({},r),{},{columnBuffer:2,columnThreshold:2}))})}n.default=function(){return Object(d.jsxs)(d.Fragment,{children:[Object(d.jsx)(i.a,{title:"Virtualization",description:"The grid is high performing thanks to its rows and columns virtualization engine.",refUrl:"https://mui.com/components/data-grid/virtualization/"}),Object(d.jsx)(o.a,{children:Object(d.jsx)(a.a,{item:!0,xs:12,children:Object(d.jsx)(c.a,{title:"ColumnVirtualizationGrid",component:h,source:"import * as React from 'react';\r\nimport {DataGrid} from '@mui/x-data-grid';\r\n\r\nfunction useData(rowLength, columnLength) {\r\n  const [data, setData] = React.useState({columns: [], rows: []});\r\n\r\n  React.useEffect(() => {\r\n    const rows = [];\r\n\r\n    for (let i = 0; i < rowLength; i += 1) {\r\n      const row = {\r\n        id: i,\r\n      };\r\n\r\n      for (let j = 1; j <= columnLength; j += 1) {\r\n        row[`price${j}M`] = `${i.toString()}, ${j} `;\r\n      }\r\n\r\n      rows.push(row);\r\n    }\r\n\r\n    const columns = [{field: 'id', hide: true}];\r\n\r\n    for (let j = 1; j <= columnLength; j += 1) {\r\n      columns.push({field: `price${j}M`, headerName: `${j}M`});\r\n    }\r\n\r\n    setData({\r\n      rows,\r\n      columns,\r\n    });\r\n  }, [rowLength, columnLength]);\r\n\r\n  return data;\r\n}\r\n\r\nexport default function ColumnVirtualizationGrid() {\r\n  const data = useData(100, 1000);\r\n\r\n  return (\r\n    <div style={{height: 400, width: '100%'}}>\r\n      <DataGrid {...data} columnBuffer={2} columnThreshold={2} />\r\n    </div>\r\n  );\r\n}\r\n",noScrollbar:!0,description:"Column virtualization is the insertion and removal of columns as the grid scrolls horizontally."})})})]})}}}]);
//# sourceMappingURL=138.66e3ec47.chunk.js.map