{"version":3,"sources":["@crema/core/AppsContainer/AppSidebar.js","@crema/core/AppsContainer/AppContainerWrapper.js","@crema/core/AppsContainer/index.js","@crema/core/AppsContainer/AppsContent/index.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardHeader.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardAttachments.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardCheckedList.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/CardComments.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/AddCardForm.js","pages/apps/ScrumBoard/BoardDetail/List/AddCard/index.js","pages/apps/ScrumBoard/BoardDetail/List/CardDetail/Members.js","pages/apps/ScrumBoard/BoardDetail/List/CardDetail/Labels.js","pages/apps/ScrumBoard/BoardDetail/List/CardDetail/index.js","pages/apps/ScrumBoard/BoardDetail/List/ListHeader.js","pages/apps/ScrumBoard/BoardDetail/List/AddCardButton.js","pages/apps/ScrumBoard/BoardDetail/AddNewList.js","pages/apps/ScrumBoard/BoardDetail/NewListButton.js","pages/apps/ScrumBoard/BoardDetail/BoardDetailView.js","pages/apps/ScrumBoard/BoardDetail/index.js","pages/apps/ScrumBoard/BoardList/AddNewBoard.js","pages/apps/ScrumBoard/BoardList/BoardItem.js","pages/apps/ScrumBoard/BoardList/AddBoardButton.js","pages/apps/ScrumBoard/BoardList/index.js","pages/apps/ScrumBoard/index.js"],"names":["AppSidebar","props","isAppDrawerOpen","sidebarContent","dispatch","useDispatch","Slide","direction","in","mountOnEnter","unmountOnExit","Box","sx","height","width","lg","Hidden","lgUp","Drawer","open","onClose","onToggleAppDrawer","position","drawerClasses","paper","zIndex","lgDown","Card","style","getMainHeaderHeight","navStyle","screenSize","NavStyle","BIT_BUCKET","AppContainerWrapper","children","footer","rest","display","xs","sm","md","xl","AppsContainer","useSelector","common","useLayoutContext","title","fullView","flex","flexDirection","overflow","margin","padding","sxStyle","marginTop","alignItems","mb","mt","IconButton","edge","marginRight","theme","spacing","color","onClick","size","Zoom","transitionDelay","component","variant","fontSize","fontWeight","Fonts","SEMI_BOLD","pl","cardStyle","AppInfoView","defaultProps","AppsContentContainer","styled","SimpleBarReact","paddingTop","paddingBottom","AppsContent","isDetailView","CardHeader","onClickDeleteIcon","onCloseAddCard","onAddAttachments","useDropzone","accept","onDrop","acceptedFiles","files","map","file","id","Math","floor","random","preview","URL","createObjectURL","getRootProps","getInputProps","py","px","justifyContent","borderBottom","palette","divider","pr","BOLD","IntlMessages","mr","className","text","secondary","CardAttachmentWrapper","transition","backgroundColor","alpha","black","borderRadius","content","left","top","right","opacity","visibility","white","marginLeft","CardAttachments","attachments","onDeleteAttachment","length","flexWrap","mx","attachment","src","alt","LIGHT","name","my","moment","lastModified","format","split","CheckedItemWrapper","CardCheckedList","onAddNewCheckedItem","checkedList","onSetCheckedItemText","onDeleteCheckedItem","ml","Button","textTransform","checkedItem","xsDown","Checkbox","TextField","InputProps","value","onChange","e","target","CommentWrapper","isPreviousSender","CommentItemWrapper","CommentDateWrapper","disabled","marginBottom","CommentTextWrapper","background","default","border","CardComments","comments","onAddNewComment","useState","comment","setComment","messages","useIntl","AppScrollbar","maxHeight","data","renderRow","item","index","sender","image","Avatar","orange","charAt","toUpperCase","date","multiline","rows","placeholder","AddCardForm","values","setFieldValue","setCheckedList","setComments","authUser","setAttachments","selectedLabels","setSelectedLabels","selectedMembers","setMembersList","selectedCard","isSubmitting","labelList","scrumboardApp","memberList","noValidate","autoComplete","pt","pb","AppTextField","label","DatePicker","autoOk","inputVariant","renderInput","params","AppGridContainer","Grid","Autocomplete","multiple","options","getOptionLabel","option","event","filterSelectedOptions","fullWidth","renderOption","Fragment","updatedAttachments","filter","updatedList","concat","Divider","displayName","photoURL","textAlign","borderTop","type","validationSchema","yup","required","AddCard","isAddCardOpen","board","list","user","useAuthUser","console","log","isDeleteDialogOpen","setDeleteDialogOpen","members","useEffect","flexShrink","boxSizing","anchor","validateOnChange","initialValues","desc","onSubmit","setSubmitting","resetForm","editedCard","onEditCardDetails","newCard","onAddNewCard","AppConfirmDialog","onDeny","onConfirm","boardId","listId","cardId","onDeleteSelectedCard","dialogTitle","Members","member","Tooltip","Labels","labels","m","placement","CardDetail","cursor","whiteSpace","stopPropagation","MEDIUM","ListHeader","onDelete","updateTitle","isEditListName","setEditListName","editedListName","setEditedListName","minHeight","componet","textOverflow","AddCardButton","minWidth","t","laneId","grey","REGULAR","AddNewList","onAdd","onCancel","listName","setListName","p","cardRadius","paddingLeft","paddingRight","NewListButton","BoardWrapper","BoardDetailView","useTheme","setList","setAddCardOpen","setSelectedCard","boardDetail","getBoardData","useCallback","lanes","boardData","setBoardData","onClickAddCard","find","laneStyle","editable","canAddLanes","onDataChange","nextData","handleDragEnd","sourceLaneId","targetLaneId","cardDetails","onUpdateCardCategory","onCardAdd","card","onCardClick","metadata","selectedList","cards","lane","getCardById","onEditCardDetail","onLaneAdd","onAddNewList","onAddList","onLaneUpdate","onEditBoardList","onLaneDelete","onDeleteSelectedList","components","LaneHeader","AddCardLink","NewCardForm","NewLaneForm","NewLaneSection","BoardDetail","navigate","useNavigate","pathname","useLocation","path","onGetBoardDetail","onNullifyBoardDetail","Transition","React","forwardRef","ref","AddNewBoard","isAddBoardOpen","onCloseAddBoardModal","onAddBoard","selectedBoard","boardName","setBoardName","Dialog","TransitionComponent","maxWidth","BoardItem","onEditButtonClick","onViewBoardDetail","primary","main","contrastText","AddBoardButton","onAddButtonClick","borderColor","BoardList","boardList","setAddBoardOpen","setSelectedBoard","onGetBoardList","onEditBoardDetail","onAddNewBoard","ScrumBoard","useParams","onGetScrumLabelList","onGetMemberList"],"mappings":"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","file":"static/js/94.f86d840a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Hidden from '@mui/material/Hidden';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport Card from '@mui/material/Card';\r\nimport {Box, drawerClasses, Slide} from '@mui/material';\r\nimport {useDispatch} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {onToggleAppDrawer} from '../../../redux/actions';\r\n\r\nconst AppSidebar = (props) => {\r\n  const {isAppDrawerOpen, sidebarContent} = props;\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Slide direction='right' in mountOnEnter unmountOnExit>\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          width: {\r\n            lg: 280,\r\n          },\r\n        }}\r\n      >\r\n        <Hidden lgUp>\r\n          <Drawer\r\n            open={isAppDrawerOpen}\r\n            onClose={() => dispatch(onToggleAppDrawer())}\r\n            sx={{\r\n              position: 'absolute',\r\n              [`& .${drawerClasses.paper}`]: {\r\n                width: 280,\r\n                '& .listItem': {\r\n                  zIndex: 1305,\r\n                },\r\n              },\r\n            }}\r\n          >\r\n            {sidebarContent}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden lgDown>\r\n          <Card style={{height: '100%'}}>{sidebarContent}</Card>\r\n        </Hidden>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default AppSidebar;\r\n\r\nAppSidebar.propTypes = {\r\n  isAppDrawerOpen: PropTypes.bool,\r\n  footer: PropTypes.bool,\r\n  navStyle: PropTypes.string,\r\n  fullView: PropTypes.bool,\r\n  sidebarContent: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport {NavStyle} from '../../../shared/constants/AppEnums';\r\n\r\nconst getMainHeaderHeight = (navStyle, screenSize) => {\r\n  if (navStyle === NavStyle.BIT_BUCKET) return screenSize >= 1200 ? 0 : 70; // Header Height\r\n  return screenSize >= 600 ? 70 : 56;\r\n};\r\n\r\nconst AppContainerWrapper = ({children, navStyle, footer, ...rest}) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        height: {\r\n          xs: `calc(100vh - ${\r\n            47 + // AppsHeader Height // apps title block height\r\n            40 + //Container Padding\r\n            getMainHeaderHeight(navStyle, 0) +\r\n            (footer ? 47 : 0)\r\n          }px) !important`,\r\n          sm: `calc(100vh - ${\r\n            47 + // AppsHeader Height\r\n            40 + //Container Padding\r\n            getMainHeaderHeight(navStyle, 600) +\r\n            (footer ? 47 : 0)\r\n          }px) !important`,\r\n          md: `calc(100vh - ${\r\n            47 + // AppsHeader Height\r\n            60 + //Container Padding\r\n            getMainHeaderHeight(navStyle, 900) +\r\n            (footer ? 47 : 0)\r\n          }px) !important`,\r\n          lg: `calc(100vh - ${\r\n            40 + // AppsHeader Height\r\n            60 + //Container Padding\r\n            getMainHeaderHeight(navStyle, 1200) +\r\n            (footer ? 47 : 0)\r\n          }px) !important`,\r\n          xl: `calc(100vh - ${\r\n            40 + // AppsHeader Height\r\n            100 + //Container Padding\r\n            getMainHeaderHeight(navStyle, 1536) +\r\n            (footer ? 57 : 0)\r\n          }px) !important`,\r\n        },\r\n      }}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppContainerWrapper;\r\n\r\nAppContainerWrapper.propTypes = {\r\n  children: PropsTypes.node,\r\n  navStyle: PropsTypes.string,\r\n  footer: PropsTypes.bool,\r\n};\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport {Box, Slide, Zoom} from '@mui/material';\r\nimport Hidden from '@mui/material/Hidden';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@mui/material/Card';\r\n\r\nimport {onToggleAppDrawer} from '../../../redux/actions';\r\nimport AppSidebar from './AppSidebar';\r\nimport {useLayoutContext} from '../../utility/AppContextProvider/LayoutContextProvider';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppContainerWrapper from './AppContainerWrapper';\r\n\r\nconst AppsContainer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const isAppDrawerOpen = useSelector(({common}) => common.isAppDrawerOpen);\r\n  const {footer} = useLayoutContext();\r\n  const {navStyle} = useLayoutContext();\r\n  const {title, sidebarContent, fullView, children} = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflow: 'hidden',\r\n        margin: -4,\r\n        padding: 4,\r\n        ...props.sxStyle,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          marginTop: fullView ? 0 : -4,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          mb: {\r\n            xs: fullView ? 4 : 2,\r\n            lg: 4,\r\n          },\r\n          mt: {\r\n            xs: fullView ? 0 : -4,\r\n            lg: 0,\r\n          },\r\n        }}\r\n      >\r\n        {fullView ? null : (\r\n          <Hidden lgUp>\r\n            <IconButton\r\n              edge='start'\r\n              sx={{\r\n                marginRight: (theme) => theme.spacing(2),\r\n              }}\r\n              color='inherit'\r\n              aria-label='open drawer'\r\n              onClick={() => dispatch(onToggleAppDrawer())}\r\n              size='large'\r\n            >\r\n              <MenuIcon\r\n                sx={{\r\n                  width: 35,\r\n                  height: 35,\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </Hidden>\r\n        )}\r\n        <Zoom in style={{transitionDelay: '300ms'}}>\r\n          <Box\r\n            component='h2'\r\n            variant='h2'\r\n            sx={{\r\n              fontSize: 16,\r\n              color: 'text.primary',\r\n              fontWeight: Fonts.SEMI_BOLD,\r\n            }}\r\n          >\r\n            {title}\r\n          </Box>\r\n        </Zoom>\r\n      </Box>\r\n\r\n      <AppContainerWrapper navStyle={navStyle} footer={footer}>\r\n        {sidebarContent ? (\r\n          <AppSidebar\r\n            isAppDrawerOpen={isAppDrawerOpen}\r\n            footer={footer}\r\n            fullView={fullView}\r\n            navStyle={navStyle}\r\n            sidebarContent={sidebarContent}\r\n          />\r\n        ) : null}\r\n\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: {\r\n              xs: '100%',\r\n              lg: `calc(100% - ${fullView ? 0 : 280}px)`,\r\n            },\r\n            pl: {\r\n              lg: props.fullView ? 0 : 8,\r\n            },\r\n          }}\r\n        >\r\n          <Slide direction='left' in mountOnEnter unmountOnExit>\r\n            <Card\r\n              style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                position: 'relative',\r\n                ...props.cardStyle,\r\n              }}\r\n            >\r\n              {children}\r\n            </Card>\r\n          </Slide>\r\n          <AppInfoView />\r\n        </Box>\r\n      </AppContainerWrapper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppsContainer;\r\n\r\nAppsContainer.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nAppsContainer.propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  sidebarContent: PropTypes.node,\r\n  fullView: PropTypes.bool,\r\n  children: PropTypes.node,\r\n  sxStyle: PropTypes.object,\r\n  cardStyle: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {styled} from '@mui/material/styles';\r\nimport SimpleBarReact from 'simplebar-react';\r\n\r\nconst AppsContentContainer = styled(SimpleBarReact)(() => {\r\n  return {\r\n    width: '100%',\r\n    paddingTop: 8,\r\n    paddingBottom: 8,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    '& .simplebar-content': {\r\n      height: '100%',\r\n    },\r\n  };\r\n});\r\n\r\nconst AppsContent = ({isDetailView, fullView, children, ...rest}) => {\r\n  return (\r\n    <AppsContentContainer\r\n      {...rest}\r\n      sx={{\r\n        height: {\r\n          xs: `calc(100% - ${isDetailView ? 60 : 129}px)`,\r\n          sm: `calc(100% - ${fullView ? 0 : 60}px)`,\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </AppsContentContainer>\r\n  );\r\n};\r\n\r\nexport default AppsContent;\r\n\r\nAppsContent.propTypes = {\r\n  children: PropTypes.node,\r\n  fullView: PropTypes.bool,\r\n  isDetailView: PropTypes.bool,\r\n};\r\n\r\nAppsContent.defaultProps = {isDetailView: false};\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../../../shared/constants/AppEnums';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nconst CardHeader = (props) => {\r\n  const {onClickDeleteIcon, onCloseAddCard, onAddAttachments} = props;\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n      const files = acceptedFiles.map((file) => {\r\n        return {\r\n          id: Math.floor(Math.random() * 10000),\r\n          file,\r\n          preview: URL.createObjectURL(file),\r\n        };\r\n      });\r\n      onAddAttachments(files);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        py: 2,\r\n        px: {xs: 5, lg: 8, xl: 10},\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        borderBottom: (theme) => `solid 1px ${theme.palette.divider}`,\r\n      }}\r\n    >\r\n      <Box\r\n        component='h5'\r\n        sx={{\r\n          pr: 2,\r\n          fontWeight: Fonts.BOLD,\r\n          fontSize: 16,\r\n        }}\r\n      >\r\n        <IntlMessages id='scrumboard.board' />\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          pl: 2,\r\n          mr: {xs: -2, lg: -3, xl: -4},\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Box {...getRootProps({className: 'dropzone'})}>\r\n          <input {...getInputProps()} />\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </Box>\r\n        <Box>\r\n          <IconButton\r\n            onClick={onClickDeleteIcon}\r\n            sx={{\r\n              color: (theme) => theme.palette.text.secondary,\r\n            }}\r\n          >\r\n            <DeleteOutlinedIcon />\r\n          </IconButton>\r\n        </Box>\r\n        <Box>\r\n          <IconButton\r\n            onClick={() => onCloseAddCard()}\r\n            sx={{\r\n              color: (theme) => theme.palette.text.secondary,\r\n            }}\r\n          >\r\n            <CloseOutlinedIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CardHeader;\r\n\r\nCardHeader.propTypes = {\r\n  onClickDeleteIcon: PropTypes.func,\r\n  onAddAttachments: PropTypes.func,\r\n  onCloseAddCard: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport moment from 'moment';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../../../shared/constants/AppEnums';\r\nimport {IconButton, alpha} from '@mui/material';\r\nimport CloudDownloadOutlinedIcon from '@mui/icons-material/CloudDownloadOutlined';\r\n\r\nimport {styled} from '@mui/material/styles';\r\n\r\nconst CardAttachmentWrapper = styled('div')(({theme}) => {\r\n  return {\r\n    transition: 'all 0.4s ease',\r\n    backgroundColor: alpha(theme.palette.common.black, 0.04),\r\n    overflow: 'hidden',\r\n    borderRadius: 4,\r\n    width: 120,\r\n    position: 'relative',\r\n    '& .attachment-thumb': {\r\n      overflow: 'hidden',\r\n      position: 'relative',\r\n      '& > img': {\r\n        width: '100%',\r\n      },\r\n      '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        left: 0,\r\n        top: 0,\r\n        zIndex: 1,\r\n        backgroundColor: alpha(theme.palette.common.black, 0.15),\r\n        width: '100%',\r\n        height: '1005',\r\n      },\r\n    },\r\n    '& .attachment-action': {\r\n      position: 'absolute',\r\n      right: 10,\r\n      top: 10,\r\n      zIndex: 3,\r\n      opacity: 0,\r\n      visibility: 'hidden',\r\n      transition: 'all 0.4s ease',\r\n    },\r\n    '& .icon-btn': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.5),\r\n      color: theme.palette.text.secondary,\r\n      padding: 6,\r\n      '&:not(:first-of-type)': {\r\n        marginLeft: 8,\r\n      },\r\n      '& svg': {\r\n        fontSize: 20,\r\n      },\r\n      '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.8),\r\n        color: theme.palette.text.secondary,\r\n      },\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.black, 0.08),\r\n      '& .attachment-action': {\r\n        opacity: 1,\r\n        visibility: 'visible',\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nconst CardAttachments = (props) => {\r\n  const {attachments, onDeleteAttachment} = props;\r\n\r\n  return (\r\n    <>\r\n      {attachments && attachments.length > 0 ? (\r\n        <Box\r\n          sx={{\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              mb: {xs: 3, sm: 5},\r\n            }}\r\n          >\r\n            <Box component='h4'>\r\n              <IntlMessages id='common.attachments' />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              flexWrap: 'wrap',\r\n              mx: -1.5,\r\n            }}\r\n          >\r\n            {attachments.map((attachment) => {\r\n              const {file} = attachment;\r\n              return (\r\n                <Box\r\n                  key={attachment.id}\r\n                  sx={{\r\n                    px: 1.5,\r\n                    mb: 3,\r\n                  }}\r\n                >\r\n                  <CardAttachmentWrapper>\r\n                    <Box className='attachment-thumb'>\r\n                      <img src={attachment.preview} alt='attachment' />\r\n\r\n                      <Box className='attachment-action'>\r\n                        <IconButton\r\n                          className='icon-btn'\r\n                          color='primary'\r\n                          variant='outlined'\r\n                          aria-label='edit'\r\n                        >\r\n                          <CloudDownloadOutlinedIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          className='icon-btn'\r\n                          color='primary'\r\n                          variant='outlined'\r\n                          aria-label='delete'\r\n                          onClick={() => onDeleteAttachment(attachment.id)}\r\n                        >\r\n                          <DeleteOutlinedIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    <Box\r\n                      sx={{\r\n                        px: 2,\r\n                        py: 1.5,\r\n                      }}\r\n                    >\r\n                      <Box\r\n                        sx={{\r\n                          color: 'primary.main',\r\n                          fontWeight: Fonts.LIGHT,\r\n                        }}\r\n                      >\r\n                        {file.name}\r\n                      </Box>\r\n                      <Box\r\n                        sx={{\r\n                          my: 1,\r\n                          fontSize: 12,\r\n                        }}\r\n                      >\r\n                        <Box\r\n                          component='span'\r\n                          sx={{\r\n                            mr: 1,\r\n                          }}\r\n                        >\r\n                          {moment(file.lastModified).format('ll').split(',')[0]}\r\n                        </Box>\r\n                        <Box\r\n                          component='span'\r\n                          sx={{\r\n                            mr: 1,\r\n                          }}\r\n                        >\r\n                          <IntlMessages id='common.at' />\r\n                        </Box>\r\n                        <Box component='span'>\r\n                          {moment(file.lastModified).format('LT')}\r\n                        </Box>\r\n                      </Box>\r\n                    </Box>\r\n                  </CardAttachmentWrapper>\r\n                </Box>\r\n              );\r\n            })}\r\n          </Box>\r\n        </Box>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardAttachments;\r\n\r\nCardAttachments.defaultProps = {\r\n  attachments: [],\r\n};\r\n\r\nCardAttachments.propTypes = {\r\n  attachments: PropTypes.array,\r\n  onDeleteAttachment: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport TextField from '@mui/material/TextField';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport Hidden from '@mui/material/Hidden';\r\nimport {IconButton} from '@mui/material';\r\n\r\nimport {styled} from '@mui/material/styles';\r\n\r\nconst CheckedItemWrapper = styled('div')(() => {\r\n  return {\r\n    position: 'relative',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    '& .icon-btn': {\r\n      transition: 'all 0.4s ease',\r\n      opacity: 0,\r\n      visibility: 'hidden',\r\n    },\r\n    '&:hover': {\r\n      '& .icon-btn': {\r\n        opacity: 1,\r\n        visibility: 'visible',\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nconst CardCheckedList = (props) => {\r\n  const {\r\n    onAddNewCheckedItem,\r\n    checkedList,\r\n    onSetCheckedItemText,\r\n    onDeleteCheckedItem,\r\n  } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        mb: 2,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          mb: 4,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Box component='h4'>\r\n          <IntlMessages id='scrumboard.checkedLists' />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            ml: 'auto',\r\n            pl: 2,\r\n          }}\r\n        >\r\n          <Button\r\n            variant='outlined'\r\n            sx={{\r\n              textTransform: 'capitalize',\r\n              px: 4,\r\n            }}\r\n            onClick={() => onAddNewCheckedItem()}\r\n          >\r\n            <IntlMessages id='scrumboard.addNew' />\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {checkedList.map((checkedItem) => {\r\n        return (\r\n          <CheckedItemWrapper key={checkedItem.id}>\r\n            <Box\r\n              sx={{\r\n                mb: 4,\r\n                flex: 1,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Hidden xsDown>\r\n                <Checkbox\r\n                  sx={{\r\n                    mr: 2,\r\n                  }}\r\n                />\r\n              </Hidden>\r\n              <TextField\r\n                sx={{\r\n                  width: '100%',\r\n                  '& .inputprops-root': {\r\n                    width: '100%',\r\n                    margin: 'auto',\r\n                  },\r\n                }}\r\n                variant='outlined'\r\n                InputProps={{\r\n                  className: 'inputprops-root',\r\n                }}\r\n                value={checkedItem.title}\r\n                onChange={(e) =>\r\n                  onSetCheckedItemText(e.target.value, checkedItem.id)\r\n                }\r\n              />\r\n            </Box>\r\n            <Box\r\n              component='span'\r\n              sx={{\r\n                mb: 4,\r\n                ml: 3,\r\n              }}\r\n            >\r\n              <IconButton\r\n                className='icon-btn'\r\n                onClick={() => onDeleteCheckedItem(checkedItem.id)}\r\n              >\r\n                <DeleteOutlinedIcon />\r\n              </IconButton>\r\n            </Box>\r\n          </CheckedItemWrapper>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CardCheckedList;\r\n\r\nCardCheckedList.defaultProps = {\r\n  checkedList: [],\r\n};\r\n\r\nCardCheckedList.propTypes = {\r\n  onAddNewCheckedItem: PropTypes.func,\r\n  checkedList: PropTypes.array,\r\n  onSetCheckedItemText: PropTypes.func,\r\n  onDeleteCheckedItem: PropTypes.func,\r\n};\r\n","import React, {useState} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport {useIntl} from 'react-intl';\r\nimport PropTypes from 'prop-types';\r\nimport {orange} from '@mui/material/colors';\r\nimport {TextField} from '@mui/material';\r\nimport {AppList} from '../../../../../../@crema';\r\nimport {styled} from '@mui/material/styles';\r\nimport IntlMessages from '../../../../../../@crema/utility/IntlMessages';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport SendOutlinedIcon from '@mui/icons-material/SendOutlined';\r\nimport AppScrollbar from '../../../../../../@crema/core/AppScrollbar';\r\n\r\nconst CommentWrapper = styled('div')((props) => ({\r\n  display: 'flex',\r\n  marginTop: props.isPreviousSender ? 1 : 16,\r\n  '& .avatar': {\r\n    display: props.isPreviousSender ? 'none' : 'visible',\r\n  },\r\n  '& .date': {\r\n    display: props.isPreviousSender ? 'none' : 'visible',\r\n  },\r\n}));\r\n\r\nconst CommentItemWrapper = styled('div')((props) => ({\r\n  marginLeft: props.isPreviousSender ? 55 : 15,\r\n}));\r\n\r\nconst CommentDateWrapper = styled('div')(({theme}) => ({\r\n  color: theme.palette.text.disabled,\r\n  fontSize: 12,\r\n  display: 'block',\r\n  marginBottom: 6,\r\n}));\r\n\r\nconst CommentTextWrapper = styled('div')(({theme}) => ({\r\n  display: 'inline-block',\r\n  borderRadius: '0 10px 10px 0',\r\n  padding: '6px 12px',\r\n  position: 'relative',\r\n  backgroundColor: theme.palette.background.default,\r\n  border: `@border-style-base @border-width-base ${theme.palette.divider}`,\r\n\r\n  '.last-scrum-board-message &': {\r\n    borderRadius: '0 10px 10px 10px',\r\n  },\r\n  '& p': {\r\n    marginBottom: 0,\r\n  },\r\n}));\r\n\r\nconst CardComments = (props) => {\r\n  const {comments, onAddNewComment} = props;\r\n  const [comment, setComment] = useState('');\r\n\r\n  const onAddComment = () => {\r\n    onAddNewComment(comment);\r\n    setComment('');\r\n  };\r\n\r\n  const {messages} = useIntl();\r\n  return (\r\n    <Box>\r\n      <Box component='h4'>\r\n        <IntlMessages id='common.comments' />\r\n      </Box>\r\n\r\n      <Box\r\n        sx={{\r\n          mb: 5,\r\n        }}\r\n      >\r\n        <AppScrollbar\r\n          sx={{\r\n            maxHeight: 200,\r\n          }}\r\n        >\r\n          <AppList\r\n            data={comments}\r\n            renderRow={(item, index) => {\r\n              const isPreviousSender =\r\n                index > 0 && comments[index - 1].sender.id === item.sender.id;\r\n              return (\r\n                <CommentWrapper key={index} isPreviousSender={isPreviousSender}>\r\n                  {item.sender.image ? (\r\n                    <Avatar\r\n                      src={item.sender.image}\r\n                      className='avatar'\r\n                      sx={{\r\n                        width: 40,\r\n                        height: 40,\r\n                        backgroundColor: orange[500],\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <Avatar\r\n                      className='avatar'\r\n                      sx={{\r\n                        width: 40,\r\n                        height: 40,\r\n                        backgroundColor: orange[500],\r\n                      }}\r\n                    >\r\n                      {item.sender.name.charAt(0).toUpperCase()}\r\n                    </Avatar>\r\n                  )}\r\n\r\n                  <CommentItemWrapper isPreviousSender={isPreviousSender}>\r\n                    <CommentDateWrapper className='date'>\r\n                      {item.date}\r\n                    </CommentDateWrapper>\r\n                    <CommentTextWrapper component='p'>\r\n                      {item.comment}\r\n                    </CommentTextWrapper>\r\n                  </CommentItemWrapper>\r\n                </CommentWrapper>\r\n              );\r\n            }}\r\n          />\r\n        </AppScrollbar>\r\n      </Box>\r\n\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <TextField\r\n          multiline\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n          sx={{\r\n            width: '100%',\r\n          }}\r\n          rows='1'\r\n          variant='outlined'\r\n          placeholder={messages['common.pressEnter']}\r\n        />\r\n        <IconButton\r\n          disabled={!comment}\r\n          onClick={() => onAddComment()}\r\n          sx={{\r\n            ml: 2,\r\n            '& svg': {\r\n              pl: 1,\r\n            },\r\n          }}\r\n          aria-label='send'\r\n        >\r\n          <SendOutlinedIcon fontSize='inherit' />\r\n        </IconButton>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CardComments;\r\n\r\nCardComments.defaultProps = {\r\n  comments: [],\r\n};\r\n\r\nCardComments.propTypes = {\r\n  comments: PropTypes.array,\r\n  onAddNewComment: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport {Form} from 'formik';\r\nimport AppGridContainer from '@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport CardAttachments from './CardAttachments';\r\nimport CardCheckedList from './CardCheckedList';\r\nimport CardComments from './CardComments';\r\nimport Button from '@mui/material/Button';\r\nimport {useIntl} from 'react-intl';\r\nimport {useSelector} from 'react-redux';\r\nimport Divider from '@mui/material/Divider';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport {Autocomplete, DatePicker} from '@mui/lab';\r\nimport {AppScrollbar} from '@crema';\r\nimport AppTextField from '@crema/core/AppFormComponents/AppTextField';\r\n\r\nconst AddCardForm = (props) => {\r\n  const {\r\n    values,\r\n    setFieldValue,\r\n    checkedList,\r\n    setCheckedList,\r\n    comments,\r\n    setComments,\r\n    authUser,\r\n    attachments,\r\n    setAttachments,\r\n    selectedLabels,\r\n    setSelectedLabels,\r\n    selectedMembers,\r\n    setMembersList,\r\n    selectedCard,\r\n    onCloseAddCard,\r\n    isSubmitting,\r\n  } = props;\r\n\r\n  const {messages} = useIntl();\r\n\r\n  const labelList = useSelector(({scrumboardApp}) => scrumboardApp.labelList);\r\n\r\n  const memberList = useSelector(({scrumboardApp}) => scrumboardApp.memberList);\r\n\r\n  const onDeleteCheckedItem = (id) => {\r\n    const updatedList = checkedList.filter((item) => item.id !== id);\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onAddNewCheckedItem = () => {\r\n    const item = {\r\n      id: Math.floor(Math.random() * 1000),\r\n      title: '',\r\n    };\r\n    const updatedList = checkedList.concat(item);\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onSetCheckedItemText = (title, id) => {\r\n    const updatedList = checkedList.map((item) => {\r\n      if (item.id === id) {\r\n        item.title = title;\r\n        return item;\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setCheckedList(updatedList);\r\n  };\r\n\r\n  const onAddNewComment = (comment) => {\r\n    setComments(\r\n      comments.concat({\r\n        sender: {\r\n          id: authUser.id,\r\n          name: authUser.displayName ? authUser.displayName : 'User',\r\n          image: authUser.photoURL,\r\n        },\r\n        comment: comment,\r\n        date: moment().format('ll'),\r\n      }),\r\n    );\r\n  };\r\n\r\n  const onDeleteAttachment = (id) => {\r\n    const updatedAttachments = attachments.filter(\r\n      (attachment) => attachment.id !== id,\r\n    );\r\n    setAttachments(updatedAttachments);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      style={{\r\n        width: '100%',\r\n        height: '100%',\r\n      }}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <AppScrollbar\r\n        sx={{\r\n          height: 'calc(100% - 70px)',\r\n          '& .simplebar-content': {\r\n            height: '100%',\r\n          },\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            pt: 6,\r\n            px: {xs: 5, lg: 8, xl: 10},\r\n            pb: 2,\r\n            display: 'flex',\r\n            flexDirection: {xs: 'column', md: 'row'},\r\n            alignItems: {md: 'center'},\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              mb: 3,\r\n              width: {md: '60%'},\r\n            }}\r\n          >\r\n            <AppTextField\r\n              sx={{\r\n                width: '100%',\r\n              }}\r\n              variant='outlined'\r\n              label={<IntlMessages id='common.title' />}\r\n              name='title'\r\n            />\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              ml: {md: 8},\r\n              mb: 3,\r\n              width: {md: '40%'},\r\n              '& .MuiFormControl-root': {\r\n                width: '100%',\r\n              },\r\n            }}\r\n          >\r\n            <DatePicker\r\n              autoOk\r\n              format='YYYY/MM/DD'\r\n              variant='outlined'\r\n              inputVariant='outlined'\r\n              label={<IntlMessages id='common.date' />}\r\n              name='date'\r\n              value={values.date}\r\n              onChange={(value) => setFieldValue('date', value)}\r\n              renderInput={(params) => <TextField {...params} />}\r\n            />\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box\r\n          sx={{\r\n            pb: 5,\r\n            px: {xs: 5, lg: 8, xl: 10},\r\n          }}\r\n        >\r\n          <AppTextField\r\n            name='desc'\r\n            multiline\r\n            sx={{\r\n              width: '100%',\r\n              mb: 5,\r\n            }}\r\n            rows='3'\r\n            variant='outlined'\r\n            placeholder={messages['common.description']}\r\n          />\r\n\r\n          <AppGridContainer\r\n            sx={{\r\n              mb: 3,\r\n            }}\r\n          >\r\n            <Grid item xs={12} md={6}>\r\n              <Autocomplete\r\n                multiple\r\n                id='tags-outlined'\r\n                options={labelList}\r\n                getOptionLabel={(option) => option.name}\r\n                value={selectedLabels}\r\n                onChange={(event, value) => setSelectedLabels(value)}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    variant='outlined'\r\n                    label={<IntlMessages id='common.label' />}\r\n                    fullWidth\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Autocomplete\r\n                multiple\r\n                id='tags-outlined'\r\n                options={memberList}\r\n                getOptionLabel={(option) => option.name}\r\n                value={selectedMembers}\r\n                onChange={(event, value) => setMembersList(value)}\r\n                renderOption={(option) => (\r\n                  <React.Fragment>\r\n                    {option.image ? (\r\n                      <Avatar src={option.image} />\r\n                    ) : (\r\n                      <Avatar>{option?.name?.toUpperCase()}</Avatar>\r\n                    )}\r\n                    <Box ml={4}>{option?.name}</Box>\r\n                  </React.Fragment>\r\n                )}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    variant='outlined'\r\n                    label={<IntlMessages id='common.members' />}\r\n                    fullWidth\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </AppGridContainer>\r\n\r\n          <CardAttachments\r\n            attachments={attachments}\r\n            onDeleteAttachment={onDeleteAttachment}\r\n          />\r\n\r\n          {selectedCard ? (\r\n            <CardCheckedList\r\n              onAddNewCheckedItem={onAddNewCheckedItem}\r\n              checkedList={checkedList}\r\n              onDeleteCheckedItem={onDeleteCheckedItem}\r\n              onSetCheckedItemText={onSetCheckedItemText}\r\n            />\r\n          ) : null}\r\n\r\n          <Divider\r\n            sx={{\r\n              mb: {xs: 4, md: 6},\r\n              mx: {xs: -5, lg: -8, xl: -10},\r\n            }}\r\n          />\r\n\r\n          <CardComments comments={comments} onAddNewComment={onAddNewComment} />\r\n        </Box>\r\n      </AppScrollbar>\r\n      <Box\r\n        sx={{\r\n          px: 8,\r\n          py: 4,\r\n          textAlign: 'right',\r\n          borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\r\n        }}\r\n      >\r\n        <Button\r\n          sx={{\r\n            px: 8,\r\n          }}\r\n          color='primary'\r\n          variant='outlined'\r\n          disabled={isSubmitting}\r\n          type='submit'\r\n        >\r\n          <IntlMessages id='common.done' />\r\n        </Button>\r\n        <Button\r\n          sx={{\r\n            px: 8,\r\n            ml: 2.5,\r\n          }}\r\n          color='primary'\r\n          variant='outlined'\r\n          onClick={onCloseAddCard}\r\n        >\r\n          <IntlMessages id='common.cancel' />\r\n        </Button>\r\n      </Box>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCardForm;\r\n\r\nAddCardForm.defaultProps = {\r\n  comments: [],\r\n  attachments: [],\r\n  selectedLabels: [],\r\n  selectedMembers: [],\r\n  isSubmitting: false,\r\n};\r\n\r\nAddCardForm.propTypes = {\r\n  board: PropTypes.object.isRequired,\r\n  list: PropTypes.object.isRequired,\r\n  values: PropTypes.object.isRequired,\r\n  setFieldValue: PropTypes.func,\r\n  checkedList: PropTypes.array.isRequired,\r\n  setCheckedList: PropTypes.func,\r\n  comments: PropTypes.array,\r\n  setComments: PropTypes.func,\r\n  authUser: PropTypes.object.isRequired,\r\n  attachments: PropTypes.array,\r\n  setAttachments: PropTypes.func,\r\n  selectedLabels: PropTypes.array,\r\n  setSelectedLabels: PropTypes.func,\r\n  selectedMembers: PropTypes.array,\r\n  setMembersList: PropTypes.func,\r\n  onCloseAddCard: PropTypes.func,\r\n  selectedCard: PropTypes.object.isRequired,\r\n  isSubmitting: PropTypes.bool,\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {useDispatch} from 'react-redux';\r\nimport {\r\n  onAddNewCard,\r\n  onDeleteSelectedCard,\r\n  onEditCardDetails,\r\n} from '../../../../../../redux/actions';\r\nimport AppConfirmDialog from '@crema/core/AppConfirmDialog';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport CardHeader from './CardHeader';\r\nimport PropTypes from 'prop-types';\r\nimport AddCardForm from './AddCardForm';\r\nimport {useAuthUser} from '../../../../../../@crema/utility/AuthHooks';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst validationSchema = yup.object({\r\n  title: yup.string().required(<IntlMessages id='validation.titleRequired' />),\r\n});\r\n\r\nconst AddCard = (props) => {\r\n  const {isAddCardOpen, onCloseAddCard, board, list, selectedCard} = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const {user} = useAuthUser();\r\n  console.log('selectedCard: ', selectedCard);\r\n  const [checkedList, setCheckedList] = useState(() =>\r\n    selectedCard ? selectedCard.checkedList : [],\r\n  );\r\n\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n  const [selectedMembers, setMembersList] = useState(() =>\r\n    selectedCard ? selectedCard.members : [],\r\n  );\r\n\r\n  const [selectedLabels, setSelectedLabels] = useState(() =>\r\n    selectedCard ? selectedCard.label : [],\r\n  );\r\n\r\n  const [comments, setComments] = useState(() =>\r\n    selectedCard ? selectedCard.comments : [],\r\n  );\r\n\r\n  const [attachments, setAttachments] = useState(() =>\r\n    selectedCard ? selectedCard.attachments : [],\r\n  );\r\n\r\n  const onAddAttachments = (files) => {\r\n    setAttachments([...attachments, ...files]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedCard) {\r\n      setCheckedList(selectedCard ? selectedCard.checkedList : []);\r\n      setMembersList(selectedCard ? selectedCard.members : []);\r\n      setSelectedLabels(selectedCard ? selectedCard.label : []);\r\n      setComments(selectedCard ? selectedCard.comments : []);\r\n      setAttachments(selectedCard ? selectedCard.attachments : []);\r\n    }\r\n  }, [selectedCard]);\r\n\r\n  const onDeleteCard = () => {\r\n    const boardId = board.id;\r\n    const listId = list.id;\r\n    const cardId = selectedCard.id;\r\n    dispatch(onDeleteSelectedCard(boardId, listId, cardId));\r\n    setDeleteDialogOpen(false);\r\n    onCloseAddCard();\r\n  };\r\n\r\n  const onClickDeleteIcon = () => {\r\n    if (selectedCard) {\r\n      setDeleteDialogOpen(true);\r\n    } else {\r\n      onCloseAddCard();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      sx={{\r\n        flexShrink: 0,\r\n        '& .MuiDrawer-paper': {\r\n          width: {xs: 320, sm: 400, md: 600, lg: 900},\r\n          boxSizing: 'border-box',\r\n        },\r\n      }}\r\n      anchor='right'\r\n      open={isAddCardOpen}\r\n      onClose={onCloseAddCard}\r\n    >\r\n      <Formik\r\n        validateOnChange={true}\r\n        initialValues={{\r\n          title: selectedCard ? selectedCard.title : '',\r\n          desc: selectedCard && selectedCard.desc ? selectedCard.desc : '',\r\n          label: selectedCard && selectedCard.label ? selectedCard.label : [],\r\n          members:\r\n            selectedCard && selectedCard.members ? selectedCard.members : [],\r\n          date: selectedCard && selectedCard.date ? selectedCard.date : null,\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(data, {setSubmitting, resetForm}) => {\r\n          setSubmitting(true);\r\n          if (selectedCard) {\r\n            const editedCard = {\r\n              ...selectedCard,\r\n              comments: comments,\r\n              ...data,\r\n              attachments: attachments,\r\n              members: selectedMembers,\r\n              label: selectedLabels,\r\n              checkedList: checkedList.filter((item) => item.title !== ''),\r\n            };\r\n            dispatch(onEditCardDetails(board, list, editedCard));\r\n          } else {\r\n            const newCard = {\r\n              id: Math.floor(Math.random() * 1000),\r\n              attachments: attachments,\r\n              checkedList: [],\r\n              comments: comments,\r\n              ...data,\r\n              label: selectedLabels,\r\n              members: selectedMembers,\r\n            };\r\n            dispatch(onAddNewCard(board, list, newCard));\r\n          }\r\n          onCloseAddCard();\r\n          resetForm();\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({values, isSubmitting, setFieldValue}) => (\r\n          <>\r\n            <CardHeader\r\n              onAddAttachments={onAddAttachments}\r\n              onClickDeleteIcon={onClickDeleteIcon}\r\n              onCloseAddCard={onCloseAddCard}\r\n            />\r\n            <Box\r\n              sx={{\r\n                height: 'calc(100% - 60px)',\r\n              }}\r\n            >\r\n              <AddCardForm\r\n                values={values}\r\n                isSubmitting={isSubmitting}\r\n                setFieldValue={setFieldValue}\r\n                board={board}\r\n                list={list}\r\n                checkedList={checkedList}\r\n                onCloseAddCard={onCloseAddCard}\r\n                setCheckedList={setCheckedList}\r\n                comments={comments}\r\n                setComments={setComments}\r\n                authUser={user}\r\n                attachments={attachments}\r\n                setAttachments={setAttachments}\r\n                selectedLabels={selectedLabels}\r\n                setSelectedLabels={setSelectedLabels}\r\n                selectedMembers={selectedMembers}\r\n                setMembersList={setMembersList}\r\n                selectedCard={selectedCard}\r\n              />\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Formik>\r\n\r\n      {isDeleteDialogOpen ? (\r\n        <AppConfirmDialog\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteCard}\r\n          title={<IntlMessages id='scrumboard.deleteCard' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n\r\nAddCard.defaultProps = {\r\n  board: null,\r\n  list: null,\r\n  selectedCard: null,\r\n};\r\n\r\nAddCard.propTypes = {\r\n  isAddCardOpen: PropTypes.bool.isRequired,\r\n  onCloseAddCard: PropTypes.func.isRequired,\r\n  board: PropTypes.object,\r\n  list: PropTypes.object,\r\n  selectedCard: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport {Box} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Members = (props) => {\r\n  const {members} = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {members.map((member) => {\r\n        return (\r\n          <Tooltip title={member.name} key={member.id}>\r\n            {member.image ? (\r\n              <Avatar\r\n                sx={{\r\n                  width: 35,\r\n                  height: 35,\r\n                  mr: 2,\r\n                }}\r\n                src={member.image}\r\n                alt='created'\r\n              />\r\n            ) : (\r\n              <Avatar\r\n                sx={{\r\n                  width: 35,\r\n                  height: 35,\r\n                  mr: 2,\r\n                }}\r\n              >\r\n                {member.name[0].toUpperCase()}\r\n              </Avatar>\r\n            )}\r\n          </Tooltip>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Members;\r\n\r\nMembers.propTypes = {\r\n  members: PropTypes.array.isRequired,\r\n};\r\n","import React from 'react';\r\nimport {Box} from '@mui/material';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Labels = ({labels}) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        m: 4,\r\n        mx: -1,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {labels.map((label) => {\r\n        return (\r\n          <Tooltip title={label.name} placement='top' key={label.id}>\r\n            <Box\r\n              sx={{\r\n                height: {xs: 4, sm: 6},\r\n                width: 32,\r\n                mx: 1,\r\n                borderRadius: 20,\r\n                backgroundColor: label.color,\r\n              }}\r\n              key={label.id}\r\n            />\r\n          </Tooltip>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Labels;\r\n\r\nLabels.propTypes = {\r\n  labels: PropTypes.array.isRequired,\r\n};\r\n","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\r\nimport ChatBubbleIcon from '@mui/icons-material/ChatBubble';\r\nimport moment from 'moment';\r\nimport {Box} from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport Members from './Members';\r\nimport Labels from './Labels';\r\nimport {Fonts} from '../../../../../../shared/constants/AppEnums';\r\n\r\nconst CardDetail = ({\r\n  title,\r\n  attachments = [],\r\n  label = [],\r\n  members,\r\n  date,\r\n  comments,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <Card\r\n      sx={{\r\n        py: 4,\r\n        px: 6,\r\n        mb: 2,\r\n        cursor: 'pointer',\r\n        whiteSpace: 'normal',\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n      }}\r\n    >\r\n      <Box\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          onClick(e);\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            mb: 3,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              mr: 2,\r\n              fontWeight: Fonts.MEDIUM,\r\n            }}\r\n          >\r\n            {title}\r\n          </Box>\r\n          {attachments && attachments.length > 0 ? (\r\n            <Box\r\n              sx={{\r\n                ml: 'auto',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Box\r\n                component='span'\r\n                sx={{\r\n                  fontWeight: Fonts.LIGHT,\r\n                }}\r\n              >\r\n                {attachments.length}\r\n              </Box>\r\n              <AttachFileIcon\r\n                sx={{\r\n                  ml: 2,\r\n                }}\r\n              />\r\n            </Box>\r\n          ) : null}\r\n        </Box>\r\n        {label.length > 0 ? <Labels labels={label} /> : null}\r\n\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          {members.length > 0 ? <Members members={members} /> : null}\r\n\r\n          <Box\r\n            sx={{\r\n              ml: 1,\r\n              mr: 'auto',\r\n              color: 'text.secondary',\r\n            }}\r\n          >\r\n            {date ? moment(date).format('ll').split(',')[0] : null}\r\n          </Box>\r\n          {comments && comments.length > 0 ? (\r\n            <Box\r\n              sx={{\r\n                ml: 2,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                color: 'text.secondary',\r\n              }}\r\n            >\r\n              <Box\r\n                component='span'\r\n                sx={{\r\n                  mr: 2,\r\n                  fontWeight: Fonts.LIGHT,\r\n                }}\r\n              >\r\n                {comments.length}\r\n              </Box>\r\n              <ChatBubbleIcon />\r\n            </Box>\r\n          ) : null}\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardDetail;\r\n\r\nCardDetail.defaultProps = {\r\n  list: null,\r\n};\r\n\r\nCardDetail.propTypes = {\r\n  title: PropTypes.string,\r\n  attachments: PropTypes.array,\r\n  label: PropTypes.array,\r\n  members: PropTypes.array,\r\n  date: PropTypes.string,\r\n  comments: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};\r\n","import React, {useState} from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport TextField from '@mui/material/TextField';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport Box from '@mui/material/Box';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../../shared/constants/AppEnums';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport AppConfirmDialog from '@crema/core/AppConfirmDialog';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nconst ListHeader = (props) => {\r\n  const {name, id, onDelete, updateTitle} = props;\r\n\r\n  const [isEditListName, setEditListName] = useState(false);\r\n\r\n  const [editedListName, setEditedListName] = useState('');\r\n\r\n  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n  const onDeleteBoardList = () => {\r\n    onDelete(id);\r\n    setDeleteDialogOpen(false);\r\n  };\r\n\r\n  const onEditButtonClick = () => {\r\n    setEditedListName(name);\r\n    setEditListName(!isEditListName);\r\n  };\r\n\r\n  const onEditListName = () => {\r\n    if (editedListName !== '') {\r\n      updateTitle(editedListName);\r\n      setEditListName(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        py: 1.75,\r\n        px: 6,\r\n        mb: 2,\r\n        minHeight: 56,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        {!isEditListName ? (\r\n          <>\r\n            <Box\r\n              componet='h5'\r\n              sx={{\r\n                fontSize: 15,\r\n                fontWeight: Fonts.MEDIUM,\r\n                width: '100%',\r\n                whiteSpace: 'nowrap',\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n              }}\r\n            >\r\n              {name}\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                ml: 'auto',\r\n                mr: -2,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <IconButton\r\n                onClick={onEditButtonClick}\r\n                sx={{\r\n                  color: (theme) => theme.palette.text.secondary,\r\n                }}\r\n              >\r\n                <EditOutlinedIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                onClick={() => setDeleteDialogOpen(true)}\r\n                sx={{\r\n                  color: (theme) => theme.palette.text.secondary,\r\n                }}\r\n              >\r\n                <DeleteOutlinedIcon />\r\n              </IconButton>\r\n            </Box>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Box\r\n              sx={{\r\n                mr: 3,\r\n              }}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label={<IntlMessages id='scrumboard.listTitle' />}\r\n                value={editedListName}\r\n                onChange={(event) => setEditedListName(event.target.value)}\r\n              />\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                ml: 'auto',\r\n                mr: -2,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <IconButton\r\n                onClick={onEditListName}\r\n                sx={{\r\n                  color: (theme) => theme.palette.text.secondary,\r\n                }}\r\n              >\r\n                <CheckIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                onClick={() => setEditListName(false)}\r\n                sx={{\r\n                  color: (theme) => theme.palette.text.secondary,\r\n                }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n\r\n      {isDeleteDialogOpen ? (\r\n        <AppConfirmDialog\r\n          open={isDeleteDialogOpen}\r\n          onDeny={setDeleteDialogOpen}\r\n          onConfirm={onDeleteBoardList}\r\n          title={<IntlMessages id='scrumboard.deleteMessage' />}\r\n          dialogTitle={<IntlMessages id='common.deleteItem' />}\r\n        />\r\n      ) : null}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ListHeader;\r\n\r\nListHeader.propTypes = {\r\n  boardId: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  id: PropTypes.number,\r\n  onDelete: PropTypes.func,\r\n  updateTitle: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Card from '@mui/material/Card';\r\nimport PropTypes from 'prop-types';\r\nimport {grey} from '@mui/material/colors';\r\nimport {Fonts} from '../../../../../shared/constants/AppEnums';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\n\r\nconst AddCardButton = (props) => {\r\n  return (\r\n    <Card\r\n      sx={{\r\n        py: 2,\r\n        px: 6,\r\n        cursor: 'pointer',\r\n        minWidth: 330,\r\n      }}\r\n      onClick={() => props.t(props.laneId)}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Avatar\r\n          sx={{\r\n            backgroundColor: 'grey.100',\r\n            border: `1px dashed ${grey[400]}`,\r\n          }}\r\n        >\r\n          <AddIcon\r\n            sx={{\r\n              fontWeight: Fonts.LIGHT,\r\n              color: 'grey.500',\r\n            }}\r\n          />\r\n        </Avatar>\r\n        <Box\r\n          sx={{\r\n            ml: 3.5,\r\n            fontWeight: Fonts.REGULAR,\r\n          }}\r\n        >\r\n          <IntlMessages id='scrumboard.addACard' />\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddCardButton;\r\n\r\nAddCardButton.propTypes = {\r\n  t: PropTypes.func,\r\n  laneId: PropTypes.number.isRequired,\r\n};\r\n","import React, {useState} from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport TextField from '@mui/material/TextField';\r\nimport Card from '@mui/material/Card';\r\nimport Button from '@mui/material/Button';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Box from '@mui/material/Box';\r\nimport PropTypes from 'prop-types';\r\nimport {grey} from '@mui/material/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nconst AddNewList = (props) => {\r\n  const {onAdd, onCancel} = props;\r\n\r\n  const [listName, setListName] = useState('');\r\n\r\n  const onClickAddButton = () => {\r\n    if (listName !== '') {\r\n      onAdd(listName);\r\n      setListName('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        m: 1.25,\r\n        p: 2.5,\r\n        width: 350,\r\n        backgroundColor: 'background.default',\r\n        borderRadius: (theme) => theme.cardRadius / 4,\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          py: 2,\r\n          px: 6,\r\n          minHeight: 56,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar\r\n            sx={{\r\n              cursor: 'pointer',\r\n              backgroundColor: 'grey.100',\r\n              border: `1px dashed ${grey[400]}`,\r\n            }}\r\n          >\r\n            <AddIcon\r\n              sx={{\r\n                color: 'grey.500',\r\n                fontWeight: Fonts.LIGHT,\r\n              }}\r\n            />\r\n          </Avatar>\r\n          <Box\r\n            sx={{\r\n              ml: 3.5,\r\n              fontWeight: Fonts.MEDIUM,\r\n              fontSize: 15,\r\n            }}\r\n          >\r\n            <IntlMessages id='scrumboard.addAList' />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              ml: 'auto',\r\n              textAlign: 'right',\r\n            }}\r\n          >\r\n            <IconButton\r\n              onClick={onCancel}\r\n              sx={{\r\n                p: 2,\r\n                color: (theme) => theme.palette.text.secondary,\r\n              }}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n        <Box sx={{my: 3}}>\r\n          <TextField\r\n            sx={{\r\n              '& .MuiInputBase-input': {\r\n                height: 'auto',\r\n              },\r\n            }}\r\n            fullWidth\r\n            label={<IntlMessages id='scrumboard.cardTitle' />}\r\n            value={listName}\r\n            onChange={(event) => setListName(event.target.value)}\r\n          />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            my: 3,\r\n          }}\r\n        >\r\n          <Button\r\n            variant='outlined'\r\n            sx={{\r\n              paddingLeft: 6,\r\n              paddingRight: 6,\r\n            }}\r\n            onClick={() => onClickAddButton()}\r\n          >\r\n            <IntlMessages id='common.add' />\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddNewList;\r\n\r\nAddNewList.propTypes = {\r\n  onCancel: PropTypes.func,\r\n  onAdd: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport PropTypes from 'prop-types';\r\nimport {grey} from '@mui/material/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\n\r\nconst NewListButton = (props) => {\r\n  const {onClick} = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        m: 1.25,\r\n        p: 2.5,\r\n        width: 350,\r\n        backgroundColor: 'background.default',\r\n        borderRadius: (theme) => theme.cardRadius / 4,\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          py: 2,\r\n          px: 6,\r\n          minHeight: 56,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar\r\n            sx={{\r\n              cursor: 'pointer',\r\n              backgroundColor: 'grey.100',\r\n              border: `1px dashed ${grey[400]}`,\r\n            }}\r\n            onClick={onClick}\r\n          >\r\n            <AddIcon\r\n              sx={{\r\n                color: 'grey.500',\r\n                fontWeight: Fonts.LIGHT,\r\n              }}\r\n            />\r\n          </Avatar>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                ml: 3.5,\r\n                fontWeight: Fonts.MEDIUM,\r\n                fontSize: 15,\r\n                color: (theme) => theme.palette.text.secondary,\r\n              }}\r\n            >\r\n              <IntlMessages id='scrumboard.addAList' />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NewListButton;\r\n\r\nNewListButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n};\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {\r\n  onAddNewList,\r\n  onDeleteSelectedList,\r\n  onEditBoardList,\r\n  onUpdateCardCategory,\r\n} from '../../../../redux/actions';\r\nimport AddCard from './List/AddCard';\r\nimport AppsContent from '@crema/core/AppsContainer/AppsContent';\r\nimport {useDispatch} from 'react-redux';\r\nimport Board from 'react-trello';\r\nimport CardDetail from './List/CardDetail';\r\nimport ListHeader from './List/ListHeader';\r\nimport AddCardButton from './List/AddCardButton';\r\nimport AddNewList from './AddNewList';\r\nimport NewListButton from './NewListButton';\r\nimport PropTypes from 'prop-types';\r\nimport {Box, useTheme} from '@mui/material';\r\n\r\nconst BoardWrapper = ({children}) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        height: 1,\r\n        '& .smooth-dnd-container.horizontal': {\r\n          height: 1,\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\nBoardWrapper.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\nconst BoardDetailView = (props) => {\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n  const [list, setList] = useState(null);\r\n\r\n  const [isAddCardOpen, setAddCardOpen] = useState(false);\r\n\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const {boardDetail} = props;\r\n\r\n  const getBoardData = useCallback(() => {\r\n    return {\r\n      ...boardDetail,\r\n      lanes: boardDetail.list,\r\n    };\r\n  }, [boardDetail]);\r\n\r\n  const [boardData, setBoardData] = useState(getBoardData());\r\n\r\n  useEffect(() => {\r\n    setBoardData(getBoardData());\r\n  }, [boardDetail, getBoardData]);\r\n\r\n  const shouldReceiveNewData = (nextData) => {\r\n    setBoardData(nextData);\r\n  };\r\n\r\n  const onCloseAddCard = () => {\r\n    setAddCardOpen(false);\r\n  };\r\n\r\n  const onClickAddCard = (listId) => {\r\n    setList(boardData.lanes.find((item) => item.id === listId));\r\n    setSelectedCard(null);\r\n    setAddCardOpen(true);\r\n  };\r\n\r\n  const onAddList = (name) => {\r\n    dispatch(onAddNewList(boardDetail.id, {name}));\r\n  };\r\n\r\n  const getCardById = (lane, cardId) =>\r\n    lane.cards.find((item) => item.id === cardId);\r\n\r\n  const onEditCardDetail = (cardId) => {\r\n    console.log('onEditCardDetail');\r\n    const selectedList = boardData.lanes.find((item) => {\r\n      const correctCard = item.cards.find((card) => card.id === cardId);\r\n      if (correctCard) return item;\r\n      return undefined;\r\n    });\r\n    const selectedCard = getCardById(selectedList, cardId);\r\n    setSelectedCard(selectedCard);\r\n    setList(selectedList);\r\n    setAddCardOpen(true);\r\n  };\r\n\r\n  const handleDragCard = (\r\n    cardId,\r\n    sourceLaneId,\r\n    targetLaneId,\r\n    position,\r\n    cardDetails,\r\n  ) => {\r\n    if (sourceLaneId !== targetLaneId) {\r\n      const boardId = boardDetail.id;\r\n      dispatch(\r\n        onUpdateCardCategory(\r\n          cardDetails.id,\r\n          sourceLaneId,\r\n          targetLaneId,\r\n          position,\r\n          boardId,\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppsContent\r\n      sx={{\r\n        flex: 1,\r\n        '& .simplebar-wrapper': {\r\n          my: '0 !important',\r\n          height: '100%',\r\n        },\r\n        '& .simplebar-content': {\r\n          height: '100%',\r\n          maxHeight: '100%',\r\n          py: '0 !important',\r\n        },\r\n      }}\r\n    >\r\n      <Board\r\n        laneStyle={{\r\n          borderRadius: 16,\r\n          maxHeight: '98%',\r\n          backgroundColor: theme.palette.background.default,\r\n          width: 350,\r\n        }}\r\n        editable\r\n        canAddLanes\r\n        data={boardData}\r\n        onDataChange={shouldReceiveNewData}\r\n        handleDragEnd={handleDragCard}\r\n        onCardAdd={(card, laneId) => {\r\n          onClickAddCard(laneId);\r\n        }}\r\n        onCardClick={(cardId, metadata, laneId) => {\r\n          onEditCardDetail(cardId, laneId);\r\n        }}\r\n        onLaneAdd={(name) => onAddList(name)}\r\n        onLaneUpdate={(laneId, data) => {\r\n          const lane = boardData.lanes.find((item) => item.id === laneId);\r\n          dispatch(\r\n            onEditBoardList(boardDetail.id, {...lane, name: data.title}),\r\n          );\r\n        }}\r\n        onLaneDelete={(laneId) =>\r\n          dispatch(onDeleteSelectedList(boardDetail.id, laneId))\r\n        }\r\n        t={(listId) => onClickAddCard(listId)}\r\n        components={{\r\n          BoardWrapper: BoardWrapper,\r\n          Card: CardDetail,\r\n          LaneHeader: ListHeader,\r\n          AddCardLink: AddCardButton,\r\n          NewCardForm: AddCard,\r\n          NewLaneForm: AddNewList,\r\n          NewLaneSection: NewListButton,\r\n        }}\r\n      />\r\n      <AddCard\r\n        isAddCardOpen={isAddCardOpen}\r\n        onCloseAddCard={onCloseAddCard}\r\n        list={list}\r\n        board={boardDetail}\r\n        selectedCard={selectedCard}\r\n        setSelectedCard={setSelectedCard}\r\n      />\r\n    </AppsContent>\r\n  );\r\n};\r\n\r\nexport default BoardDetailView;\r\n\r\nBoardDetailView.propTypes = {\r\n  boardDetail: PropTypes.object,\r\n};\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Box from '@mui/material/Box';\r\nimport AppsContainer from '@crema/core/AppsContainer';\r\nimport BoardDetailView from './BoardDetailView';\r\nimport {useNavigate, useLocation} from 'react-router-dom';\r\nimport {\r\n  onGetBoardDetail,\r\n  onNullifyBoardDetail,\r\n} from '../../../../redux/actions';\r\n\r\nconst BoardDetail = () => {\r\n  const navigate = useNavigate();\r\n  const boardDetail = useSelector(\r\n    ({scrumboardApp}) => scrumboardApp.boardDetail,\r\n  );\r\n  const dispatch = useDispatch();\r\n  const {pathname} = useLocation();\r\n\r\n  useEffect(() => {\r\n    const path = pathname.split('/');\r\n    const id = path[path.length - 1];\r\n    dispatch(onGetBoardDetail(id));\r\n    return () => {\r\n      dispatch(onNullifyBoardDetail());\r\n    };\r\n  }, [dispatch, pathname]);\r\n\r\n  const onGoToBoardList = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  if (!boardDetail) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <AppsContainer\r\n      fullView\r\n      title={\r\n        <>\r\n          <Box\r\n            component='span'\r\n            sx={{\r\n              cursor: 'pointer',\r\n              mr: 2,\r\n              color: 'primary.main',\r\n            }}\r\n            onClick={onGoToBoardList}\r\n          >\r\n            Scrum Board\r\n          </Box>\r\n          &gt; {boardDetail.name}\r\n        </>\r\n      }\r\n    >\r\n      <BoardDetailView boardDetail={boardDetail} />\r\n    </AppsContainer>\r\n  );\r\n};\r\n\r\nexport default BoardDetail;\r\n","import React, {useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport Slide from '@mui/material/Slide';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='down' ref={ref} {...props} />;\r\n});\r\n\r\nconst AddNewBoard = ({\r\n  isAddBoardOpen,\r\n  onCloseAddBoardModal,\r\n  onAddBoard,\r\n  selectedBoard,\r\n}) => {\r\n  const [boardName, setBoardName] = useState(() =>\r\n    selectedBoard ? selectedBoard.name : '',\r\n  );\r\n\r\n  const onClickAddButton = () => {\r\n    if (boardName !== '') {\r\n      onAddBoard(boardName);\r\n      setBoardName('');\r\n      onCloseAddBoardModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={isAddBoardOpen}\r\n      onClose={() => onCloseAddBoardModal(false)}\r\n      aria-labelledby='simple-modal-title'\r\n      TransitionComponent={Transition}\r\n      aria-describedby='simple-modal-description'\r\n      sx={{\r\n        '& .MuiDialog-paperWidthSm': {\r\n          maxWidth: 600,\r\n          width: '100%',\r\n        },\r\n        '& .MuiTypography-h6': {\r\n          fontWeight: Fonts.LIGHT,\r\n        },\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          padding: '32px 40px',\r\n        }}\r\n      >\r\n        <TextField\r\n          fullWidth\r\n          margin='normal'\r\n          label={<IntlMessages id='scrumboard.boardTitle' />}\r\n          value={boardName}\r\n          onChange={(event) => setBoardName(event.target.value)}\r\n        />\r\n        <Box\r\n          sx={{\r\n            mt: 3,\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          <Button\r\n            variant='outlined'\r\n            sx={{\r\n              paddingRight: 8,\r\n              paddingLeft: 8,\r\n            }}\r\n            onClick={onClickAddButton}\r\n          >\r\n            <IntlMessages id='common.add' />\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddNewBoard;\r\n\r\nAddNewBoard.defaultProps = {\r\n  selectedBoard: null,\r\n};\r\n\r\nAddNewBoard.propTypes = {\r\n  isAddBoardOpen: PropTypes.bool.isRequired,\r\n  onCloseAddBoardModal: PropTypes.func.isRequired,\r\n  onAddBoard: PropTypes.func,\r\n  selectedBoard: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport ListAltIcon from '@mui/icons-material/ListAlt';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {IconButton} from '@mui/material';\r\n\r\nconst BoardItem = ({board, onEditButtonClick, onViewBoardDetail}) => {\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3} key={board.id}>\r\n      <Card\r\n        sx={{\r\n          backgroundColor: (theme) => theme.palette.primary.main,\r\n          color: (theme) => theme.palette.primary.contrastText,\r\n          cursor: 'pointer',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          padding: 5,\r\n          textAlign: 'center',\r\n          height: 224,\r\n        }}\r\n        key={board.id}\r\n        onClick={() => onViewBoardDetail(board)}\r\n      >\r\n        <Box\r\n          sx={{\r\n            marginBottom: 4,\r\n          }}\r\n        >\r\n          <IconButton>\r\n            <ListAltIcon\r\n              sx={{\r\n                fontSize: 24,\r\n                color: 'primary.contrastText',\r\n              }}\r\n            />\r\n          </IconButton>\r\n          <IconButton onClick={() => onEditButtonClick(board)}>\r\n            <EditIcon\r\n              sx={{\r\n                fontSize: 24,\r\n                color: 'primary.contrastText',\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Box>\r\n        <Box\r\n          component='p'\r\n          sx={{\r\n            mx: 2,\r\n            fontWeight: Fonts.MEDIUM,\r\n            fontSize: 14,\r\n          }}\r\n        >\r\n          {board.name}\r\n        </Box>\r\n        <Box component='span' onClick={(event) => event.stopPropagation()} />\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BoardItem;\r\n\r\nBoardItem.propTypes = {\r\n  board: PropTypes.object.isRequired,\r\n  onEditButtonClick: PropTypes.func.isRequired,\r\n  onViewBoardDetail: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport Grid from '@mui/material/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {grey} from '@mui/material/colors';\r\n\r\nconst AddBoardButton = ({onAddButtonClick}) => {\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n      <Card\r\n        sx={{\r\n          borderRadius: (theme) => theme.borderRadius,\r\n          cursor: 'pointer',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          padding: 5,\r\n          textAlign: 'center',\r\n          backgroundColor: (theme) => theme.palette.background.paper,\r\n          height: 224,\r\n          border: '2px dashed',\r\n          borderColor: grey[600],\r\n        }}\r\n        onClick={() => onAddButtonClick()}\r\n      >\r\n        <Avatar\r\n          sx={{\r\n            backgroundColor: 'grey.500',\r\n            marginBottom: 5,\r\n          }}\r\n        >\r\n          <AddIcon\r\n            sx={{\r\n              fontSize: 24,\r\n            }}\r\n          />\r\n        </Avatar>\r\n        <Box\r\n          component='p'\r\n          sx={{\r\n            fontWeight: Fonts.MEDIUM,\r\n            fontSize: 14,\r\n          }}\r\n        >\r\n          <IntlMessages id='scrumboard.addNewBoard' />\r\n        </Box>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AddBoardButton;\r\n\r\nAddBoardButton.propTypes = {\r\n  onAddButtonClick: PropTypes.func,\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n  onAddNewBoard,\r\n  onEditBoardDetail,\r\n  onGetBoardList,\r\n} from '../../../../redux/actions';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport AddNewBoard from './AddNewBoard';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport Box from '@mui/material/Box';\r\nimport AppGridContainer from '@crema/core/AppGridContainer';\r\nimport BoardItem from './BoardItem';\r\nimport AddBoardButton from './AddBoardButton';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport {Zoom} from '@mui/material';\r\n\r\nconst BoardList = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const boardList = useSelector(({scrumboardApp}) => scrumboardApp.boardList);\r\n\r\n  const [isAddBoardOpen, setAddBoardOpen] = useState(false);\r\n\r\n  const [selectedBoard, setSelectedBoard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetBoardList());\r\n  }, [dispatch]);\r\n\r\n  const onCloseAddBoardModal = () => {\r\n    setAddBoardOpen(false);\r\n  };\r\n\r\n  const onAddButtonClick = () => {\r\n    setSelectedBoard(null);\r\n    setAddBoardOpen(true);\r\n  };\r\n\r\n  const onEditButtonClick = (board) => {\r\n    setSelectedBoard(board);\r\n    setAddBoardOpen(true);\r\n  };\r\n\r\n  const onAddBoard = (name) => {\r\n    if (selectedBoard) {\r\n      const board = {...selectedBoard, name};\r\n      dispatch(onEditBoardDetail(board));\r\n    } else {\r\n      dispatch(onAddNewBoard({name}));\r\n    }\r\n  };\r\n\r\n  const onViewBoardDetail = (board) => {\r\n    navigate(`/apps/scrum-board/${board.id}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Zoom direction='up' in mountOnEnter unmountOnExit>\r\n        <Box\r\n          sx={{\r\n            pt: 4,\r\n            display: 'flex',\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          <Box\r\n            component='h2'\r\n            sx={{\r\n              my: {xs: 5, sm: 5, xl: 8},\r\n              color: 'text.primary',\r\n              fontWeight: Fonts.BOLD,\r\n              textAlign: 'center',\r\n              fontSize: 16,\r\n            }}\r\n          >\r\n            <IntlMessages id='scrumboard.scrumboardApp' />\r\n          </Box>\r\n          <AppGridContainer\r\n            sx={{\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            {boardList && boardList.length > 0\r\n              ? boardList.map((board) => {\r\n                  return (\r\n                    <BoardItem\r\n                      key={board.id}\r\n                      board={board}\r\n                      onEditButtonClick={onEditButtonClick}\r\n                      onViewBoardDetail={onViewBoardDetail}\r\n                    />\r\n                  );\r\n                })\r\n              : null}\r\n            <AddBoardButton onAddButtonClick={onAddButtonClick} />\r\n          </AppGridContainer>\r\n        </Box>\r\n      </Zoom>\r\n\r\n      {isAddBoardOpen ? (\r\n        <AddNewBoard\r\n          isAddBoardOpen={isAddBoardOpen}\r\n          onCloseAddBoardModal={onCloseAddBoardModal}\r\n          onAddBoard={onAddBoard}\r\n          selectedBoard={selectedBoard}\r\n        />\r\n      ) : null}\r\n      <AppInfoView />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BoardList;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {onGetMemberList, onGetScrumLabelList} from '../../../redux/actions';\r\nimport BoardDetail from './BoardDetail';\r\nimport BoardList from './BoardList';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nconst ScrumBoard = () => {\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetScrumLabelList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetMemberList());\r\n  }, [dispatch]);\r\n\r\n  const onGetMainComponent = () => {\r\n    if (params.id) {\r\n      return <BoardDetail />;\r\n    } else {\r\n      return <BoardList />;\r\n    }\r\n  };\r\n\r\n  return <>{onGetMainComponent()}</>;\r\n};\r\n\r\nexport default ScrumBoard;\r\n"],"sourceRoot":""}