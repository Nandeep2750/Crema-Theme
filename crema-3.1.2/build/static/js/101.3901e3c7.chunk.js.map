{"version":3,"sources":["../node_modules/@mui/icons-material/ArrowDropDown.js","../node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js","../node_modules/@mui/material/ButtonGroup/ButtonGroup.js","pages/muiComponents/inputs/ButtonGroup/BasicButtonGroup.js","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/BasicButtonGroup.js?aa60","pages/muiComponents/inputs/ButtonGroup/VariantButtonGroup.js","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/VariantButtonGroup.js?812c","pages/muiComponents/inputs/ButtonGroup/GroupSizesColors.js","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/GroupSizesColors.js?e791","pages/muiComponents/inputs/ButtonGroup/VerticalGroup.js","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/VerticalGroup.js?f181","pages/muiComponents/inputs/ButtonGroup/SplitButton.js","pages/muiComponents/inputs/ButtonGroup/DisableElevation.js","pages/muiComponents/inputs/ButtonGroup/index.js","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/SplitButton.js?41f7","webpack:///./src/pages/muiComponents/inputs/ButtonGroup/DisableElevation.js?2ffb"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","getButtonGroupUtilityClass","slot","generateUtilityClass","buttonGroupClasses","generateUtilityClasses","_excluded","ButtonGroupRoot","styled","name","overridesResolver","props","styles","ownerState","grouped","capitalize","orientation","variant","color","root","disableElevation","fullWidth","vertical","theme","_extends","display","borderRadius","shape","boxShadow","shadows","width","flexDirection","minWidth","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","marginLeft","marginTop","borderBottomRightRadius","borderRight","palette","mode","borderBottom","borderColor","alpha","main","borderRightColor","borderBottomColor","grey","disabled","action","dark","ButtonGroup","React","inProps","ref","useThemeProps","children","className","component","disableFocusRipple","disableRipple","size","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","context","_jsx","as","role","clsx","ButtonGroupContext","Provider","BasicButtonGroup","Button","VariantButtonGroup","Box","sx","alignItems","m","buttons","GroupSizesColors","GroupOrientation","options","SplitButton","open","setOpen","anchorRef","selectedIndex","setSelectedIndex","handleClose","event","current","contains","target","onClick","console","info","undefined","prevOpen","Popper","anchorEl","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","index","MenuItem","selected","handleMenuItemClick","DisableElevation","AppComponentHeader","title","description","refUrl","AppGridContainer","Grid","item","xs","md","AppComponentCard","source","noScrollbar"],"mappings":"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","file":"static/js/101.3901e3c7.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m7 10 5 5 5-5z\"\n}), 'ArrowDropDown');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiButtonGroup', slot);\n}\nconst buttonGroupClasses = generateUtilityClasses('MuiButtonGroup', ['root', 'contained', 'outlined', 'text', 'disableElevation', 'disabled', 'fullWidth', 'vertical', 'grouped', 'groupedHorizontal', 'groupedVertical', 'groupedText', 'groupedTextHorizontal', 'groupedTextVertical', 'groupedTextPrimary', 'groupedTextSecondary', 'groupedOutlined', 'groupedOutlinedHorizontal', 'groupedOutlinedVertical', 'groupedOutlinedPrimary', 'groupedOutlinedSecondary', 'groupedContained', 'groupedContainedHorizontal', 'groupedContainedVertical', 'groupedContainedPrimary', 'groupedContainedSecondary']);\nexport default buttonGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"disableRipple\", \"fullWidth\", \"orientation\", \"size\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport buttonGroupClasses, { getButtonGroupUtilityClass } from './buttonGroupClasses';\nimport ButtonGroupContext from './ButtonGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [{\n    [`& .${buttonGroupClasses.grouped}`]: styles.grouped\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]\n  }, styles.root, styles[ownerState.variant], ownerState.disableElevation === true && styles.disableElevation, ownerState.fullWidth && styles.fullWidth, ownerState.orientation === 'vertical' && styles.vertical];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disabled,\n    disableElevation,\n    fullWidth,\n    orientation,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth', disableElevation && 'disableElevation'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color)}`, disabled && 'disabled']\n  };\n  return composeClasses(slots, getButtonGroupUtilityClass, classes);\n};\n\nconst ButtonGroupRoot = styled('div', {\n  name: 'MuiButtonGroup',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: theme.shape.borderRadius\n}, ownerState.variant === 'contained' && {\n  boxShadow: theme.shadows[2]\n}, ownerState.disableElevation && {\n  boxShadow: 'none'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, {\n  [`& .${buttonGroupClasses.grouped}`]: _extends({\n    minWidth: 40,\n    '&:not(:first-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    }, ownerState.orientation === 'vertical' && {\n      borderTopRightRadius: 0,\n      borderTopLeftRadius: 0\n    }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n      marginLeft: -1\n    }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n      marginTop: -1\n    }),\n    '&:not(:last-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, ownerState.orientation === 'vertical' && {\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0\n    }, ownerState.variant === 'text' && ownerState.orientation === 'horizontal' && {\n      borderRight: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`\n    }, ownerState.variant === 'text' && ownerState.orientation === 'vertical' && {\n      borderBottom: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`\n    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {\n      borderColor: alpha(theme.palette[ownerState.color].main, 0.5)\n    }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n      borderRightColor: 'transparent'\n    }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n      borderBottomColor: 'transparent'\n    }, ownerState.variant === 'contained' && ownerState.orientation === 'horizontal' && {\n      borderRight: `1px solid ${theme.palette.grey[400]}`,\n      [`&.${buttonGroupClasses.disabled}`]: {\n        borderRight: `1px solid ${theme.palette.action.disabled}`\n      }\n    }, ownerState.variant === 'contained' && ownerState.orientation === 'vertical' && {\n      borderBottom: `1px solid ${theme.palette.grey[400]}`,\n      [`&.${buttonGroupClasses.disabled}`]: {\n        borderBottom: `1px solid ${theme.palette.action.disabled}`\n      }\n    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {\n      borderColor: theme.palette[ownerState.color].dark\n    }, {\n      '&:hover': _extends({}, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n        borderRightColor: 'currentColor'\n      }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n        borderBottomColor: 'currentColor'\n      })\n    }),\n    '&:hover': _extends({}, ownerState.variant === 'contained' && {\n      boxShadow: 'none'\n    })\n  }, ownerState.variant === 'contained' && {\n    boxShadow: 'none'\n  })\n}));\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(function ButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiButtonGroup'\n  });\n\n  const {\n    children,\n    className,\n    color = 'primary',\n    component = 'div',\n    disabled = false,\n    disableElevation = false,\n    disableFocusRipple = false,\n    disableRipple = false,\n    fullWidth = false,\n    orientation = 'horizontal',\n    size = 'medium',\n    variant = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disabled,\n    disableElevation,\n    disableFocusRipple,\n    disableRipple,\n    fullWidth,\n    orientation,\n    size,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const context = React.useMemo(() => ({\n    className: classes.grouped,\n    color,\n    disabled,\n    disableElevation,\n    disableFocusRipple,\n    disableRipple,\n    fullWidth,\n    size,\n    variant\n  }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);\n  return /*#__PURE__*/_jsx(ButtonGroupRoot, _extends({\n    as: component,\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: /*#__PURE__*/_jsx(ButtonGroupContext.Provider, {\n      value: context,\n      children: children\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, no elevation is used.\n   * @default false\n   */\n  disableElevation: PropTypes.bool,\n\n  /**\n   * If `true`, the button keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the button ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default ButtonGroup;","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\n\r\nexport default function BasicButtonGroup() {\r\n  return (\r\n    <ButtonGroup variant='contained' aria-label='outlined primary button group'>\r\n      <Button>One</Button>\r\n      <Button>Two</Button>\r\n      <Button>Three</Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\n\\r\\nexport default function BasicButtonGroup() {\\r\\n  return (\\r\\n    <ButtonGroup variant='contained' aria-label='outlined primary button group'>\\r\\n      <Button>One</Button>\\r\\n      <Button>Two</Button>\\r\\n      <Button>Three</Button>\\r\\n    </ButtonGroup>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function VariantButtonGroup() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n          m: 1,\r\n        },\r\n      }}\r\n    >\r\n      <ButtonGroup variant='outlined' aria-label='outlined button group'>\r\n        <Button>One</Button>\r\n        <Button>Two</Button>\r\n        <Button>Three</Button>\r\n      </ButtonGroup>\r\n      <ButtonGroup variant='text' aria-label='text button group'>\r\n        <Button>One</Button>\r\n        <Button>Two</Button>\r\n        <Button>Three</Button>\r\n      </ButtonGroup>\r\n    </Box>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\nimport Box from '@mui/material/Box';\\r\\n\\r\\nexport default function VariantButtonGroup() {\\r\\n  return (\\r\\n    <Box\\r\\n      sx={{\\r\\n        display: 'flex',\\r\\n        flexDirection: 'column',\\r\\n        alignItems: 'center',\\r\\n        '& > *': {\\r\\n          m: 1,\\r\\n        },\\r\\n      }}\\r\\n    >\\r\\n      <ButtonGroup variant='outlined' aria-label='outlined button group'>\\r\\n        <Button>One</Button>\\r\\n        <Button>Two</Button>\\r\\n        <Button>Three</Button>\\r\\n      </ButtonGroup>\\r\\n      <ButtonGroup variant='text' aria-label='text button group'>\\r\\n        <Button>One</Button>\\r\\n        <Button>Two</Button>\\r\\n        <Button>Three</Button>\\r\\n      </ButtonGroup>\\r\\n    </Box>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\n\r\nconst buttons = [\r\n  <Button key='one'>One</Button>,\r\n  <Button key='two'>Two</Button>,\r\n  <Button key='three'>Three</Button>,\r\n];\r\n\r\nexport default function GroupSizesColors() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n          m: 1,\r\n        },\r\n      }}\r\n    >\r\n      <ButtonGroup size='small' aria-label='small button group'>\r\n        {buttons}\r\n      </ButtonGroup>\r\n      <ButtonGroup color='secondary' aria-label='medium secondary button group'>\r\n        {buttons}\r\n      </ButtonGroup>\r\n      <ButtonGroup size='large' aria-label='large button group'>\r\n        {buttons}\r\n      </ButtonGroup>\r\n    </Box>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\n\\r\\nconst buttons = [\\r\\n  <Button key='one'>One</Button>,\\r\\n  <Button key='two'>Two</Button>,\\r\\n  <Button key='three'>Three</Button>,\\r\\n];\\r\\n\\r\\nexport default function GroupSizesColors() {\\r\\n  return (\\r\\n    <Box\\r\\n      sx={{\\r\\n        display: 'flex',\\r\\n        flexDirection: 'column',\\r\\n        alignItems: 'center',\\r\\n        '& > *': {\\r\\n          m: 1,\\r\\n        },\\r\\n      }}\\r\\n    >\\r\\n      <ButtonGroup size='small' aria-label='small button group'>\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n      <ButtonGroup color='secondary' aria-label='medium secondary button group'>\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n      <ButtonGroup size='large' aria-label='large button group'>\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n    </Box>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst buttons = [\r\n  <Button key='one'>One</Button>,\r\n  <Button key='two'>Two</Button>,\r\n  <Button key='three'>Three</Button>,\r\n];\r\n\r\nexport default function GroupOrientation() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        '& > *': {\r\n          m: 1,\r\n        },\r\n      }}\r\n    >\r\n      <ButtonGroup\r\n        orientation='vertical'\r\n        aria-label='vertical outlined button group'\r\n      >\r\n        {buttons}\r\n      </ButtonGroup>\r\n      <ButtonGroup\r\n        orientation='vertical'\r\n        aria-label='vertical contained button group'\r\n        variant='contained'\r\n      >\r\n        {buttons}\r\n      </ButtonGroup>\r\n      <ButtonGroup\r\n        orientation='vertical'\r\n        aria-label='vertical contained button group'\r\n        variant='text'\r\n      >\r\n        {buttons}\r\n      </ButtonGroup>\r\n    </Box>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\nimport Box from '@mui/material/Box';\\r\\n\\r\\nconst buttons = [\\r\\n  <Button key='one'>One</Button>,\\r\\n  <Button key='two'>Two</Button>,\\r\\n  <Button key='three'>Three</Button>,\\r\\n];\\r\\n\\r\\nexport default function GroupOrientation() {\\r\\n  return (\\r\\n    <Box\\r\\n      sx={{\\r\\n        display: 'flex',\\r\\n        '& > *': {\\r\\n          m: 1,\\r\\n        },\\r\\n      }}\\r\\n    >\\r\\n      <ButtonGroup\\r\\n        orientation='vertical'\\r\\n        aria-label='vertical outlined button group'\\r\\n      >\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n      <ButtonGroup\\r\\n        orientation='vertical'\\r\\n        aria-label='vertical contained button group'\\r\\n        variant='contained'\\r\\n      >\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n      <ButtonGroup\\r\\n        orientation='vertical'\\r\\n        aria-label='vertical contained button group'\\r\\n        variant='text'\\r\\n      >\\r\\n        {buttons}\\r\\n      </ButtonGroup>\\r\\n    </Box>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\n\r\nconst options = [\r\n  'Create a merge commit',\r\n  'Squash and merge',\r\n  'Rebase and merge',\r\n];\r\n\r\nexport default function SplitButton() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup\r\n        variant='contained'\r\n        ref={anchorRef}\r\n        aria-label='split button'\r\n      >\r\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n        <Button\r\n          size='small'\r\n          aria-controls={open ? 'split-button-menu' : undefined}\r\n          aria-expanded={open ? 'true' : undefined}\r\n          aria-label='select merge strategy'\r\n          aria-haspopup='menu'\r\n          onClick={handleToggle}\r\n        >\r\n          <ArrowDropDownIcon />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({TransitionProps, placement}) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === 'bottom' ? 'center top' : 'center bottom',\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id='split-button-menu'>\r\n                  {options.map((option, index) => (\r\n                    <MenuItem\r\n                      key={option}\r\n                      disabled={index === 2}\r\n                      selected={index === selectedIndex}\r\n                      onClick={(event) => handleMenuItemClick(event, index)}\r\n                    >\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport Button from '@mui/material/Button';\r\n\r\nexport default function DisableElevation() {\r\n  return (\r\n    <ButtonGroup disableElevation variant='contained'>\r\n      <Button>One</Button>\r\n      <Button>Two</Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '../../../../@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '../../../../@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '../../../../@crema/core/AppComponentCard';\r\nimport BasicButtonGroup from './BasicButtonGroup';\r\nimport BasicButtonGroupSource from '!raw-loader!./BasicButtonGroup';\r\nimport VariantButtonGroup from './VariantButtonGroup';\r\nimport VariantButtonGroupSource from '!raw-loader!./VariantButtonGroup';\r\nimport GroupSizesColors from './GroupSizesColors';\r\nimport GroupSizesColorsSource from '!raw-loader!./GroupSizesColors';\r\nimport GroupOrientation from './VerticalGroup';\r\nimport GroupOrientationSource from '!raw-loader!./VerticalGroup';\r\nimport SplitButton from './SplitButton';\r\nimport SplitButtonSource from '!raw-loader!./SplitButton';\r\nimport DisableElevation from './DisableElevation';\r\nimport DisableElevationSource from '!raw-loader!./DisableElevation';\r\n\r\nconst ButtonGroup = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='Button Group'\r\n        description='The ButtonGroup component can be used to group related buttons.'\r\n        refUrl='https://mui.com/components/button-group/'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Basic button group'\r\n            component={BasicButtonGroup}\r\n            source={BasicButtonGroupSource}\r\n            noScrollbar\r\n            description='The buttons can be grouped by wrapping them with the ButtonGroup component. They need to be immediate children.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Variant Button Group'\r\n            component={VariantButtonGroup}\r\n            source={VariantButtonGroupSource}\r\n            noScrollbar\r\n            description='All the standard button variants are supported.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Group Sizes Colors'\r\n            component={GroupSizesColors}\r\n            source={GroupSizesColorsSource}\r\n            noScrollbar\r\n            description='The size and color props can be used to control the appearance of the button group.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Vertical group'\r\n            component={GroupOrientation}\r\n            source={GroupOrientationSource}\r\n            noScrollbar\r\n            description='The button group can be displayed vertically using the orientation prop.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Split Button'\r\n            component={SplitButton}\r\n            source={SplitButtonSource}\r\n            noScrollbar\r\n            description='ButtonGroup can also be used to create a split button. The dropdown can change the button action (as in this example) or be used to immediately trigger a related action.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Disable Elevation'\r\n            component={DisableElevation}\r\n            source={DisableElevationSource}\r\n            noScrollbar\r\n            description='You can remove the elevation with the disableElevation prop.'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonGroup;\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\\r\\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\\r\\nimport Grow from '@mui/material/Grow';\\r\\nimport Paper from '@mui/material/Paper';\\r\\nimport Popper from '@mui/material/Popper';\\r\\nimport MenuItem from '@mui/material/MenuItem';\\r\\nimport MenuList from '@mui/material/MenuList';\\r\\n\\r\\nconst options = [\\r\\n  'Create a merge commit',\\r\\n  'Squash and merge',\\r\\n  'Rebase and merge',\\r\\n];\\r\\n\\r\\nexport default function SplitButton() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const anchorRef = React.useRef(null);\\r\\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\\r\\n\\r\\n  const handleClick = () => {\\r\\n    console.info(`You clicked ${options[selectedIndex]}`);\\r\\n  };\\r\\n\\r\\n  const handleMenuItemClick = (event, index) => {\\r\\n    setSelectedIndex(index);\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  const handleToggle = () => {\\r\\n    setOpen((prevOpen) => !prevOpen);\\r\\n  };\\r\\n\\r\\n  const handleClose = (event) => {\\r\\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <ButtonGroup\\r\\n        variant='contained'\\r\\n        ref={anchorRef}\\r\\n        aria-label='split button'\\r\\n      >\\r\\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\\r\\n        <Button\\r\\n          size='small'\\r\\n          aria-controls={open ? 'split-button-menu' : undefined}\\r\\n          aria-expanded={open ? 'true' : undefined}\\r\\n          aria-label='select merge strategy'\\r\\n          aria-haspopup='menu'\\r\\n          onClick={handleToggle}\\r\\n        >\\r\\n          <ArrowDropDownIcon />\\r\\n        </Button>\\r\\n      </ButtonGroup>\\r\\n      <Popper\\r\\n        open={open}\\r\\n        anchorEl={anchorRef.current}\\r\\n        role={undefined}\\r\\n        transition\\r\\n        disablePortal\\r\\n      >\\r\\n        {({TransitionProps, placement}) => (\\r\\n          <Grow\\r\\n            {...TransitionProps}\\r\\n            style={{\\r\\n              transformOrigin:\\r\\n                placement === 'bottom' ? 'center top' : 'center bottom',\\r\\n            }}\\r\\n          >\\r\\n            <Paper>\\r\\n              <ClickAwayListener onClickAway={handleClose}>\\r\\n                <MenuList id='split-button-menu'>\\r\\n                  {options.map((option, index) => (\\r\\n                    <MenuItem\\r\\n                      key={option}\\r\\n                      disabled={index === 2}\\r\\n                      selected={index === selectedIndex}\\r\\n                      onClick={(event) => handleMenuItemClick(event, index)}\\r\\n                    >\\r\\n                      {option}\\r\\n                    </MenuItem>\\r\\n                  ))}\\r\\n                </MenuList>\\r\\n              </ClickAwayListener>\\r\\n            </Paper>\\r\\n          </Grow>\\r\\n        )}\\r\\n      </Popper>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import * as React from 'react';\\r\\nimport ButtonGroup from '@mui/material/ButtonGroup';\\r\\nimport Button from '@mui/material/Button';\\r\\n\\r\\nexport default function DisableElevation() {\\r\\n  return (\\r\\n    <ButtonGroup disableElevation variant='contained'>\\r\\n      <Button>One</Button>\\r\\n      <Button>Two</Button>\\r\\n    </ButtonGroup>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}