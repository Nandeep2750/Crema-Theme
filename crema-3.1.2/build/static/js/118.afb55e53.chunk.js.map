{"version":3,"sources":["../node_modules/css-mediaquery/index.js","pages/muiComponents/utils/MediaQuery/SimpleMediaQuery.js","webpack:///./src/pages/muiComponents/utils/MediaQuery/SimpleMediaQuery.js?9127","pages/muiComponents/utils/MediaQuery/ThemeHelper.js","webpack:///./src/pages/muiComponents/utils/MediaQuery/ThemeHelper.js?c2b5","pages/muiComponents/utils/MediaQuery/JavaScriptMedia.js","webpack:///./src/pages/muiComponents/utils/MediaQuery/JavaScriptMedia.js?f49b","pages/muiComponents/utils/MediaQuery/ServerSide.js","webpack:///./src/pages/muiComponents/utils/MediaQuery/ServerSide.js?f7b3","pages/muiComponents/utils/MediaQuery/UseWidth.js","pages/muiComponents/utils/MediaQuery/index.js","webpack:///./src/pages/muiComponents/utils/MediaQuery/UseWidth.js?ba3a"],"names":["exports","match","mediaQuery","values","parseQuery","some","query","inverse","typeMatch","type","expressionsMatch","expressions","every","expression","feature","modifier","expValue","value","toLowerCase","toPx","toDpi","toDecimal","parseInt","parse","RE_MEDIA_QUERY","RE_MQ_EXPRESSION","RE_MQ_FEATURE","RE_LENGTH_UNIT","RE_RESOLUTION_UNIT","split","map","captures","trim","parsed","ratio","numbers","decimal","Number","resolution","parseFloat","String","length","SimpleMediaQuery","matches","useMediaQuery","MyComponent","theme","useTheme","breakpoints","up","createTheme","ThemeHelper","ThemeProvider","JavaScriptMedia","json2mq","minWidth","ServerSide","components","MuiUseMediaQuery","defaultProps","ssrMatchMedia","width","keys","reverse","reduce","output","key","useWidth","UseWidth","MediaQuery","AppComponentHeader","title","description","refUrl","AppGridContainer","Grid","item","xs","md","AppComponentCard","component","source","noScrollbar"],"mappings":"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","file":"static/js/118.afb55e53.chunk.js","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY     = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION   = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE      = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT     = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n    return parseQuery(mediaQuery).some(function (query) {\n        var inverse = query.inverse;\n\n        // Either the parsed or specified `type` is \"all\", or the types must be\n        // equal for a match.\n        var typeMatch = query.type === 'all' || values.type === query.type;\n\n        // Quit early when `type` doesn't match, but take \"not\" into account.\n        if ((typeMatch && inverse) || !(typeMatch || inverse)) {\n            return false;\n        }\n\n        var expressionsMatch = query.expressions.every(function (expression) {\n            var feature  = expression.feature,\n                modifier = expression.modifier,\n                expValue = expression.value,\n                value    = values[feature];\n\n            // Missing or falsy values don't match.\n            if (!value) { return false; }\n\n            switch (feature) {\n                case 'orientation':\n                case 'scan':\n                    return value.toLowerCase() === expValue.toLowerCase();\n\n                case 'width':\n                case 'height':\n                case 'device-width':\n                case 'device-height':\n                    expValue = toPx(expValue);\n                    value    = toPx(value);\n                    break;\n\n                case 'resolution':\n                    expValue = toDpi(expValue);\n                    value    = toDpi(value);\n                    break;\n\n                case 'aspect-ratio':\n                case 'device-aspect-ratio':\n                case /* Deprecated */ 'device-pixel-ratio':\n                    expValue = toDecimal(expValue);\n                    value    = toDecimal(value);\n                    break;\n\n                case 'grid':\n                case 'color':\n                case 'color-index':\n                case 'monochrome':\n                    expValue = parseInt(expValue, 10) || 1;\n                    value    = parseInt(value, 10) || 0;\n                    break;\n            }\n\n            switch (modifier) {\n                case 'min': return value >= expValue;\n                case 'max': return value <= expValue;\n                default   : return value === expValue;\n            }\n        });\n\n        return (expressionsMatch && !inverse) || (!expressionsMatch && inverse);\n    });\n}\n\nfunction parseQuery(mediaQuery) {\n    return mediaQuery.split(',').map(function (query) {\n        query = query.trim();\n\n        var captures    = query.match(RE_MEDIA_QUERY),\n            modifier    = captures[1],\n            type        = captures[2],\n            expressions = captures[3] || '',\n            parsed      = {};\n\n        parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n        parsed.type    = type ? type.toLowerCase() : 'all';\n\n        // Split expressions into a list.\n        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n\n        parsed.expressions = expressions.map(function (expression) {\n            var captures = expression.match(RE_MQ_EXPRESSION),\n                feature  = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n\n            return {\n                modifier: feature[1],\n                feature : feature[2],\n                value   : captures[2]\n            };\n        });\n\n        return parsed;\n    });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n    var decimal = Number(ratio),\n        numbers;\n\n    if (!decimal) {\n        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n        decimal = numbers[1] / numbers[2];\n    }\n\n    return decimal;\n}\n\nfunction toDpi(resolution) {\n    var value = parseFloat(resolution),\n        units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n    switch (units) {\n        case 'dpcm': return value / 2.54;\n        case 'dppx': return value * 96;\n        default    : return value;\n    }\n}\n\nfunction toPx(length) {\n    var value = parseFloat(length),\n        units = String(length).match(RE_LENGTH_UNIT)[1];\n\n    switch (units) {\n        case 'em' : return value * 16;\n        case 'rem': return value * 16;\n        case 'cm' : return value * 96 / 2.54;\n        case 'mm' : return value * 96 / 2.54 / 10;\n        case 'in' : return value * 96;\n        case 'pt' : return value * 72;\n        case 'pc' : return value * 72 / 12;\n        default   : return value;\n    }\n}\n","import * as React from 'react';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nexport default function SimpleMediaQuery() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\n\\r\\nexport default function SimpleMediaQuery() {\\r\\n  const matches = useMediaQuery('(min-width:600px)');\\r\\n\\r\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport {createTheme, ThemeProvider, useTheme} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function ThemeHelper() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport {createTheme, ThemeProvider, useTheme} from '@mui/material/styles';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const theme = useTheme();\\r\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\r\\n\\r\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\r\\n}\\r\\n\\r\\nconst theme = createTheme();\\r\\n\\r\\nexport default function ThemeHelper() {\\r\\n  return (\\r\\n    <ThemeProvider theme={theme}>\\r\\n      <MyComponent />\\r\\n    </ThemeProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport json2mq from 'json2mq';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nexport default function JavaScriptMedia() {\r\n  const matches = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600,\r\n    }),\r\n  );\r\n\r\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport json2mq from 'json2mq';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\n\\r\\nexport default function JavaScriptMedia() {\\r\\n  const matches = useMediaQuery(\\r\\n    json2mq({\\r\\n      minWidth: 600,\\r\\n    }),\\r\\n  );\\r\\n\\r\\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport mediaQuery from 'css-mediaquery';\r\n\r\nimport {ThemeProvider} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n\r\nexport default function ServerSide() {\r\n  const ssrMatchMedia = (query) => ({\r\n    matches: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      width: 800,\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider\r\n      theme={{\r\n        components: {\r\n          MuiUseMediaQuery: {\r\n            // Change the default options of useMediaQuery\r\n            defaultProps: {ssrMatchMedia},\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport mediaQuery from 'css-mediaquery';\\r\\n\\r\\nimport {ThemeProvider} from '@mui/material/styles';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const matches = useMediaQuery('(min-width:600px)');\\r\\n\\r\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\r\\n}\\r\\n\\r\\nexport default function ServerSide() {\\r\\n  const ssrMatchMedia = (query) => ({\\r\\n    matches: mediaQuery.match(query, {\\r\\n      // The estimated CSS width of the browser.\\r\\n      width: 800,\\r\\n    }),\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <ThemeProvider\\r\\n      theme={{\\r\\n        components: {\\r\\n          MuiUseMediaQuery: {\\r\\n            // Change the default options of useMediaQuery\\r\\n            defaultProps: {ssrMatchMedia},\\r\\n          },\\r\\n        },\\r\\n      }}\\r\\n    >\\r\\n      <MyComponent />\\r\\n    </ThemeProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport {ThemeProvider, useTheme, createTheme} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n/**\r\n * Be careful using this hook. It only works because the number of\r\n * breakpoints in theme is static. It will break once you change the number of\r\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\r\n */\r\nfunction useWidth() {\r\n  const theme = useTheme();\r\n  const keys = [...theme.breakpoints.keys].reverse();\r\n  return (\r\n    keys.reduce((output, key) => {\r\n      const matches = useMediaQuery(theme.breakpoints.up(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || 'xs'\r\n  );\r\n}\r\n\r\nfunction MyComponent() {\r\n  const width = useWidth();\r\n  return <span>{`width: ${width}`}</span>;\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function UseWidth() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '../../../../@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '../../../../@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '../../../../@crema/core/AppComponentCard';\r\n\r\nimport SimpleMediaQuery from './SimpleMediaQuery';\r\nimport SimpleMediaQuerySource from '!raw-loader!./SimpleMediaQuery';\r\n\r\nimport ThemeHelper from './ThemeHelper';\r\nimport ThemeHelperSource from '!raw-loader!./ThemeHelper';\r\n\r\nimport JavaScriptMedia from './JavaScriptMedia';\r\nimport JavaScriptMediaSource from '!raw-loader!./JavaScriptMedia';\r\n\r\nimport ServerSide from './ServerSide';\r\nimport ServerSideSource from '!raw-loader!./ServerSide';\r\n\r\nimport UseWidth from './UseWidth';\r\nimport UseWidthSource from '!raw-loader!./UseWidth';\r\n\r\nconst MediaQuery = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='MediaQuery'\r\n        description='This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.'\r\n        refUrl='https://mui.com/components/use-media-query/'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Simple Media Query'\r\n            component={SimpleMediaQuery}\r\n            source={SimpleMediaQuerySource}\r\n            description='You should provide a media query to the first argument of the hook. The media query string can be any valid CSS media query, e.g.'\r\n            noScrollbar\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='ThemeHelper'\r\n            component={ThemeHelper}\r\n            source={ThemeHelperSource}\r\n            noScrollbar\r\n            description='You can use MUIs breakpoint helpers as follows:'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Java Script Media'\r\n            component={JavaScriptMedia}\r\n            source={JavaScriptMediaSource}\r\n            noScrollbar\r\n            description='You can use json2mq to generate media query string from a JavaScript object.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Server Side'\r\n            component={ServerSide}\r\n            source={ServerSideSource}\r\n            noScrollbar\r\n            description='Finally, you need to provide an implementation of matchMedia to the useMediaQuery with the previously guessed characteristics. Using css-mediaquery to emulate matchMedia is recommended.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='UseWidth'\r\n            component={UseWidth}\r\n            source={UseWidthSource}\r\n            noScrollbar\r\n            description='The withWidth() higher-order component injects the screen width of the page. You can reproduce the same behavior with a useWidth hook:'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MediaQuery;\r\n","export default \"import * as React from 'react';\\r\\nimport {ThemeProvider, useTheme, createTheme} from '@mui/material/styles';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\n\\r\\n/**\\r\\n * Be careful using this hook. It only works because the number of\\r\\n * breakpoints in theme is static. It will break once you change the number of\\r\\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\\r\\n */\\r\\nfunction useWidth() {\\r\\n  const theme = useTheme();\\r\\n  const keys = [...theme.breakpoints.keys].reverse();\\r\\n  return (\\r\\n    keys.reduce((output, key) => {\\r\\n      const matches = useMediaQuery(theme.breakpoints.up(key));\\r\\n      return !output && matches ? key : output;\\r\\n    }, null) || 'xs'\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const width = useWidth();\\r\\n  return <span>{`width: ${width}`}</span>;\\r\\n}\\r\\n\\r\\nconst theme = createTheme();\\r\\n\\r\\nexport default function UseWidth() {\\r\\n  return (\\r\\n    <ThemeProvider theme={theme}>\\r\\n      <MyComponent />\\r\\n    </ThemeProvider>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}