{"version":3,"sources":["pages/muiComponents/feedback/Dialog/SimpleDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/SimpleDialog.js?0f2c","pages/muiComponents/feedback/Dialog/AlertDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/AlertDialog.js?44e6","pages/muiComponents/feedback/Dialog/AlertDialogSlide.js","webpack:///./src/pages/muiComponents/feedback/Dialog/AlertDialogSlide.js?4cab","pages/muiComponents/feedback/Dialog/FormDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/FormDialog.js?860c","pages/muiComponents/feedback/Dialog/CustomizedDialogs.js","webpack:///./src/pages/muiComponents/feedback/Dialog/CustomizedDialogs.js?bcfb","pages/muiComponents/feedback/Dialog/FullScreenDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/FullScreenDialog.js?1a3c","pages/muiComponents/feedback/Dialog/MaxWidthDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/MaxWidthDialog.js?2114","pages/muiComponents/feedback/Dialog/ResponsiveDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/ResponsiveDialog.js?3eeb","pages/muiComponents/feedback/Dialog/ConfirmationDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/ConfirmationDialog.js?c3f9","pages/muiComponents/feedback/Dialog/DraggableDialog.js","webpack:///./src/pages/muiComponents/feedback/Dialog/DraggableDialog.js?fcd1","pages/muiComponents/feedback/Dialog/ScrollDialog.js","pages/muiComponents/feedback/Dialog/index.js","webpack:///./src/pages/muiComponents/feedback/Dialog/ScrollDialog.js?6e94"],"names":["emails","SimpleDialog","props","onClose","selectedValue","open","handleListItemClick","value","DialogTitle","List","sx","pt","map","email","ListItem","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","ListItemText","primary","autoFocus","SimpleDialogDemo","React","setOpen","setSelectedValue","Typography","variant","component","Button","AlertDialog","handleClose","id","DialogContent","DialogContentText","DialogActions","Transition","ref","Slide","direction","AlertDialogSlide","TransitionComponent","keepMounted","FormDialog","TextField","margin","label","type","fullWidth","BootstrapDialog","styled","Dialog","theme","padding","spacing","BootstrapDialogTitle","children","other","m","p","IconButton","position","right","top","palette","grey","CustomizedDialogs","dividers","gutterBottom","FullScreenDialog","fullScreen","AppBar","Toolbar","edge","ml","flex","secondary","Divider","MaxWidthDialog","setFullWidth","maxWidth","setMaxWidth","Box","noValidate","display","flexDirection","width","FormControl","mt","minWidth","InputLabel","htmlFor","Select","onChange","event","target","inputProps","name","MenuItem","FormControlLabel","control","Switch","checked","ResponsiveDialog","useTheme","useMediaQuery","breakpoints","down","options","ConfirmationDialogRaw","valueProp","setValue","radioGroupRef","maxHeight","TransitionProps","onEntering","current","focus","RadioGroup","option","Radio","ConfirmationDialog","role","divider","disabled","newValue","PaperComponent","handle","cancel","Paper","DraggableDialog","style","cursor","ScrollDialog","scroll","setScroll","handleClickOpen","scrollType","descriptionElementRef","descriptionElement","tabIndex","Array","join","AppComponentHeader","title","description","refUrl","AppGridContainer","Grid","item","xs","md","AppComponentCard","source","noScrollbar"],"mappings":"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","file":"static/js/140.2f44581c.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@mui/material/Button';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Typography from '@mui/material/Typography';\r\nimport {blue} from '@mui/material/colors';\r\n\r\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\r\n\r\nfunction SimpleDialog(props) {\r\n  const {onClose, selectedValue, open} = props;\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  const handleListItemClick = (value) => {\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open}>\r\n      <DialogTitle>Set backup account</DialogTitle>\r\n      <List sx={{pt: 0}}>\r\n        {emails.map((email) => (\r\n          <ListItem\r\n            button\r\n            onClick={() => handleListItemClick(email)}\r\n            key={email}\r\n          >\r\n            <ListItemAvatar>\r\n              <Avatar sx={{bgcolor: blue[100], color: blue[600]}}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={email} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem\r\n          autoFocus\r\n          button\r\n          onClick={() => handleListItemClick('addAccount')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Add account' />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function SimpleDialogDemo() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant='subtitle1' component='div'>\r\n        Selected: {selectedValue}\r\n      </Typography>\r\n      <br />\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open simple dialog\r\n      </Button>\r\n      <SimpleDialog\r\n        selectedValue={selectedValue}\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Avatar from '@mui/material/Avatar';\\r\\nimport List from '@mui/material/List';\\r\\nimport ListItem from '@mui/material/ListItem';\\r\\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\\r\\nimport ListItemText from '@mui/material/ListItemText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport PersonIcon from '@mui/icons-material/Person';\\r\\nimport AddIcon from '@mui/icons-material/Add';\\r\\nimport Typography from '@mui/material/Typography';\\r\\nimport {blue} from '@mui/material/colors';\\r\\n\\r\\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\\r\\n\\r\\nfunction SimpleDialog(props) {\\r\\n  const {onClose, selectedValue, open} = props;\\r\\n\\r\\n  const handleClose = () => {\\r\\n    onClose(selectedValue);\\r\\n  };\\r\\n\\r\\n  const handleListItemClick = (value) => {\\r\\n    onClose(value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Dialog onClose={handleClose} open={open}>\\r\\n      <DialogTitle>Set backup account</DialogTitle>\\r\\n      <List sx={{pt: 0}}>\\r\\n        {emails.map((email) => (\\r\\n          <ListItem\\r\\n            button\\r\\n            onClick={() => handleListItemClick(email)}\\r\\n            key={email}\\r\\n          >\\r\\n            <ListItemAvatar>\\r\\n              <Avatar sx={{bgcolor: blue[100], color: blue[600]}}>\\r\\n                <PersonIcon />\\r\\n              </Avatar>\\r\\n            </ListItemAvatar>\\r\\n            <ListItemText primary={email} />\\r\\n          </ListItem>\\r\\n        ))}\\r\\n\\r\\n        <ListItem\\r\\n          autoFocus\\r\\n          button\\r\\n          onClick={() => handleListItemClick('addAccount')}\\r\\n        >\\r\\n          <ListItemAvatar>\\r\\n            <Avatar>\\r\\n              <AddIcon />\\r\\n            </Avatar>\\r\\n          </ListItemAvatar>\\r\\n          <ListItemText primary='Add account' />\\r\\n        </ListItem>\\r\\n      </List>\\r\\n    </Dialog>\\r\\n  );\\r\\n}\\r\\n\\r\\nSimpleDialog.propTypes = {\\r\\n  onClose: PropTypes.func.isRequired,\\r\\n  open: PropTypes.bool.isRequired,\\r\\n  selectedValue: PropTypes.string.isRequired,\\r\\n};\\r\\n\\r\\nexport default function SimpleDialogDemo() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = (value) => {\\r\\n    setOpen(false);\\r\\n    setSelectedValue(value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Typography variant='subtitle1' component='div'>\\r\\n        Selected: {selectedValue}\\r\\n      </Typography>\\r\\n      <br />\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open simple dialog\\r\\n      </Button>\\r\\n      <SimpleDialog\\r\\n        selectedValue={selectedValue}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function AlertDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-title'\r\n        aria-describedby='alert-dialog-description'\r\n      >\r\n        <DialogTitle id='alert-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Disagree</Button>\r\n          <Button onClick={handleClose} autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\n\\r\\nexport default function AlertDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open alert dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='alert-dialog-title'\\r\\n        aria-describedby='alert-dialog-description'\\r\\n      >\\r\\n        <DialogTitle id='alert-dialog-title'>\\r\\n          {\\\"Use Google's location service?\\\"}\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText id='alert-dialog-description'>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose}>Disagree</Button>\\r\\n          <Button onClick={handleClose} autoFocus>\\r\\n            Agree\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AlertDialogSlide() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Slide in alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-describedby='alert-dialog-slide-description'\r\n      >\r\n        <DialogTitle>{\"Use Google's location service?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-slide-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Disagree</Button>\r\n          <Button onClick={handleClose}>Agree</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport Slide from '@mui/material/Slide';\\r\\n\\r\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\r\\n  return <Slide direction='up' ref={ref} {...props} />;\\r\\n});\\r\\n\\r\\nexport default function AlertDialogSlide() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Slide in alert dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        TransitionComponent={Transition}\\r\\n        keepMounted\\r\\n        onClose={handleClose}\\r\\n        aria-describedby='alert-dialog-slide-description'\\r\\n      >\\r\\n        <DialogTitle>{\\\"Use Google's location service?\\\"}</DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText id='alert-dialog-slide-description'>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose}>Disagree</Button>\\r\\n          <Button onClick={handleClose}>Agree</Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function FormDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open form dialog\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='Email Address'\r\n            type='email'\r\n            fullWidth\r\n            variant='standard'\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={handleClose}>Subscribe</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\n\\r\\nexport default function FormDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open form dialog\\r\\n      </Button>\\r\\n      <Dialog open={open} onClose={handleClose}>\\r\\n        <DialogTitle>Subscribe</DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            To subscribe to this website, please enter your email address here.\\r\\n            We will send updates occasionally.\\r\\n          </DialogContentText>\\r\\n          <TextField\\r\\n            autoFocus\\r\\n            margin='dense'\\r\\n            id='name'\\r\\n            label='Email Address'\\r\\n            type='email'\\r\\n            fullWidth\\r\\n            variant='standard'\\r\\n          />\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose}>Cancel</Button>\\r\\n          <Button onClick={handleClose}>Subscribe</Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@mui/material/Button';\r\nimport {styled} from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({theme}) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const {children, onClose, ...other} = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{m: 0, p: 2}} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label='close'\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open dialog\r\n      </Button>\r\n      <BootstrapDialog\r\n        onClose={handleClose}\r\n        aria-labelledby='customized-dialog-title'\r\n        open={open}\r\n      >\r\n        <BootstrapDialogTitle\r\n          id='customized-dialog-title'\r\n          onClose={handleClose}\r\n        >\r\n          Modal title\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>\r\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\r\n            ac consectetur ac, vestibulum at eros.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\r\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\r\n            auctor.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\r\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\r\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose}>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport {styled} from '@mui/material/styles';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport IconButton from '@mui/material/IconButton';\\r\\nimport CloseIcon from '@mui/icons-material/Close';\\r\\nimport Typography from '@mui/material/Typography';\\r\\n\\r\\nconst BootstrapDialog = styled(Dialog)(({theme}) => ({\\r\\n  '& .MuiDialogContent-root': {\\r\\n    padding: theme.spacing(2),\\r\\n  },\\r\\n  '& .MuiDialogActions-root': {\\r\\n    padding: theme.spacing(1),\\r\\n  },\\r\\n}));\\r\\n\\r\\nconst BootstrapDialogTitle = (props) => {\\r\\n  const {children, onClose, ...other} = props;\\r\\n\\r\\n  return (\\r\\n    <DialogTitle sx={{m: 0, p: 2}} {...other}>\\r\\n      {children}\\r\\n      {onClose ? (\\r\\n        <IconButton\\r\\n          aria-label='close'\\r\\n          onClick={onClose}\\r\\n          sx={{\\r\\n            position: 'absolute',\\r\\n            right: 8,\\r\\n            top: 8,\\r\\n            color: (theme) => theme.palette.grey[500],\\r\\n          }}\\r\\n        >\\r\\n          <CloseIcon />\\r\\n        </IconButton>\\r\\n      ) : null}\\r\\n    </DialogTitle>\\r\\n  );\\r\\n};\\r\\n\\r\\nBootstrapDialogTitle.propTypes = {\\r\\n  children: PropTypes.node,\\r\\n  onClose: PropTypes.func.isRequired,\\r\\n};\\r\\n\\r\\nexport default function CustomizedDialogs() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open dialog\\r\\n      </Button>\\r\\n      <BootstrapDialog\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='customized-dialog-title'\\r\\n        open={open}\\r\\n      >\\r\\n        <BootstrapDialogTitle\\r\\n          id='customized-dialog-title'\\r\\n          onClose={handleClose}\\r\\n        >\\r\\n          Modal title\\r\\n        </BootstrapDialogTitle>\\r\\n        <DialogContent dividers>\\r\\n          <Typography gutterBottom>\\r\\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\\r\\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\\r\\n            ac consectetur ac, vestibulum at eros.\\r\\n          </Typography>\\r\\n          <Typography gutterBottom>\\r\\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\\r\\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\\r\\n            auctor.\\r\\n          </Typography>\\r\\n          <Typography gutterBottom>\\r\\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\\r\\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\\r\\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\\r\\n          </Typography>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button autoFocus onClick={handleClose}>\\r\\n            Save changes\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </BootstrapDialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport List from '@mui/material/List';\r\nimport Divider from '@mui/material/Divider';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Slide from '@mui/material/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open full-screen dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar sx={{position: 'relative'}}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge='start'\r\n              color='inherit'\r\n              onClick={handleClose}\r\n              aria-label='close'\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography sx={{ml: 2, flex: 1}} variant='h6' component='div'>\r\n              Sound\r\n            </Typography>\r\n            <Button autoFocus color='inherit' onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem button>\r\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem button>\r\n            <ListItemText\r\n              primary='Default notification ringtone'\r\n              secondary='Tethys'\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport ListItemText from '@mui/material/ListItemText';\\r\\nimport ListItem from '@mui/material/ListItem';\\r\\nimport List from '@mui/material/List';\\r\\nimport Divider from '@mui/material/Divider';\\r\\nimport AppBar from '@mui/material/AppBar';\\r\\nimport Toolbar from '@mui/material/Toolbar';\\r\\nimport IconButton from '@mui/material/IconButton';\\r\\nimport Typography from '@mui/material/Typography';\\r\\nimport CloseIcon from '@mui/icons-material/Close';\\r\\nimport Slide from '@mui/material/Slide';\\r\\n\\r\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\r\\n  return <Slide direction='up' ref={ref} {...props} />;\\r\\n});\\r\\n\\r\\nexport default function FullScreenDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open full-screen dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullScreen\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        TransitionComponent={Transition}\\r\\n      >\\r\\n        <AppBar sx={{position: 'relative'}}>\\r\\n          <Toolbar>\\r\\n            <IconButton\\r\\n              edge='start'\\r\\n              color='inherit'\\r\\n              onClick={handleClose}\\r\\n              aria-label='close'\\r\\n            >\\r\\n              <CloseIcon />\\r\\n            </IconButton>\\r\\n            <Typography sx={{ml: 2, flex: 1}} variant='h6' component='div'>\\r\\n              Sound\\r\\n            </Typography>\\r\\n            <Button autoFocus color='inherit' onClick={handleClose}>\\r\\n              save\\r\\n            </Button>\\r\\n          </Toolbar>\\r\\n        </AppBar>\\r\\n        <List>\\r\\n          <ListItem button>\\r\\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\\r\\n          </ListItem>\\r\\n          <Divider />\\r\\n          <ListItem button>\\r\\n            <ListItemText\\r\\n              primary='Default notification ringtone'\\r\\n              secondary='Tethys'\\r\\n            />\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport Switch from '@mui/material/Switch';\r\n\r\nexport default function MaxWidthDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [fullWidth, setFullWidth] = React.useState(true);\r\n  const [maxWidth, setMaxWidth] = React.useState('sm');\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleMaxWidthChange = (event) => {\r\n    setMaxWidth(\r\n      // @ts-expect-error autofill of arbitrary value is not handled.\r\n      event.target.value,\r\n    );\r\n  };\r\n\r\n  const handleFullWidthChange = (event) => {\r\n    setFullWidth(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open max-width dialog\r\n      </Button>\r\n      <Dialog\r\n        fullWidth={fullWidth}\r\n        maxWidth={maxWidth}\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>Optional sizes</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You can set my maximum width and whether to adapt or not.\r\n          </DialogContentText>\r\n          <Box\r\n            noValidate\r\n            component='form'\r\n            sx={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              m: 'auto',\r\n              width: 'fit-content',\r\n            }}\r\n          >\r\n            <FormControl sx={{mt: 2, minWidth: 120}}>\r\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\r\n              <Select\r\n                autoFocus\r\n                value={maxWidth}\r\n                onChange={handleMaxWidthChange}\r\n                label='maxWidth'\r\n                inputProps={{\r\n                  name: 'max-width',\r\n                  id: 'max-width',\r\n                }}\r\n              >\r\n                <MenuItem value={false}>false</MenuItem>\r\n                <MenuItem value='xs'>xs</MenuItem>\r\n                <MenuItem value='sm'>sm</MenuItem>\r\n                <MenuItem value='md'>md</MenuItem>\r\n                <MenuItem value='lg'>lg</MenuItem>\r\n                <MenuItem value='xl'>xl</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControlLabel\r\n              sx={{mt: 1}}\r\n              control={\r\n                <Switch checked={fullWidth} onChange={handleFullWidthChange} />\r\n              }\r\n              label='Full width'\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport FormControl from '@mui/material/FormControl';\\r\\nimport FormControlLabel from '@mui/material/FormControlLabel';\\r\\nimport InputLabel from '@mui/material/InputLabel';\\r\\nimport MenuItem from '@mui/material/MenuItem';\\r\\nimport Select from '@mui/material/Select';\\r\\nimport Switch from '@mui/material/Switch';\\r\\n\\r\\nexport default function MaxWidthDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [fullWidth, setFullWidth] = React.useState(true);\\r\\n  const [maxWidth, setMaxWidth] = React.useState('sm');\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  const handleMaxWidthChange = (event) => {\\r\\n    setMaxWidth(\\r\\n      // @ts-expect-error autofill of arbitrary value is not handled.\\r\\n      event.target.value,\\r\\n    );\\r\\n  };\\r\\n\\r\\n  const handleFullWidthChange = (event) => {\\r\\n    setFullWidth(event.target.checked);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open max-width dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullWidth={fullWidth}\\r\\n        maxWidth={maxWidth}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n      >\\r\\n        <DialogTitle>Optional sizes</DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            You can set my maximum width and whether to adapt or not.\\r\\n          </DialogContentText>\\r\\n          <Box\\r\\n            noValidate\\r\\n            component='form'\\r\\n            sx={{\\r\\n              display: 'flex',\\r\\n              flexDirection: 'column',\\r\\n              m: 'auto',\\r\\n              width: 'fit-content',\\r\\n            }}\\r\\n          >\\r\\n            <FormControl sx={{mt: 2, minWidth: 120}}>\\r\\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\\r\\n              <Select\\r\\n                autoFocus\\r\\n                value={maxWidth}\\r\\n                onChange={handleMaxWidthChange}\\r\\n                label='maxWidth'\\r\\n                inputProps={{\\r\\n                  name: 'max-width',\\r\\n                  id: 'max-width',\\r\\n                }}\\r\\n              >\\r\\n                <MenuItem value={false}>false</MenuItem>\\r\\n                <MenuItem value='xs'>xs</MenuItem>\\r\\n                <MenuItem value='sm'>sm</MenuItem>\\r\\n                <MenuItem value='md'>md</MenuItem>\\r\\n                <MenuItem value='lg'>lg</MenuItem>\\r\\n                <MenuItem value='xl'>xl</MenuItem>\\r\\n              </Select>\\r\\n            </FormControl>\\r\\n            <FormControlLabel\\r\\n              sx={{mt: 1}}\\r\\n              control={\\r\\n                <Switch checked={fullWidth} onChange={handleFullWidthChange} />\\r\\n              }\\r\\n              label='Full width'\\r\\n            />\\r\\n          </Box>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose}>Close</Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport {useTheme} from '@mui/material/styles';\r\n\r\nexport default function ResponsiveDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='responsive-dialog-title'\r\n      >\r\n        <DialogTitle id='responsive-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose}>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport useMediaQuery from '@mui/material/useMediaQuery';\\r\\nimport {useTheme} from '@mui/material/styles';\\r\\n\\r\\nexport default function ResponsiveDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const theme = useTheme();\\r\\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open responsive dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullScreen={fullScreen}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='responsive-dialog-title'\\r\\n      >\\r\\n        <DialogTitle id='responsive-dialog-title'>\\r\\n          {\\\"Use Google's location service?\\\"}\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button autoFocus onClick={handleClose}>\\r\\n            Disagree\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} autoFocus>\\r\\n            Agree\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport Radio from '@mui/material/Radio';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\n\r\nconst options = [\r\n  'None',\r\n  'Atria',\r\n  'Callisto',\r\n  'Dione',\r\n  'Ganymede',\r\n  'Hangouts Call',\r\n  'Luna',\r\n  'Oberon',\r\n  'Phobos',\r\n  'Pyxis',\r\n  'Sedna',\r\n  'Titania',\r\n  'Triton',\r\n  'Umbriel',\r\n];\r\n\r\nfunction ConfirmationDialogRaw(props) {\r\n  const {onClose, value: valueProp, open, ...other} = props;\r\n  const [value, setValue] = React.useState(valueProp);\r\n  const radioGroupRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setValue(valueProp);\r\n    }\r\n  }, [valueProp, open]);\r\n\r\n  const handleEntering = () => {\r\n    if (radioGroupRef.current != null) {\r\n      radioGroupRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const handleOk = () => {\r\n    onClose(value);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      sx={{'& .MuiDialog-paper': {width: '80%', maxHeight: 435}}}\r\n      maxWidth='xs'\r\n      TransitionProps={{onEntering: handleEntering}}\r\n      open={open}\r\n      {...other}\r\n    >\r\n      <DialogTitle>Phone Ringtone</DialogTitle>\r\n      <DialogContent dividers>\r\n        <RadioGroup\r\n          ref={radioGroupRef}\r\n          aria-label='ringtone'\r\n          name='ringtone'\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          {options.map((option) => (\r\n            <FormControlLabel\r\n              value={option}\r\n              key={option}\r\n              control={<Radio />}\r\n              label={option}\r\n            />\r\n          ))}\r\n        </RadioGroup>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button autoFocus onClick={handleCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleOk}>Ok</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nConfirmationDialogRaw.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function ConfirmationDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [value, setValue] = React.useState('Dione');\r\n\r\n  const handleClickListItem = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (newValue) => {\r\n    setOpen(false);\r\n\r\n    if (newValue) {\r\n      setValue(newValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{width: '100%', maxWidth: 360, bgcolor: 'background.paper'}}>\r\n      <List component='div' role='group'>\r\n        <ListItem button divider disabled>\r\n          <ListItemText primary='Interruptions' />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          divider\r\n          aria-haspopup='true'\r\n          aria-controls='ringtone-menu'\r\n          aria-label='phone ringtone'\r\n          onClick={handleClickListItem}\r\n        >\r\n          <ListItemText primary='Phone ringtone' secondary={value} />\r\n        </ListItem>\r\n        <ListItem button divider disabled>\r\n          <ListItemText\r\n            primary='Default notification ringtone'\r\n            secondary='Tethys'\r\n          />\r\n        </ListItem>\r\n        <ConfirmationDialogRaw\r\n          id='ringtone-menu'\r\n          keepMounted\r\n          open={open}\r\n          onClose={handleClose}\r\n          value={value}\r\n        />\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport List from '@mui/material/List';\\r\\nimport ListItem from '@mui/material/ListItem';\\r\\nimport ListItemText from '@mui/material/ListItemText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport RadioGroup from '@mui/material/RadioGroup';\\r\\nimport Radio from '@mui/material/Radio';\\r\\nimport FormControlLabel from '@mui/material/FormControlLabel';\\r\\n\\r\\nconst options = [\\r\\n  'None',\\r\\n  'Atria',\\r\\n  'Callisto',\\r\\n  'Dione',\\r\\n  'Ganymede',\\r\\n  'Hangouts Call',\\r\\n  'Luna',\\r\\n  'Oberon',\\r\\n  'Phobos',\\r\\n  'Pyxis',\\r\\n  'Sedna',\\r\\n  'Titania',\\r\\n  'Triton',\\r\\n  'Umbriel',\\r\\n];\\r\\n\\r\\nfunction ConfirmationDialogRaw(props) {\\r\\n  const {onClose, value: valueProp, open, ...other} = props;\\r\\n  const [value, setValue] = React.useState(valueProp);\\r\\n  const radioGroupRef = React.useRef(null);\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    if (!open) {\\r\\n      setValue(valueProp);\\r\\n    }\\r\\n  }, [valueProp, open]);\\r\\n\\r\\n  const handleEntering = () => {\\r\\n    if (radioGroupRef.current != null) {\\r\\n      radioGroupRef.current.focus();\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleCancel = () => {\\r\\n    onClose();\\r\\n  };\\r\\n\\r\\n  const handleOk = () => {\\r\\n    onClose(value);\\r\\n  };\\r\\n\\r\\n  const handleChange = (event) => {\\r\\n    setValue(event.target.value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Dialog\\r\\n      sx={{'& .MuiDialog-paper': {width: '80%', maxHeight: 435}}}\\r\\n      maxWidth='xs'\\r\\n      TransitionProps={{onEntering: handleEntering}}\\r\\n      open={open}\\r\\n      {...other}\\r\\n    >\\r\\n      <DialogTitle>Phone Ringtone</DialogTitle>\\r\\n      <DialogContent dividers>\\r\\n        <RadioGroup\\r\\n          ref={radioGroupRef}\\r\\n          aria-label='ringtone'\\r\\n          name='ringtone'\\r\\n          value={value}\\r\\n          onChange={handleChange}\\r\\n        >\\r\\n          {options.map((option) => (\\r\\n            <FormControlLabel\\r\\n              value={option}\\r\\n              key={option}\\r\\n              control={<Radio />}\\r\\n              label={option}\\r\\n            />\\r\\n          ))}\\r\\n        </RadioGroup>\\r\\n      </DialogContent>\\r\\n      <DialogActions>\\r\\n        <Button autoFocus onClick={handleCancel}>\\r\\n          Cancel\\r\\n        </Button>\\r\\n        <Button onClick={handleOk}>Ok</Button>\\r\\n      </DialogActions>\\r\\n    </Dialog>\\r\\n  );\\r\\n}\\r\\n\\r\\nConfirmationDialogRaw.propTypes = {\\r\\n  onClose: PropTypes.func.isRequired,\\r\\n  open: PropTypes.bool.isRequired,\\r\\n  value: PropTypes.string.isRequired,\\r\\n};\\r\\n\\r\\nexport default function ConfirmationDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [value, setValue] = React.useState('Dione');\\r\\n\\r\\n  const handleClickListItem = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = (newValue) => {\\r\\n    setOpen(false);\\r\\n\\r\\n    if (newValue) {\\r\\n      setValue(newValue);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Box sx={{width: '100%', maxWidth: 360, bgcolor: 'background.paper'}}>\\r\\n      <List component='div' role='group'>\\r\\n        <ListItem button divider disabled>\\r\\n          <ListItemText primary='Interruptions' />\\r\\n        </ListItem>\\r\\n        <ListItem\\r\\n          button\\r\\n          divider\\r\\n          aria-haspopup='true'\\r\\n          aria-controls='ringtone-menu'\\r\\n          aria-label='phone ringtone'\\r\\n          onClick={handleClickListItem}\\r\\n        >\\r\\n          <ListItemText primary='Phone ringtone' secondary={value} />\\r\\n        </ListItem>\\r\\n        <ListItem button divider disabled>\\r\\n          <ListItemText\\r\\n            primary='Default notification ringtone'\\r\\n            secondary='Tethys'\\r\\n          />\\r\\n        </ListItem>\\r\\n        <ConfirmationDialogRaw\\r\\n          id='ringtone-menu'\\r\\n          keepMounted\\r\\n          open={open}\\r\\n          onClose={handleClose}\\r\\n          value={value}\\r\\n        />\\r\\n      </List>\\r\\n    </Box>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Paper from '@mui/material/Paper';\r\nimport Draggable from 'react-draggable';\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle='#draggable-dialog-title'\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function DraggableDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' onClick={handleClickOpen}>\r\n        Open draggable dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby='draggable-dialog-title'\r\n      >\r\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\r\n          Subscribe\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose}>Subscribe</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\nimport Paper from '@mui/material/Paper';\\r\\nimport Draggable from 'react-draggable';\\r\\n\\r\\nfunction PaperComponent(props) {\\r\\n  return (\\r\\n    <Draggable\\r\\n      handle='#draggable-dialog-title'\\r\\n      cancel={'[class*=\\\"MuiDialogContent-root\\\"]'}\\r\\n    >\\r\\n      <Paper {...props} />\\r\\n    </Draggable>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function DraggableDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' onClick={handleClickOpen}>\\r\\n        Open draggable dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        PaperComponent={PaperComponent}\\r\\n        aria-labelledby='draggable-dialog-title'\\r\\n      >\\r\\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\\r\\n          Subscribe\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            To subscribe to this website, please enter your email address here.\\r\\n            We will send updates occasionally.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button autoFocus onClick={handleClose}>\\r\\n            Cancel\\r\\n          </Button>\\r\\n          <Button onClick={handleClose}>Subscribe</Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function ScrollDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [scroll, setScroll] = React.useState('paper');\r\n\r\n  const handleClickOpen = (scrollType) => () => {\r\n    setOpen(true);\r\n    setScroll(scrollType);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      const {current: descriptionElement} = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClickOpen('paper')}>scroll=paper</Button>\r\n      <Button onClick={handleClickOpen('body')}>scroll=body</Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        scroll={scroll}\r\n        aria-labelledby='scroll-dialog-title'\r\n        aria-describedby='scroll-dialog-description'\r\n      >\r\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\r\n        <DialogContent dividers={scroll === 'paper'}>\r\n          <DialogContentText\r\n            id='scroll-dialog-description'\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}\r\n          >\r\n            {[...new Array(50)]\r\n              .map(\r\n                () => `Cras mattis consectetur purus sit amet fermentum.\r\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\r\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\r\n              )\r\n              .join('\\n')}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={handleClose}>Subscribe</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '../../../../@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '../../../../@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '../../../../@crema/core/AppComponentCard';\r\n\r\nimport SimpleDialog from './SimpleDialog';\r\nimport SimpleDialogSource from '!raw-loader!./SimpleDialog';\r\n\r\nimport AlertDialog from './AlertDialog';\r\nimport AlertDialogSource from '!raw-loader!./AlertDialog';\r\n\r\nimport AlertDialogSlide from './AlertDialogSlide';\r\nimport AlertDialogSlideSource from '!raw-loader!./AlertDialogSlide';\r\n\r\nimport FormDialog from './FormDialog';\r\nimport FormDialogSource from '!raw-loader!./FormDialog';\r\n\r\nimport CustomizedDialogs from './CustomizedDialogs';\r\nimport CustomizedDialogsSource from '!raw-loader!./CustomizedDialogs';\r\n\r\nimport FullScreenDialog from './FullScreenDialog';\r\nimport FullScreenDialogSource from '!raw-loader!./FullScreenDialog';\r\n\r\nimport MaxWidthDialog from './MaxWidthDialog';\r\nimport MaxWidthDialogSource from '!raw-loader!./MaxWidthDialog';\r\n\r\nimport ResponsiveDialog from './ResponsiveDialog';\r\nimport ResponsiveDialogSource from '!raw-loader!./ResponsiveDialog';\r\n\r\nimport ConfirmationDialog from './ConfirmationDialog';\r\nimport ConfirmationDialogSource from '!raw-loader!./ConfirmationDialog';\r\n\r\nimport DraggableDialog from './DraggableDialog';\r\nimport DraggableDialogSource from '!raw-loader!./DraggableDialog';\r\n\r\nimport ScrollDialog from './ScrollDialog';\r\nimport ScrollDialogSource from '!raw-loader!./ScrollDialog';\r\n\r\nconst Dialog = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='Dialog'\r\n        description='Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.'\r\n        refUrl='https://mui.com/components/dialogs/'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Alert Dialog'\r\n            component={AlertDialog}\r\n            source={AlertDialogSource}\r\n            noScrollbar\r\n            description='Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Alert Dialog Slide'\r\n            component={AlertDialogSlide}\r\n            source={AlertDialogSlideSource}\r\n            noScrollbar\r\n            description='You can also swap out the transition, the next example uses Slide.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Form Dialog'\r\n            component={FormDialog}\r\n            source={FormDialogSource}\r\n            noScrollbar\r\n            description='Form dialogs allow users to fill out form fields within a dialog. For example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch Submit.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Customized Dialogs'\r\n            component={CustomizedDialogs}\r\n            source={CustomizedDialogsSource}\r\n            noScrollbar\r\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='FullScreen Dialogs'\r\n            component={FullScreenDialog}\r\n            source={FullScreenDialogSource}\r\n            noScrollbar\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Max Width Dialog'\r\n            component={MaxWidthDialog}\r\n            source={MaxWidthDialogSource}\r\n            noScrollbar\r\n            description='You can set a dialog maximum width by using the maxWidth enumerable in combination with the fullWidth boolean. When the fullWidth prop is true, the dialog will adapt based on the maxWidth value.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Responsive Dialog'\r\n            component={ResponsiveDialog}\r\n            source={ResponsiveDialogSource}\r\n            noScrollbar\r\n            description='You may make a dialog responsively full screen using useMediaQuery.'\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='DraggableDialog'\r\n            component={DraggableDialog}\r\n            source={DraggableDialogSource}\r\n            noScrollbar\r\n            description='You can create a draggable dialog by using react-draggable. To do so, you can pass the imported Draggable component as the PaperComponent of the Dialog component. This will make the entire dialog draggable.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Scroll Dialog'\r\n            component={ScrollDialog}\r\n            source={ScrollDialogSource}\r\n            noScrollbar\r\n            description='When dialogs become too long for the users viewport or device, they scroll. '\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='Simple Dialog'\r\n            component={SimpleDialog}\r\n            source={SimpleDialogSource}\r\n            noScrollbar\r\n            description='Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account).'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='ConfirmationDialog'\r\n            component={ConfirmationDialog}\r\n            source={ConfirmationDialogSource}\r\n            noScrollbar\r\n            description='Confirmation dialogs require users to explicitly confirm their choice before an option is committed. For example, users can listen to multiple ringtones but only make a final selection upon touching \"OK\".'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","export default \"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Dialog from '@mui/material/Dialog';\\r\\nimport DialogActions from '@mui/material/DialogActions';\\r\\nimport DialogContent from '@mui/material/DialogContent';\\r\\nimport DialogContentText from '@mui/material/DialogContentText';\\r\\nimport DialogTitle from '@mui/material/DialogTitle';\\r\\n\\r\\nexport default function ScrollDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [scroll, setScroll] = React.useState('paper');\\r\\n\\r\\n  const handleClickOpen = (scrollType) => () => {\\r\\n    setOpen(true);\\r\\n    setScroll(scrollType);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  const descriptionElementRef = React.useRef(null);\\r\\n  React.useEffect(() => {\\r\\n    if (open) {\\r\\n      const {current: descriptionElement} = descriptionElementRef;\\r\\n      if (descriptionElement !== null) {\\r\\n        descriptionElement.focus();\\r\\n      }\\r\\n    }\\r\\n  }, [open]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button onClick={handleClickOpen('paper')}>scroll=paper</Button>\\r\\n      <Button onClick={handleClickOpen('body')}>scroll=body</Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        scroll={scroll}\\r\\n        aria-labelledby='scroll-dialog-title'\\r\\n        aria-describedby='scroll-dialog-description'\\r\\n      >\\r\\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\\r\\n        <DialogContent dividers={scroll === 'paper'}>\\r\\n          <DialogContentText\\r\\n            id='scroll-dialog-description'\\r\\n            ref={descriptionElementRef}\\r\\n            tabIndex={-1}\\r\\n          >\\r\\n            {[...new Array(50)]\\r\\n              .map(\\r\\n                () => `Cras mattis consectetur purus sit amet fermentum.\\r\\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\\r\\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\\r\\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\\r\\n              )\\r\\n              .join('\\\\n')}\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose}>Cancel</Button>\\r\\n          <Button onClick={handleClose}>Subscribe</Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}