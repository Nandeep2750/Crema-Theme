(this.webpackJsonphister=this.webpackJsonphister||[]).push([[118],{2079:function(e,r,t){"use strict";r.match=function(e,r){return c(e).some((function(e){var t=e.inverse,n="all"===e.type||r.type===e.type;if(n&&t||!n&&!t)return!1;var a=e.expressions.every((function(e){var t=e.feature,n=e.modifier,a=e.value,s=r[t];if(!s)return!1;switch(t){case"orientation":case"scan":return s.toLowerCase()===a.toLowerCase();case"width":case"height":case"device-width":case"device-height":a=h(a),s=h(s);break;case"resolution":a=u(a),s=u(s);break;case"aspect-ratio":case"device-aspect-ratio":case"device-pixel-ratio":a=m(a),s=m(s);break;case"grid":case"color":case"color-index":case"monochrome":a=parseInt(a,10)||1,s=parseInt(s,10)||0}switch(n){case"min":return s>=a;case"max":return s<=a;default:return s===a}}));return a&&!t||!a&&t}))},r.parse=c;var n=/(?:(only|not)?\s*([^\s\(\)]+)(?:\s*and)?\s*)?(.+)?/i,a=/\(\s*([^\s\:\)]+)\s*(?:\:\s*([^\s\)]+))?\s*\)/,s=/^(?:(min|max)-)?(.+)/,i=/(em|rem|px|cm|mm|in|pt|pc)?$/,o=/(dpi|dpcm|dppx)?$/;function c(e){return e.split(",").map((function(e){var r=(e=e.trim()).match(n),t=r[1],i=r[2],o=r[3]||"",c={};return c.inverse=!!t&&"not"===t.toLowerCase(),c.type=i?i.toLowerCase():"all",o=o.match(/\([^\)]+\)/g)||[],c.expressions=o.map((function(e){var r=e.match(a),t=r[1].toLowerCase().match(s);return{modifier:t[1],feature:t[2],value:r[2]}})),c}))}function m(e){var r,t=Number(e);return t||(t=(r=e.match(/^(\d+)\s*\/\s*(\d+)$/))[1]/r[2]),t}function u(e){var r=parseFloat(e);switch(String(e).match(o)[1]){case"dpcm":return r/2.54;case"dppx":return 96*r;default:return r}}function h(e){var r=parseFloat(e);switch(String(e).match(i)[1]){case"em":case"rem":return 16*r;case"cm":return 96*r/2.54;case"mm":return 96*r/2.54/10;case"in":return 96*r;case"pt":return 72*r;case"pc":return 72*r/12;default:return r}}},2336:function(e,r,t){"use strict";t.r(r);t(2);var n=t(72),a=t(60),s=t(1458),i=t(38),o=t(716),c=t(1);function m(){var e=Object(o.a)("(min-width:600px)");return Object(c.jsx)("span",{children:"(min-width:600px) matches: ".concat(e)})}var u=t(79),h=t(601),d=t(1472);function p(){var e=Object(u.a)(),r=Object(o.a)(e.breakpoints.up("sm"));return Object(c.jsx)("span",{children:"theme.breakpoints.up('sm') matches: ".concat(r)})}var l=Object(h.a)();function f(){return Object(c.jsx)(d.a,{theme:l,children:Object(c.jsx)(p,{})})}var b=t(1026),j=t.n(b);function y(){var e=Object(o.a)(j()({minWidth:600}));return Object(c.jsx)("span",{children:"{ minWidth: 600 } matches: ".concat(e)})}var v=t(2079),x=t.n(v);function M(){var e=Object(o.a)("(min-width:600px)");return Object(c.jsx)("span",{children:"(min-width:600px) matches: ".concat(e)})}function w(){return Object(c.jsx)(d.a,{theme:{components:{MuiUseMediaQuery:{defaultProps:{ssrMatchMedia:function(e){return{matches:x.a.match(e,{width:800})}}}}}},children:Object(c.jsx)(M,{})})}var O=t(28);function k(){var e=function(){var e=Object(u.a)();return Object(O.a)(e.breakpoints.keys).reverse().reduce((function(r,t){var n=Object(o.a)(e.breakpoints.up(t));return!r&&n?t:r}),null)||"xs"}();return Object(c.jsx)("span",{children:"width: ".concat(e)})}var S=Object(h.a)();function Q(){return Object(c.jsx)(d.a,{theme:S,children:Object(c.jsx)(k,{})})}r.default=function(){return Object(c.jsxs)(c.Fragment,{children:[Object(c.jsx)(n.a,{title:"MediaQuery",description:"This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.",refUrl:"https://mui.com/components/use-media-query/"}),Object(c.jsxs)(a.a,{children:[Object(c.jsx)(s.a,{item:!0,xs:12,md:6,children:Object(c.jsx)(i.a,{title:"Simple Media Query",component:m,source:"import * as React from 'react';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nexport default function SimpleMediaQuery() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n",description:"You should provide a media query to the first argument of the hook. The media query string can be any valid CSS media query, e.g.",noScrollbar:!0})}),Object(c.jsx)(s.a,{item:!0,xs:12,md:6,children:Object(c.jsx)(i.a,{title:"ThemeHelper",component:f,source:"import * as React from 'react';\r\nimport {createTheme, ThemeProvider, useTheme} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function ThemeHelper() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n",noScrollbar:!0,description:"You can use MUIs breakpoint helpers as follows:"})}),Object(c.jsx)(s.a,{item:!0,xs:12,md:6,children:Object(c.jsx)(i.a,{title:"Java Script Media",component:y,source:"import * as React from 'react';\r\nimport json2mq from 'json2mq';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nexport default function JavaScriptMedia() {\r\n  const matches = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600,\r\n    }),\r\n  );\r\n\r\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\r\n}\r\n",noScrollbar:!0,description:"You can use json2mq to generate media query string from a JavaScript object."})}),Object(c.jsx)(s.a,{item:!0,xs:12,md:6,children:Object(c.jsx)(i.a,{title:"Server Side",component:w,source:"import * as React from 'react';\r\nimport mediaQuery from 'css-mediaquery';\r\n\r\nimport {ThemeProvider} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n\r\nexport default function ServerSide() {\r\n  const ssrMatchMedia = (query) => ({\r\n    matches: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      width: 800,\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider\r\n      theme={{\r\n        components: {\r\n          MuiUseMediaQuery: {\r\n            // Change the default options of useMediaQuery\r\n            defaultProps: {ssrMatchMedia},\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n",noScrollbar:!0,description:"Finally, you need to provide an implementation of matchMedia to the useMediaQuery with the previously guessed characteristics. Using css-mediaquery to emulate matchMedia is recommended."})}),Object(c.jsx)(s.a,{item:!0,xs:12,md:6,children:Object(c.jsx)(i.a,{title:"UseWidth",component:Q,source:"import * as React from 'react';\r\nimport {ThemeProvider, useTheme, createTheme} from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n/**\r\n * Be careful using this hook. It only works because the number of\r\n * breakpoints in theme is static. It will break once you change the number of\r\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\r\n */\r\nfunction useWidth() {\r\n  const theme = useTheme();\r\n  const keys = [...theme.breakpoints.keys].reverse();\r\n  return (\r\n    keys.reduce((output, key) => {\r\n      const matches = useMediaQuery(theme.breakpoints.up(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || 'xs'\r\n  );\r\n}\r\n\r\nfunction MyComponent() {\r\n  const width = useWidth();\r\n  return <span>{`width: ${width}`}</span>;\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function UseWidth() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n",noScrollbar:!0,description:"The withWidth() higher-order component injects the screen width of the page. You can reproduce the same behavior with a useWidth hook:"})})]})]})}}}]);
//# sourceMappingURL=118.afb55e53.chunk.js.map