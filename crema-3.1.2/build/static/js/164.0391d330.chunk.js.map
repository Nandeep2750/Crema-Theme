{"version":3,"sources":["pages/userPages/UserPages/ResetPassword.js"],"names":["validationSchema","yup","oldPassword","required","id","newPassword","confirmPassword","ResetPassword","animation","delay","sx","pb","py","xl","display","flex","flexDirection","alignItems","justifyContent","maxWidth","width","textAlign","padding","xs","lg","overflow","boxShadow","mb","mr","height","className","src","alt","title","fontWeight","Fonts","BOLD","fontSize","validateOnChange","initialValues","onSubmit","data","setErrors","resetForm","isSubmitting","noValidate","autoComplete","name","label","variant","type","color","disabled"],"mappings":"qGAAA,uGAWMA,EAAmBC,IAAW,CAClCC,YAAaD,MAEVE,SAAS,cAAC,IAAD,CAAcC,GAAG,iCAC7BC,YAAaJ,MAEVE,SAAS,cAAC,IAAD,CAAcC,GAAG,iCAC7BE,gBAAiBL,MAEdE,SAAS,cAAC,IAAD,CAAcC,GAAG,iCA6JhBG,UA1JO,WACpB,OACE,cAAC,IAAD,CAAYC,UAAU,uBAAuBC,MAAO,IAApD,SACE,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTC,QAAS,OACTC,KAAM,EACNC,cAAe,SACfC,WAAY,SACZC,eAAgB,UARpB,SAWE,eAAC,IAAD,CACER,GAAI,CACFS,SAAU,IACVC,MAAO,OACPC,UAAW,SACXC,QAAS,CAACC,GAAI,EAAGC,GAAI,GAAIX,GAAI,aAC7BY,SAAU,SACVC,UACE,2EARN,UAWE,eAAC,IAAD,CACEhB,GAAI,CACFiB,GAAI,CAACJ,GAAI,EAAGV,GAAI,GAChBC,QAAS,OACTG,WAAY,SACZC,eAAgB,UALpB,UAQE,cAAC,IAAD,CACER,GAAI,CACFkB,GAAI,EACJ,QAAS,CACPC,OAAQ,KAJd,SAQE,qBACEC,UAAU,OACVC,IAAK,qCACLC,IAAI,QACJC,MAAM,YAGV,cAAC,IAAD,CACEvB,GAAI,CACFiB,GAAI,IACJO,WAAYC,IAAMC,KAClBC,SAAU,IAJd,SAOE,cAAC,IAAD,CAAcjC,GAAG,8BAIrB,cAAC,IAAD,CACEkC,kBAAkB,EAClBC,cAAe,CACbrC,YAAa,GACbG,YAAa,GACbC,gBAAiB,IAEnBN,iBAAkBA,EAClBwC,SAAU,SAACC,EAAD,GAAmC,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UACvBF,EAAKpC,cAAgBoC,EAAKnC,gBAC5BoC,EAAU,CACRpC,gBACE,cAAC,IAAD,CAAcF,GAAG,kCAIrBuC,KAhBN,SAoBG,gBAAEC,EAAF,EAAEA,aAAF,OACC,eAAC,IAAD,CACElC,GAAI,CACFW,UAAW,QAEbwB,YAAU,EACVC,aAAa,MALf,UAOE,cAAC,IAAD,CACEpC,GAAI,CACFiB,GAAI,CAACJ,GAAI,EAAGV,GAAI,IAFpB,SAKE,cAAC,IAAD,CACEkC,KAAK,cACLC,MAAO,cAAC,IAAD,CAAc5C,GAAG,uBACxBM,GAAI,CACFU,MAAO,QAET6B,QAAQ,WACRC,KAAK,eAGT,cAAC,IAAD,CACExC,GAAI,CACFiB,GAAI,CAACJ,GAAI,EAAGV,GAAI,IAFpB,SAKE,cAAC,IAAD,CACEkC,KAAK,cACLC,MAAO,cAAC,IAAD,CAAc5C,GAAG,uBACxBM,GAAI,CACFU,MAAO,QAET6B,QAAQ,WACRC,KAAK,eAGT,cAAC,IAAD,CACExC,GAAI,CACFiB,GAAI,CAACJ,GAAI,EAAGV,GAAI,IAFpB,SAKE,cAAC,IAAD,CACEkC,KAAK,kBACLC,MAAO,cAAC,IAAD,CAAc5C,GAAG,0BACxBM,GAAI,CACFU,MAAO,QAET6B,QAAQ,WACRC,KAAK,eAIT,cAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUR,EACVlC,GAAI,CACFU,MAAO,OACPS,OAAQ,IAEVqB,KAAK,SARP,SAUE,cAAC,IAAD,CAAc9C,GAAG","file":"static/js/164.0391d330.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Button from '@mui/material/Button';\r\nimport {Form, Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@mui/material/Box';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\nimport AppTextField from '../../../@crema/core/AppFormComponents/AppTextField';\r\n\r\nconst validationSchema = yup.object({\r\n  oldPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterOldPassword' />),\r\n  newPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterNewPassword' />),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.reTypePassword' />),\r\n});\r\n\r\nconst ResetPassword = () => {\r\n  return (\r\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n      <Box\r\n        sx={{\r\n          pb: 6,\r\n          py: {xl: 8},\r\n          display: 'flex',\r\n          flex: 1,\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <Card\r\n          sx={{\r\n            maxWidth: 576,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            padding: {xs: 8, lg: 12, xl: '48px 64px'},\r\n            overflow: 'hidden',\r\n            boxShadow:\r\n              '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              mb: {xs: 3, xl: 4},\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                mr: 2,\r\n                '.logo': {\r\n                  height: 24,\r\n                },\r\n              }}\r\n            >\r\n              <img\r\n                className='logo'\r\n                src={'/assets/images/logo-icon-large.png'}\r\n                alt='crema'\r\n                title='crema'\r\n              />\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                mb: 1.5,\r\n                fontWeight: Fonts.BOLD,\r\n                fontSize: 20,\r\n              }}\r\n            >\r\n              <IntlMessages id='common.resetPassword' />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Formik\r\n            validateOnChange={true}\r\n            initialValues={{\r\n              oldPassword: '',\r\n              newPassword: '',\r\n              confirmPassword: '',\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(data, {setErrors, resetForm}) => {\r\n              if (data.newPassword !== data.confirmPassword) {\r\n                setErrors({\r\n                  confirmPassword: (\r\n                    <IntlMessages id='validation.passwordMisMatch' />\r\n                  ),\r\n                });\r\n              } else {\r\n                resetForm();\r\n              }\r\n            }}\r\n          >\r\n            {({isSubmitting}) => (\r\n              <Form\r\n                sx={{\r\n                  textAlign: 'left',\r\n                }}\r\n                noValidate\r\n                autoComplete='off'\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    mb: {xs: 6, xl: 8},\r\n                  }}\r\n                >\r\n                  <AppTextField\r\n                    name='oldPassword'\r\n                    label={<IntlMessages id='common.oldPassword' />}\r\n                    sx={{\r\n                      width: '100%',\r\n                    }}\r\n                    variant='outlined'\r\n                    type='password'\r\n                  />\r\n                </Box>\r\n                <Box\r\n                  sx={{\r\n                    mb: {xs: 6, xl: 8},\r\n                  }}\r\n                >\r\n                  <AppTextField\r\n                    name='newPassword'\r\n                    label={<IntlMessages id='common.newPassword' />}\r\n                    sx={{\r\n                      width: '100%',\r\n                    }}\r\n                    variant='outlined'\r\n                    type='password'\r\n                  />\r\n                </Box>\r\n                <Box\r\n                  sx={{\r\n                    mb: {xs: 6, xl: 8},\r\n                  }}\r\n                >\r\n                  <AppTextField\r\n                    name='confirmPassword'\r\n                    label={<IntlMessages id='common.retypePassword' />}\r\n                    sx={{\r\n                      width: '100%',\r\n                    }}\r\n                    variant='outlined'\r\n                    type='password'\r\n                  />\r\n                </Box>\r\n\r\n                <Button\r\n                  variant='contained'\r\n                  color='primary'\r\n                  disabled={isSubmitting}\r\n                  sx={{\r\n                    width: '100%',\r\n                    height: 44,\r\n                  }}\r\n                  type='submit'\r\n                >\r\n                  <IntlMessages id='common.resetMyPassword' />\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card>\r\n      </Box>\r\n    </AppAnimate>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}