{"version":3,"sources":["pages/muiComponents/lab/DatePicker/BasicDatePicker.js","webpack:///./src/pages/muiComponents/lab/DatePicker/BasicDatePicker.js?0ec2","pages/muiComponents/lab/DatePicker/StaticDatePickerDemo.js","webpack:///./src/pages/muiComponents/lab/DatePicker/StaticDatePickerDemo.js?7f19","pages/muiComponents/lab/DatePicker/ResponsiveDatePickers.js","pages/muiComponents/lab/DatePicker/FormPropsDatePickers.js","webpack:///./src/pages/muiComponents/lab/DatePicker/FormPropsDatePickers.js?862c","pages/muiComponents/lab/DatePicker/LocalizedDatePicker.js","pages/muiComponents/lab/DatePicker/ViewsDatePicker.js","webpack:///./src/pages/muiComponents/lab/DatePicker/ViewsDatePicker.js?96e8","pages/muiComponents/lab/DatePicker/StaticDatePickerLandscape.js","webpack:///./src/pages/muiComponents/lab/DatePicker/StaticDatePickerLandscape.js?ae3c","pages/muiComponents/lab/DatePicker/SubComponentsPickers.js","webpack:///./src/pages/muiComponents/lab/DatePicker/SubComponentsPickers.js?3311","pages/muiComponents/lab/DatePicker/CustomInput.js","webpack:///./src/pages/muiComponents/lab/DatePicker/CustomInput.js?f4da","pages/muiComponents/lab/DatePicker/CustomDay.js","webpack:///./src/pages/muiComponents/lab/DatePicker/CustomDay.js?a10a","pages/muiComponents/lab/DatePicker/ServerRequestDatePicker.js","pages/muiComponents/lab/DatePicker/HelperText.js","pages/muiComponents/lab/DatePicker/index.js","webpack:///./src/pages/muiComponents/lab/DatePicker/ServerRequestDatePicker.js?7fa2","webpack:///./src/pages/muiComponents/lab/DatePicker/HelperText.js?aaa9","webpack:///./src/pages/muiComponents/lab/DatePicker/LocalizedDatePicker.js?e1c5","webpack:///./src/pages/muiComponents/lab/DatePicker/ResponsiveDatePickers.js?3de6"],"names":["BasicDatePicker","React","value","setValue","LocalizationProvider","dateAdapter","AdapterDateFns","label","onChange","newValue","renderInput","params","TextField","StaticDatePickerDemo","Date","StaticDatePicker","displayStaticWrapperAs","openTo","ResponsiveDatePickers","Stack","spacing","MobileDatePicker","DesktopDatePicker","minDate","disableFuture","views","FormPropsDatePickers","disabled","readOnly","localeMap","en","enLocale","fr","frLocale","ru","ruLocale","de","deLocale","maskMap","LocalizedDatePicker","locale","setLocale","ToggleButtonGroup","exclusive","sx","mb","display","Object","keys","map","localeItem","ToggleButton","onClick","mask","ViewsDatePicker","helperText","maxDate","StaticDatePickerLandscape","orientation","shouldDisableDate","isWeekend","SubComponentsPickers","date","setDate","Grid","container","item","xs","md","CalendarPicker","newDate","MonthPicker","YearPicker","isDateDisabled","CustomInput","inputRef","inputProps","InputProps","Box","alignItems","ref","endAdornment","CustomPickersDay","styled","PickersDay","shouldForwardProp","prop","theme","dayIsBetween","isFirstDay","isLastDay","borderRadius","backgroundColor","palette","primary","main","color","common","white","dark","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","CustomDay","renderDay","selectedDates","pickersDayProps","start","startOfWeek","end","endOfWeek","isWithinInterval","isSameDay","disableMargin","inputFormat","fakeFetch","signal","Promise","resolve","reject","timeout","setTimeout","daysInMonth","getDaysInMonth","daysToHighlight","min","max","Math","round","random","onabort","clearTimeout","DOMException","initialValue","ServerRequestDatePicker","requestAbortController","isLoading","setIsLoading","highlightedDays","setHighlightedDays","fetchHighlightedDays","controller","AbortController","then","catch","error","name","current","abort","loading","onMonthChange","renderLoading","CalendarPickerSkeleton","day","_value","DayComponentProps","isSelected","outsideCurrentMonth","indexOf","getDate","Badge","overlap","badgeContent","undefined","toString","HelperText","placeholder","DatePicker","AppComponentHeader","title","description","refUrl","AppGridContainer","AppComponentCard","component","source","noScrollbar"],"mappings":"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","file":"static/js/142.c87d1244.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\n\r\nexport default function BasicDatePicker() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DatePicker\r\n        label='Basic example'\r\n        value={value}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={(params) => <TextField {...params} />}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\n\\r\\nexport default function BasicDatePicker() {\\r\\n  const [value, setValue] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <DatePicker\\r\\n        label='Basic example'\\r\\n        value={value}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={(params) => <TextField {...params} />}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\r\n\r\nexport default function StaticDatePickerDemo() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <StaticDatePicker\r\n        displayStaticWrapperAs='desktop'\r\n        openTo='year'\r\n        value={value}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={(params) => <TextField {...params} />}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\\r\\n\\r\\nexport default function StaticDatePickerDemo() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <StaticDatePicker\\r\\n        displayStaticWrapperAs='desktop'\\r\\n        openTo='year'\\r\\n        value={value}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={(params) => <TextField {...params} />}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport default function ResponsiveDatePickers() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Stack spacing={3}>\r\n        <MobileDatePicker\r\n          label='For mobile'\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n        <DesktopDatePicker\r\n          label='For desktop'\r\n          value={value}\r\n          minDate={new Date('2017-01-01')}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n        <DatePicker\r\n          disableFuture\r\n          label='Responsive'\r\n          openTo='year'\r\n          views={['year', 'month', 'day']}\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n      </Stack>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport default function FormPropsDatePickers() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Stack spacing={3}>\r\n        <DatePicker\r\n          label='disabled'\r\n          disabled\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n        <DatePicker\r\n          label='read-only'\r\n          readOnly\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n      </Stack>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\nimport Stack from '@mui/material/Stack';\\r\\n\\r\\nexport default function FormPropsDatePickers() {\\r\\n  const [value, setValue] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <Stack spacing={3}>\\r\\n        <DatePicker\\r\\n          label='disabled'\\r\\n          disabled\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          label='read-only'\\r\\n          readOnly\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n      </Stack>\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport frLocale from 'date-fns/locale/fr';\r\nimport ruLocale from 'date-fns/locale/ru';\r\nimport deLocale from 'date-fns/locale/de';\r\nimport enLocale from 'date-fns/locale/en-US';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\nconst localeMap = {\r\n  en: enLocale,\r\n  fr: frLocale,\r\n  ru: ruLocale,\r\n  de: deLocale,\r\n};\r\n\r\nconst maskMap = {\r\n  fr: '__/__/____',\r\n  en: '__/__/____',\r\n  ru: '__.__.____',\r\n  de: '__.__.____',\r\n};\r\n\r\nexport default function LocalizedDatePicker() {\r\n  const [locale, setLocale] = React.useState('ru');\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  const selectLocale = (newLocale) => {\r\n    setLocale(newLocale);\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider\r\n      dateAdapter={AdapterDateFns}\r\n      locale={localeMap[locale]}\r\n    >\r\n      <div>\r\n        <ToggleButtonGroup\r\n          value={locale}\r\n          exclusive\r\n          sx={{mb: 2, display: 'block'}}\r\n        >\r\n          {Object.keys(localeMap).map((localeItem) => (\r\n            <ToggleButton\r\n              key={localeItem}\r\n              value={localeItem}\r\n              onClick={() => selectLocale(localeItem)}\r\n            >\r\n              {localeItem}\r\n            </ToggleButton>\r\n          ))}\r\n        </ToggleButtonGroup>\r\n        <DatePicker\r\n          mask={maskMap[locale]}\r\n          value={value}\r\n          onChange={(newValue) => setValue(newValue)}\r\n          renderInput={(params) => <TextField {...params} />}\r\n        />\r\n      </div>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport default function ViewsDatePicker() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Stack spacing={3}>\r\n        <DatePicker\r\n          views={['year']}\r\n          label='Year only'\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} helperText={null} />}\r\n        />\r\n        <DatePicker\r\n          views={['year', 'month']}\r\n          label='Year and Month'\r\n          minDate={new Date('2012-03-01')}\r\n          maxDate={new Date('2023-06-01')}\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} helperText={null} />}\r\n        />\r\n        <DatePicker\r\n          openTo='year'\r\n          views={['year', 'month', 'day']}\r\n          label='Year, month and date'\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} helperText={null} />}\r\n        />\r\n        <DatePicker\r\n          views={['day', 'month', 'year']}\r\n          label='Invert the order of views'\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} helperText={null} />}\r\n        />\r\n        <DatePicker\r\n          views={['day']}\r\n          label='Just date'\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          renderInput={(params) => <TextField {...params} helperText={null} />}\r\n        />\r\n      </Stack>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\nimport Stack from '@mui/material/Stack';\\r\\n\\r\\nexport default function ViewsDatePicker() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <Stack spacing={3}>\\r\\n        <DatePicker\\r\\n          views={['year']}\\r\\n          label='Year only'\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} helperText={null} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          views={['year', 'month']}\\r\\n          label='Year and Month'\\r\\n          minDate={new Date('2012-03-01')}\\r\\n          maxDate={new Date('2023-06-01')}\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} helperText={null} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          openTo='year'\\r\\n          views={['year', 'month', 'day']}\\r\\n          label='Year, month and date'\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} helperText={null} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          views={['day', 'month', 'year']}\\r\\n          label='Invert the order of views'\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} helperText={null} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          views={['day']}\\r\\n          label='Just date'\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} helperText={null} />}\\r\\n        />\\r\\n      </Stack>\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport isWeekend from 'date-fns/isWeekend';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\r\n\r\nexport default function StaticDatePickerLandscape() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <StaticDatePicker\r\n        orientation='landscape'\r\n        openTo='day'\r\n        value={value}\r\n        shouldDisableDate={isWeekend}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={(params) => <TextField {...params} />}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport isWeekend from 'date-fns/isWeekend';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\\r\\n\\r\\nexport default function StaticDatePickerLandscape() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <StaticDatePicker\\r\\n        orientation='landscape'\\r\\n        openTo='day'\\r\\n        value={value}\\r\\n        shouldDisableDate={isWeekend}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={(params) => <TextField {...params} />}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CalendarPicker from '@mui/lab/CalendarPicker';\r\nimport MonthPicker from '@mui/lab/MonthPicker';\r\nimport YearPicker from '@mui/lab/YearPicker';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nconst minDate = new Date('2020-01-01T00:00:00.000');\r\nconst maxDate = new Date('2034-01-01T00:00:00.000');\r\n\r\nexport default function SubComponentsPickers() {\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <CalendarPicker\r\n            date={date}\r\n            onChange={(newDate) => setDate(newDate)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <MonthPicker\r\n            date={date}\r\n            minDate={minDate}\r\n            maxDate={maxDate}\r\n            onChange={(newDate) => setDate(newDate)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <YearPicker\r\n            date={date}\r\n            isDateDisabled={() => false}\r\n            minDate={minDate}\r\n            maxDate={maxDate}\r\n            onChange={(newDate) => setDate(newDate)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport CalendarPicker from '@mui/lab/CalendarPicker';\\r\\nimport MonthPicker from '@mui/lab/MonthPicker';\\r\\nimport YearPicker from '@mui/lab/YearPicker';\\r\\nimport Grid from '@mui/material/Grid';\\r\\n\\r\\nconst minDate = new Date('2020-01-01T00:00:00.000');\\r\\nconst maxDate = new Date('2034-01-01T00:00:00.000');\\r\\n\\r\\nexport default function SubComponentsPickers() {\\r\\n  const [date, setDate] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <Grid container spacing={3}>\\r\\n        <Grid item xs={12} md={6}>\\r\\n          <CalendarPicker\\r\\n            date={date}\\r\\n            onChange={(newDate) => setDate(newDate)}\\r\\n          />\\r\\n        </Grid>\\r\\n        <Grid item xs={12} md={6}>\\r\\n          <MonthPicker\\r\\n            date={date}\\r\\n            minDate={minDate}\\r\\n            maxDate={maxDate}\\r\\n            onChange={(newDate) => setDate(newDate)}\\r\\n          />\\r\\n        </Grid>\\r\\n        <Grid item xs={12} md={6}>\\r\\n          <YearPicker\\r\\n            date={date}\\r\\n            isDateDisabled={() => false}\\r\\n            minDate={minDate}\\r\\n            maxDate={maxDate}\\r\\n            onChange={(newDate) => setDate(newDate)}\\r\\n          />\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DatePicker';\r\n\r\nexport default function CustomInput() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DesktopDatePicker\r\n        label='Custom input'\r\n        value={value}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={({inputRef, inputProps, InputProps}) => (\r\n          <Box sx={{display: 'flex', alignItems: 'center'}}>\r\n            <input ref={inputRef} {...inputProps} />\r\n            {InputProps?.endAdornment}\r\n          </Box>\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DesktopDatePicker from '@mui/lab/DatePicker';\\r\\n\\r\\nexport default function CustomInput() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <DesktopDatePicker\\r\\n        label='Custom input'\\r\\n        value={value}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={({inputRef, inputProps, InputProps}) => (\\r\\n          <Box sx={{display: 'flex', alignItems: 'center'}}>\\r\\n            <input ref={inputRef} {...inputProps} />\\r\\n            {InputProps?.endAdornment}\\r\\n          </Box>\\r\\n        )}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport {styled} from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\r\nimport PickersDay from '@mui/lab/PickersDay';\r\nimport endOfWeek from 'date-fns/endOfWeek';\r\nimport isSameDay from 'date-fns/isSameDay';\r\nimport isWithinInterval from 'date-fns/isWithinInterval';\r\nimport startOfWeek from 'date-fns/startOfWeek';\r\n\r\nconst CustomPickersDay = styled(PickersDay, {\r\n  shouldForwardProp: (prop) =>\r\n    prop !== 'dayIsBetween' && prop !== 'isFirstDay' && prop !== 'isLastDay',\r\n})(({theme, dayIsBetween, isFirstDay, isLastDay}) => ({\r\n  ...(dayIsBetween && {\r\n    borderRadius: 0,\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n    '&:hover, &:focus': {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  }),\r\n  ...(isFirstDay && {\r\n    borderTopLeftRadius: '50%',\r\n    borderBottomLeftRadius: '50%',\r\n  }),\r\n  ...(isLastDay && {\r\n    borderTopRightRadius: '50%',\r\n    borderBottomRightRadius: '50%',\r\n  }),\r\n}));\r\n\r\nexport default function CustomDay() {\r\n  const [value, setValue] = React.useState(new Date());\r\n\r\n  const renderWeekPickerDay = (date, selectedDates, pickersDayProps) => {\r\n    if (!value) {\r\n      return <PickersDay {...pickersDayProps} />;\r\n    }\r\n\r\n    const start = startOfWeek(value);\r\n    const end = endOfWeek(value);\r\n\r\n    const dayIsBetween = isWithinInterval(date, {start, end});\r\n    const isFirstDay = isSameDay(date, start);\r\n    const isLastDay = isSameDay(date, end);\r\n\r\n    return (\r\n      <CustomPickersDay\r\n        {...pickersDayProps}\r\n        disableMargin\r\n        dayIsBetween={dayIsBetween}\r\n        isFirstDay={isFirstDay}\r\n        isLastDay={isLastDay}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <StaticDatePicker\r\n        displayStaticWrapperAs='desktop'\r\n        label='Week picker'\r\n        value={value}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderDay={renderWeekPickerDay}\r\n        renderInput={(params) => <TextField {...params} />}\r\n        inputFormat=\"'Week of' MMM d\"\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport {styled} from '@mui/material/styles';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport StaticDatePicker from '@mui/lab/StaticDatePicker';\\r\\nimport PickersDay from '@mui/lab/PickersDay';\\r\\nimport endOfWeek from 'date-fns/endOfWeek';\\r\\nimport isSameDay from 'date-fns/isSameDay';\\r\\nimport isWithinInterval from 'date-fns/isWithinInterval';\\r\\nimport startOfWeek from 'date-fns/startOfWeek';\\r\\n\\r\\nconst CustomPickersDay = styled(PickersDay, {\\r\\n  shouldForwardProp: (prop) =>\\r\\n    prop !== 'dayIsBetween' && prop !== 'isFirstDay' && prop !== 'isLastDay',\\r\\n})(({theme, dayIsBetween, isFirstDay, isLastDay}) => ({\\r\\n  ...(dayIsBetween && {\\r\\n    borderRadius: 0,\\r\\n    backgroundColor: theme.palette.primary.main,\\r\\n    color: theme.palette.common.white,\\r\\n    '&:hover, &:focus': {\\r\\n      backgroundColor: theme.palette.primary.dark,\\r\\n    },\\r\\n  }),\\r\\n  ...(isFirstDay && {\\r\\n    borderTopLeftRadius: '50%',\\r\\n    borderBottomLeftRadius: '50%',\\r\\n  }),\\r\\n  ...(isLastDay && {\\r\\n    borderTopRightRadius: '50%',\\r\\n    borderBottomRightRadius: '50%',\\r\\n  }),\\r\\n}));\\r\\n\\r\\nexport default function CustomDay() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  const renderWeekPickerDay = (date, selectedDates, pickersDayProps) => {\\r\\n    if (!value) {\\r\\n      return <PickersDay {...pickersDayProps} />;\\r\\n    }\\r\\n\\r\\n    const start = startOfWeek(value);\\r\\n    const end = endOfWeek(value);\\r\\n\\r\\n    const dayIsBetween = isWithinInterval(date, {start, end});\\r\\n    const isFirstDay = isSameDay(date, start);\\r\\n    const isLastDay = isSameDay(date, end);\\r\\n\\r\\n    return (\\r\\n      <CustomPickersDay\\r\\n        {...pickersDayProps}\\r\\n        disableMargin\\r\\n        dayIsBetween={dayIsBetween}\\r\\n        isFirstDay={isFirstDay}\\r\\n        isLastDay={isLastDay}\\r\\n      />\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <StaticDatePicker\\r\\n        displayStaticWrapperAs='desktop'\\r\\n        label='Week picker'\\r\\n        value={value}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderDay={renderWeekPickerDay}\\r\\n        renderInput={(params) => <TextField {...params} />}\\r\\n        inputFormat=\\\"'Week of' MMM d\\\"\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Badge from '@mui/material/Badge';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport PickersDay from '@mui/lab/PickersDay';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport CalendarPickerSkeleton from '@mui/lab/CalendarPickerSkeleton';\r\nimport getDaysInMonth from 'date-fns/getDaysInMonth';\r\n\r\nfunction getRandomNumber(min, max) {\r\n  return Math.round(Math.random() * (max - min) + min);\r\n}\r\n\r\n/**\r\n * Mimic fetch with abort controller https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\r\n * ⚠️ No IE11 support\r\n */\r\nfunction fakeFetch(date, {signal}) {\r\n  return new Promise((resolve, reject) => {\r\n    const timeout = setTimeout(() => {\r\n      const daysInMonth = getDaysInMonth(date);\r\n      const daysToHighlight = [1, 2, 3].map(() =>\r\n        getRandomNumber(1, daysInMonth),\r\n      );\r\n\r\n      resolve({daysToHighlight});\r\n    }, 500);\r\n\r\n    signal.onabort = () => {\r\n      clearTimeout(timeout);\r\n      reject(new DOMException('aborted', 'AbortError'));\r\n    };\r\n  });\r\n}\r\n\r\nconst initialValue = new Date();\r\n\r\nexport default function ServerRequestDatePicker() {\r\n  const requestAbortController = React.useRef(null);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [highlightedDays, setHighlightedDays] = React.useState([1, 2, 15]);\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const fetchHighlightedDays = (date) => {\r\n    const controller = new AbortController();\r\n    fakeFetch(date, {\r\n      signal: controller.signal,\r\n    })\r\n      .then(({daysToHighlight}) => {\r\n        setHighlightedDays(daysToHighlight);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        // ignore the error if it's caused by `controller.abort`\r\n        if (error.name !== 'AbortError') {\r\n          throw error;\r\n        }\r\n      });\r\n\r\n    requestAbortController.current = controller;\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    fetchHighlightedDays(initialValue);\r\n    // abort request on unmount\r\n    return () => requestAbortController.current?.abort();\r\n  }, []);\r\n\r\n  const handleMonthChange = (date) => {\r\n    if (requestAbortController.current) {\r\n      // make sure that you are aborting useless requests\r\n      // because it is possible to switch between months pretty quickly\r\n      requestAbortController.current.abort();\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setHighlightedDays([]);\r\n    fetchHighlightedDays(date);\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DatePicker\r\n        value={value}\r\n        loading={isLoading}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        onMonthChange={handleMonthChange}\r\n        renderInput={(params) => <TextField {...params} />}\r\n        renderLoading={() => <CalendarPickerSkeleton />}\r\n        renderDay={(day, _value, DayComponentProps) => {\r\n          const isSelected =\r\n            !DayComponentProps.outsideCurrentMonth &&\r\n            highlightedDays.indexOf(day.getDate()) > 0;\r\n\r\n          return (\r\n            <Badge\r\n              key={day.toString()}\r\n              overlap='circular'\r\n              badgeContent={isSelected ? '🌚' : undefined}\r\n            >\r\n              <PickersDay {...DayComponentProps} />\r\n            </Badge>\r\n          );\r\n        }}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\n\r\nexport default function HelperText() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DatePicker\r\n        label='Helper text example'\r\n        value={value}\r\n        onChange={(newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={(params) => (\r\n          <TextField {...params} helperText={params?.inputProps?.placeholder} />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '@crema/core/AppComponentCard';\r\n\r\nimport BasicDatePicker from './BasicDatePicker';\r\nimport BasicDatePickerSource from '!raw-loader!./BasicDatePicker';\r\n\r\nimport StaticDatePickerDemo from './StaticDatePickerDemo';\r\nimport StaticDatePickerDemoSource from '!raw-loader!./StaticDatePickerDemo';\r\n\r\nimport ResponsiveDatePickers from './ResponsiveDatePickers';\r\nimport ResponsiveDatePickersSource from '!raw-loader!./ResponsiveDatePickers';\r\n\r\nimport FormPropsDatePickers from './FormPropsDatePickers';\r\nimport FormPropsDatePickersSource from '!raw-loader!./FormPropsDatePickers';\r\n\r\nimport LocalizedDatePicker from './LocalizedDatePicker';\r\nimport LocalizedDatePickerSource from '!raw-loader!./LocalizedDatePicker';\r\n\r\nimport ViewsDatePicker from './ViewsDatePicker';\r\nimport ViewsDatePickerSource from '!raw-loader!./ViewsDatePicker';\r\n\r\nimport StaticDatePickerLandscape from './StaticDatePickerLandscape';\r\nimport StaticDatePickerLandscapeSource from '!raw-loader!./StaticDatePickerLandscape';\r\n\r\nimport SubComponentsPickers from './SubComponentsPickers';\r\nimport SubComponentsPickersSource from '!raw-loader!./SubComponentsPickers';\r\n\r\nimport CustomInput from './CustomInput';\r\nimport CustomInputSource from '!raw-loader!./CustomInput';\r\n\r\nimport CustomDay from './CustomDay';\r\nimport CustomDaySource from '!raw-loader!./CustomDay';\r\n\r\nimport ServerRequestDatePicker from './ServerRequestDatePicker';\r\nimport ServerRequestDatePickerSource from '!raw-loader!./ServerRequestDatePicker';\r\n\r\nimport HelperText from './HelperText';\r\nimport HelperTextSource from '!raw-loader!./HelperText';\r\n\r\nconst DatePicker = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='DatePicker'\r\n        description='Date pickers let the user select a date.'\r\n        refUrl='https://material.io/components/date-pickers'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='BasicDatePicker'\r\n            component={BasicDatePicker}\r\n            source={BasicDatePickerSource}\r\n            noScrollbar\r\n            description='The date picker is rendered as a modal dialog on mobile, and a textbox with a popup on desktop.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='ServerRequestDatePicker'\r\n            component={ServerRequestDatePicker}\r\n            source={ServerRequestDatePickerSource}\r\n            noScrollbar\r\n            description='Sometimes it may be necessary to display additional info right in the calendar. Heres an example of prefetching and displaying server-side data using the onMonthChange, loading, and renderDay props. '\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='HelperText'\r\n            component={HelperText}\r\n            source={HelperTextSource}\r\n            noScrollbar\r\n            description='You can show a helper text with the date format accepted.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='CustomInput'\r\n            component={CustomInput}\r\n            source={CustomInputSource}\r\n            noScrollbar\r\n            description='You can customize the rendering of the input with the renderInput prop. Make sure to spread ref and inputProps correctly to the custom input component.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='FormPropsDatePickers'\r\n            component={FormPropsDatePickers}\r\n            source={FormPropsDatePickersSource}\r\n            noScrollbar\r\n            description='The date picker component can be disabled or read-only.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='LocalizedDatePicker'\r\n            component={LocalizedDatePicker}\r\n            source={LocalizedDatePickerSource}\r\n            noScrollbar\r\n            description='Use LocalizationProvider to change the date-engine locale that is used to render the date picker. Here is an example of changing the locale for the date-fns adapter:'\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='ResponsiveDatePickers'\r\n            component={ResponsiveDatePickers}\r\n            source={ResponsiveDatePickersSource}\r\n            noScrollbar\r\n            description='By default, the DatePicker component renders the desktop version if the media query @media (pointer: fine) matches. This can be customized with the desktopModeMediaQuery prop.'\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='ViewsDatePicker'\r\n            component={ViewsDatePicker}\r\n            source={ViewsDatePickerSource}\r\n            noScrollbar\r\n            description='Its possible to combine year, month, and date selection views. Views will appear in the order theyre included in the views array. '\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='StaticDatePickerDemo'\r\n            component={StaticDatePickerDemo}\r\n            source={StaticDatePickerDemoSource}\r\n            noScrollbar\r\n            description='Its possible to render any date picker without the modal/popover and text field. This can be helpful when building custom popover/modal containers.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='CustomDay'\r\n            component={CustomDay}\r\n            source={CustomDaySource}\r\n            noScrollbar\r\n            description='The displayed days are customizable with the renderDay function prop. You can take advantage of the PickersDay component.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='StaticDatePickerLandscape'\r\n            component={StaticDatePickerLandscape}\r\n            source={StaticDatePickerLandscapeSource}\r\n            noScrollbar\r\n            description='For ease of use, the date picker will automatically change the layout between portrait and landscape by subscription to the window.orientation change. You can force a specific layout using the orientation prop.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AppComponentCard\r\n            title='SubComponentsPickers'\r\n            component={SubComponentsPickers}\r\n            source={SubComponentsPickersSource}\r\n            noScrollbar\r\n            description='Some lower-level sub-components (CalendarPicker, MonthPicker, and YearPicker) are also exported. These are rendered without a wrapper or outer logic (masked input, date values parsing and validation, etc.).'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","export default \"import * as React from 'react';\\r\\nimport Badge from '@mui/material/Badge';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport PickersDay from '@mui/lab/PickersDay';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\nimport CalendarPickerSkeleton from '@mui/lab/CalendarPickerSkeleton';\\r\\nimport getDaysInMonth from 'date-fns/getDaysInMonth';\\r\\n\\r\\nfunction getRandomNumber(min, max) {\\r\\n  return Math.round(Math.random() * (max - min) + min);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Mimic fetch with abort controller https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\\r\\n * ⚠️ No IE11 support\\r\\n */\\r\\nfunction fakeFetch(date, {signal}) {\\r\\n  return new Promise((resolve, reject) => {\\r\\n    const timeout = setTimeout(() => {\\r\\n      const daysInMonth = getDaysInMonth(date);\\r\\n      const daysToHighlight = [1, 2, 3].map(() =>\\r\\n        getRandomNumber(1, daysInMonth),\\r\\n      );\\r\\n\\r\\n      resolve({daysToHighlight});\\r\\n    }, 500);\\r\\n\\r\\n    signal.onabort = () => {\\r\\n      clearTimeout(timeout);\\r\\n      reject(new DOMException('aborted', 'AbortError'));\\r\\n    };\\r\\n  });\\r\\n}\\r\\n\\r\\nconst initialValue = new Date();\\r\\n\\r\\nexport default function ServerRequestDatePicker() {\\r\\n  const requestAbortController = React.useRef(null);\\r\\n  const [isLoading, setIsLoading] = React.useState(false);\\r\\n  const [highlightedDays, setHighlightedDays] = React.useState([1, 2, 15]);\\r\\n  const [value, setValue] = React.useState(initialValue);\\r\\n\\r\\n  const fetchHighlightedDays = (date) => {\\r\\n    const controller = new AbortController();\\r\\n    fakeFetch(date, {\\r\\n      signal: controller.signal,\\r\\n    })\\r\\n      .then(({daysToHighlight}) => {\\r\\n        setHighlightedDays(daysToHighlight);\\r\\n        setIsLoading(false);\\r\\n      })\\r\\n      .catch((error) => {\\r\\n        // ignore the error if it's caused by `controller.abort`\\r\\n        if (error.name !== 'AbortError') {\\r\\n          throw error;\\r\\n        }\\r\\n      });\\r\\n\\r\\n    requestAbortController.current = controller;\\r\\n  };\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    fetchHighlightedDays(initialValue);\\r\\n    // abort request on unmount\\r\\n    return () => requestAbortController.current?.abort();\\r\\n  }, []);\\r\\n\\r\\n  const handleMonthChange = (date) => {\\r\\n    if (requestAbortController.current) {\\r\\n      // make sure that you are aborting useless requests\\r\\n      // because it is possible to switch between months pretty quickly\\r\\n      requestAbortController.current.abort();\\r\\n    }\\r\\n\\r\\n    setIsLoading(true);\\r\\n    setHighlightedDays([]);\\r\\n    fetchHighlightedDays(date);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <DatePicker\\r\\n        value={value}\\r\\n        loading={isLoading}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        onMonthChange={handleMonthChange}\\r\\n        renderInput={(params) => <TextField {...params} />}\\r\\n        renderLoading={() => <CalendarPickerSkeleton />}\\r\\n        renderDay={(day, _value, DayComponentProps) => {\\r\\n          const isSelected =\\r\\n            !DayComponentProps.outsideCurrentMonth &&\\r\\n            highlightedDays.indexOf(day.getDate()) > 0;\\r\\n\\r\\n          return (\\r\\n            <Badge\\r\\n              key={day.toString()}\\r\\n              overlap='circular'\\r\\n              badgeContent={isSelected ? '🌚' : undefined}\\r\\n            >\\r\\n              <PickersDay {...DayComponentProps} />\\r\\n            </Badge>\\r\\n          );\\r\\n        }}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\n\\r\\nexport default function HelperText() {\\r\\n  const [value, setValue] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <DatePicker\\r\\n        label='Helper text example'\\r\\n        value={value}\\r\\n        onChange={(newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={(params) => (\\r\\n          <TextField {...params} helperText={params?.inputProps?.placeholder} />\\r\\n        )}\\r\\n      />\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import * as React from 'react';\\r\\nimport frLocale from 'date-fns/locale/fr';\\r\\nimport ruLocale from 'date-fns/locale/ru';\\r\\nimport deLocale from 'date-fns/locale/de';\\r\\nimport enLocale from 'date-fns/locale/en-US';\\r\\nimport ToggleButton from '@mui/material/ToggleButton';\\r\\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\n\\r\\nconst localeMap = {\\r\\n  en: enLocale,\\r\\n  fr: frLocale,\\r\\n  ru: ruLocale,\\r\\n  de: deLocale,\\r\\n};\\r\\n\\r\\nconst maskMap = {\\r\\n  fr: '__/__/____',\\r\\n  en: '__/__/____',\\r\\n  ru: '__.__.____',\\r\\n  de: '__.__.____',\\r\\n};\\r\\n\\r\\nexport default function LocalizedDatePicker() {\\r\\n  const [locale, setLocale] = React.useState('ru');\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  const selectLocale = (newLocale) => {\\r\\n    setLocale(newLocale);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider\\r\\n      dateAdapter={AdapterDateFns}\\r\\n      locale={localeMap[locale]}\\r\\n    >\\r\\n      <div>\\r\\n        <ToggleButtonGroup\\r\\n          value={locale}\\r\\n          exclusive\\r\\n          sx={{mb: 2, display: 'block'}}\\r\\n        >\\r\\n          {Object.keys(localeMap).map((localeItem) => (\\r\\n            <ToggleButton\\r\\n              key={localeItem}\\r\\n              value={localeItem}\\r\\n              onClick={() => selectLocale(localeItem)}\\r\\n            >\\r\\n              {localeItem}\\r\\n            </ToggleButton>\\r\\n          ))}\\r\\n        </ToggleButtonGroup>\\r\\n        <DatePicker\\r\\n          mask={maskMap[locale]}\\r\\n          value={value}\\r\\n          onChange={(newValue) => setValue(newValue)}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n      </div>\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import * as React from 'react';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\\r\\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\\r\\nimport DatePicker from '@mui/lab/DatePicker';\\r\\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\\r\\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\\r\\nimport Stack from '@mui/material/Stack';\\r\\n\\r\\nexport default function ResponsiveDatePickers() {\\r\\n  const [value, setValue] = React.useState(new Date());\\r\\n\\r\\n  return (\\r\\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\\r\\n      <Stack spacing={3}>\\r\\n        <MobileDatePicker\\r\\n          label='For mobile'\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n        <DesktopDatePicker\\r\\n          label='For desktop'\\r\\n          value={value}\\r\\n          minDate={new Date('2017-01-01')}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n        <DatePicker\\r\\n          disableFuture\\r\\n          label='Responsive'\\r\\n          openTo='year'\\r\\n          views={['year', 'month', 'day']}\\r\\n          value={value}\\r\\n          onChange={(newValue) => {\\r\\n            setValue(newValue);\\r\\n          }}\\r\\n          renderInput={(params) => <TextField {...params} />}\\r\\n        />\\r\\n      </Stack>\\r\\n    </LocalizationProvider>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}