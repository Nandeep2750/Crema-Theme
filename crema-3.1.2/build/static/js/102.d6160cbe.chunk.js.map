{"version":3,"sources":["../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","../node_modules/@mui/material/ListItemIcon/ListItemIcon.js","pages/muiComponents/inputs/TransferList/BasicTransferList.js","webpack:///./src/pages/muiComponents/inputs/TransferList/BasicTransferList.js?6ce8","pages/muiComponents/inputs/TransferList/EnhancedTransferList.js","pages/muiComponents/inputs/TransferList/index.js","webpack:///./src/pages/muiComponents/inputs/TransferList/EnhancedTransferList.js?73a8"],"names":["createSvgIcon","_jsx","d","getCheckboxUtilityClass","slot","generateUtilityClass","checkboxClasses","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","props","styles","ownerState","root","indeterminate","color","capitalize","theme","_extends","palette","text","secondary","disableRipple","backgroundColor","alpha","action","active","main","hoverOpacity","checked","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","React","inProps","ref","_icon$props$fontSize","_indeterminateIcon$pr","useThemeProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","size","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","type","fontSize","ListItemIconRoot","alignItems","alignItemsFlexStart","minWidth","flexShrink","display","marginTop","ListItemIcon","className","context","ListContext","getListItemIconUtilityClass","clsx","not","a","b","filter","value","indexOf","intersection","TransferList","setChecked","left","setLeft","right","setRight","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","push","splice","customList","items","Paper","sx","width","height","overflow","List","dense","component","role","map","labelId","ListItem","button","onClick","tabIndex","ListItemText","id","primary","Grid","container","spacing","justifyContent","item","direction","Button","my","variant","concat","length","numberOfChecked","handleToggleAll","title","Card","CardHeader","px","py","avatar","subheader","Divider","bgcolor","AppComponentHeader","description","refUrl","AppGridContainer","xs","AppComponentCard","BasicTransferList","source","noScrollbar","EnhancedTransferList"],"mappings":"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","file":"static/js/102.d6160cbe.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);\nexport default checkboxClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: theme.palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: theme.palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: theme.palette.action.disabled\n  }\n}));\n\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\n\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\n\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\n\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n\n  const {\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon: iconProp = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemIconUtilityClass } from './listItemIconClasses';\nimport ListContext from '../List/ListContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemIconUtilityClass, classes);\n};\n\nconst ListItemIconRoot = styled('div', {\n  name: 'MuiListItemIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  minWidth: 56,\n  color: theme.palette.action.active,\n  flexShrink: 0,\n  display: 'inline-flex'\n}, ownerState.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nconst ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemIcon'\n  });\n\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = React.useContext(ListContext);\n\n  const ownerState = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemIconRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@mui/icons-material` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemIcon;","import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nexport default function TransferList() {\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleAllRight = () => {\r\n    setRight(right.concat(left));\r\n    setLeft([]);\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const handleAllLeft = () => {\r\n    setLeft(left.concat(right));\r\n    setRight([]);\r\n  };\r\n\r\n  const customList = (items) => (\r\n    <Paper sx={{width: 200, height: 230, overflow: 'auto'}}>\r\n      <List dense component='div' role='list'>\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}\r\n            >\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{\r\n                    'aria-labelledby': labelId,\r\n                  }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <Grid container spacing={2} justifyContent='center' alignItems='center'>\r\n      <Grid item>{customList(left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleAllRight}\r\n            disabled={left.length === 0}\r\n            aria-label='move all right'\r\n          >\r\n            ≫\r\n          </Button>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'\r\n          >\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'\r\n          >\r\n            &lt;\r\n          </Button>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleAllLeft}\r\n            disabled={right.length === 0}\r\n            aria-label='move all left'\r\n          >\r\n            ≪\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList(right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","export default \"import * as React from 'react';\\r\\nimport Grid from '@mui/material/Grid';\\r\\nimport List from '@mui/material/List';\\r\\nimport ListItem from '@mui/material/ListItem';\\r\\nimport ListItemIcon from '@mui/material/ListItemIcon';\\r\\nimport ListItemText from '@mui/material/ListItemText';\\r\\nimport Checkbox from '@mui/material/Checkbox';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Paper from '@mui/material/Paper';\\r\\n\\r\\nfunction not(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) === -1);\\r\\n}\\r\\n\\r\\nfunction intersection(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) !== -1);\\r\\n}\\r\\n\\r\\nexport default function TransferList() {\\r\\n  const [checked, setChecked] = React.useState([]);\\r\\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\\r\\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\\r\\n\\r\\n  const leftChecked = intersection(checked, left);\\r\\n  const rightChecked = intersection(checked, right);\\r\\n\\r\\n  const handleToggle = (value) => () => {\\r\\n    const currentIndex = checked.indexOf(value);\\r\\n    const newChecked = [...checked];\\r\\n\\r\\n    if (currentIndex === -1) {\\r\\n      newChecked.push(value);\\r\\n    } else {\\r\\n      newChecked.splice(currentIndex, 1);\\r\\n    }\\r\\n\\r\\n    setChecked(newChecked);\\r\\n  };\\r\\n\\r\\n  const handleAllRight = () => {\\r\\n    setRight(right.concat(left));\\r\\n    setLeft([]);\\r\\n  };\\r\\n\\r\\n  const handleCheckedRight = () => {\\r\\n    setRight(right.concat(leftChecked));\\r\\n    setLeft(not(left, leftChecked));\\r\\n    setChecked(not(checked, leftChecked));\\r\\n  };\\r\\n\\r\\n  const handleCheckedLeft = () => {\\r\\n    setLeft(left.concat(rightChecked));\\r\\n    setRight(not(right, rightChecked));\\r\\n    setChecked(not(checked, rightChecked));\\r\\n  };\\r\\n\\r\\n  const handleAllLeft = () => {\\r\\n    setLeft(left.concat(right));\\r\\n    setRight([]);\\r\\n  };\\r\\n\\r\\n  const customList = (items) => (\\r\\n    <Paper sx={{width: 200, height: 230, overflow: 'auto'}}>\\r\\n      <List dense component='div' role='list'>\\r\\n        {items.map((value) => {\\r\\n          const labelId = `transfer-list-item-${value}-label`;\\r\\n\\r\\n          return (\\r\\n            <ListItem\\r\\n              key={value}\\r\\n              role='listitem'\\r\\n              button\\r\\n              onClick={handleToggle(value)}\\r\\n            >\\r\\n              <ListItemIcon>\\r\\n                <Checkbox\\r\\n                  checked={checked.indexOf(value) !== -1}\\r\\n                  tabIndex={-1}\\r\\n                  disableRipple\\r\\n                  inputProps={{\\r\\n                    'aria-labelledby': labelId,\\r\\n                  }}\\r\\n                />\\r\\n              </ListItemIcon>\\r\\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        })}\\r\\n        <ListItem />\\r\\n      </List>\\r\\n    </Paper>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Grid container spacing={2} justifyContent='center' alignItems='center'>\\r\\n      <Grid item>{customList(left)}</Grid>\\r\\n      <Grid item>\\r\\n        <Grid container direction='column' alignItems='center'>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleAllRight}\\r\\n            disabled={left.length === 0}\\r\\n            aria-label='move all right'\\r\\n          >\\r\\n            ≫\\r\\n          </Button>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleCheckedRight}\\r\\n            disabled={leftChecked.length === 0}\\r\\n            aria-label='move selected right'\\r\\n          >\\r\\n            &gt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleCheckedLeft}\\r\\n            disabled={rightChecked.length === 0}\\r\\n            aria-label='move selected left'\\r\\n          >\\r\\n            &lt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleAllLeft}\\r\\n            disabled={right.length === 0}\\r\\n            aria-label='move all left'\\r\\n          >\\r\\n            ≪\\r\\n          </Button>\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n      <Grid item>{customList(right)}</Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";","import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nexport default function TransferList() {\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = (items) => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = (items) => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const customList = (title, items) => (\r\n    <Card>\r\n      <CardHeader\r\n        sx={{px: 2, py: 1}}\r\n        avatar={\r\n          <Checkbox\r\n            onClick={handleToggleAll(items)}\r\n            checked={\r\n              numberOfChecked(items) === items.length && items.length !== 0\r\n            }\r\n            indeterminate={\r\n              numberOfChecked(items) !== items.length &&\r\n              numberOfChecked(items) !== 0\r\n            }\r\n            disabled={items.length === 0}\r\n            inputProps={{\r\n              'aria-label': 'all items selected',\r\n            }}\r\n          />\r\n        }\r\n        title={title}\r\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n      />\r\n      <Divider />\r\n      <List\r\n        sx={{\r\n          width: 200,\r\n          height: 230,\r\n          bgcolor: 'background.paper',\r\n          overflow: 'auto',\r\n        }}\r\n        dense\r\n        component='div'\r\n        role='list'\r\n      >\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}\r\n            >\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{\r\n                    'aria-labelledby': labelId,\r\n                  }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Grid container spacing={2} justifyContent='center' alignItems='center'>\r\n      <Grid item>{customList('Choices', left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'\r\n          >\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            sx={{my: 0.5}}\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'\r\n          >\r\n            &lt;\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList('Chosen', right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppComponentHeader from '../../../../@crema/core/AppComponentHeader';\r\nimport AppGridContainer from '../../../../@crema/core/AppGridContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppComponentCard from '../../../../@crema/core/AppComponentCard';\r\n\r\nimport BasicTransferList from './BasicTransferList';\r\nimport BasicTransferListSource from '!raw-loader!./BasicTransferList';\r\nimport EnhancedTransferList from './EnhancedTransferList';\r\nimport EnhancedTransferListSource from '!raw-loader!./EnhancedTransferList';\r\n\r\nconst TransferList = () => {\r\n  return (\r\n    <>\r\n      <AppComponentHeader\r\n        title='Transfer List'\r\n        description='A transfer list (or \"shuttle\") enables the user to move one or more list items between lists.'\r\n        refUrl='https://mui.com/components/transfer-list/'\r\n      />\r\n\r\n      <AppGridContainer>\r\n        <Grid item xs={12}>\r\n          <AppComponentCard\r\n            title='Basic transfer list'\r\n            component={BasicTransferList}\r\n            source={BasicTransferListSource}\r\n            noScrollbar\r\n            description='For completeness, this example includes buttons for \"move all\", but not every transfer list needs these.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <AppComponentCard\r\n            title='Enhanced transfer list'\r\n            component={EnhancedTransferList}\r\n            source={EnhancedTransferListSource}\r\n            noScrollbar\r\n            description='This example exchanges the \"move all\" buttons for a \"select all / select none\" checkbox, and adds a counter.'\r\n          />\r\n        </Grid>\r\n      </AppGridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransferList;\r\n","export default \"import * as React from 'react';\\r\\nimport Grid from '@mui/material/Grid';\\r\\nimport List from '@mui/material/List';\\r\\nimport Card from '@mui/material/Card';\\r\\nimport CardHeader from '@mui/material/CardHeader';\\r\\nimport ListItem from '@mui/material/ListItem';\\r\\nimport ListItemText from '@mui/material/ListItemText';\\r\\nimport ListItemIcon from '@mui/material/ListItemIcon';\\r\\nimport Checkbox from '@mui/material/Checkbox';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport Divider from '@mui/material/Divider';\\r\\n\\r\\nfunction not(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) === -1);\\r\\n}\\r\\n\\r\\nfunction intersection(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) !== -1);\\r\\n}\\r\\n\\r\\nfunction union(a, b) {\\r\\n  return [...a, ...not(b, a)];\\r\\n}\\r\\n\\r\\nexport default function TransferList() {\\r\\n  const [checked, setChecked] = React.useState([]);\\r\\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\\r\\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\\r\\n\\r\\n  const leftChecked = intersection(checked, left);\\r\\n  const rightChecked = intersection(checked, right);\\r\\n\\r\\n  const handleToggle = (value) => () => {\\r\\n    const currentIndex = checked.indexOf(value);\\r\\n    const newChecked = [...checked];\\r\\n\\r\\n    if (currentIndex === -1) {\\r\\n      newChecked.push(value);\\r\\n    } else {\\r\\n      newChecked.splice(currentIndex, 1);\\r\\n    }\\r\\n\\r\\n    setChecked(newChecked);\\r\\n  };\\r\\n\\r\\n  const numberOfChecked = (items) => intersection(checked, items).length;\\r\\n\\r\\n  const handleToggleAll = (items) => () => {\\r\\n    if (numberOfChecked(items) === items.length) {\\r\\n      setChecked(not(checked, items));\\r\\n    } else {\\r\\n      setChecked(union(checked, items));\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleCheckedRight = () => {\\r\\n    setRight(right.concat(leftChecked));\\r\\n    setLeft(not(left, leftChecked));\\r\\n    setChecked(not(checked, leftChecked));\\r\\n  };\\r\\n\\r\\n  const handleCheckedLeft = () => {\\r\\n    setLeft(left.concat(rightChecked));\\r\\n    setRight(not(right, rightChecked));\\r\\n    setChecked(not(checked, rightChecked));\\r\\n  };\\r\\n\\r\\n  const customList = (title, items) => (\\r\\n    <Card>\\r\\n      <CardHeader\\r\\n        sx={{px: 2, py: 1}}\\r\\n        avatar={\\r\\n          <Checkbox\\r\\n            onClick={handleToggleAll(items)}\\r\\n            checked={\\r\\n              numberOfChecked(items) === items.length && items.length !== 0\\r\\n            }\\r\\n            indeterminate={\\r\\n              numberOfChecked(items) !== items.length &&\\r\\n              numberOfChecked(items) !== 0\\r\\n            }\\r\\n            disabled={items.length === 0}\\r\\n            inputProps={{\\r\\n              'aria-label': 'all items selected',\\r\\n            }}\\r\\n          />\\r\\n        }\\r\\n        title={title}\\r\\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\\r\\n      />\\r\\n      <Divider />\\r\\n      <List\\r\\n        sx={{\\r\\n          width: 200,\\r\\n          height: 230,\\r\\n          bgcolor: 'background.paper',\\r\\n          overflow: 'auto',\\r\\n        }}\\r\\n        dense\\r\\n        component='div'\\r\\n        role='list'\\r\\n      >\\r\\n        {items.map((value) => {\\r\\n          const labelId = `transfer-list-all-item-${value}-label`;\\r\\n\\r\\n          return (\\r\\n            <ListItem\\r\\n              key={value}\\r\\n              role='listitem'\\r\\n              button\\r\\n              onClick={handleToggle(value)}\\r\\n            >\\r\\n              <ListItemIcon>\\r\\n                <Checkbox\\r\\n                  checked={checked.indexOf(value) !== -1}\\r\\n                  tabIndex={-1}\\r\\n                  disableRipple\\r\\n                  inputProps={{\\r\\n                    'aria-labelledby': labelId,\\r\\n                  }}\\r\\n                />\\r\\n              </ListItemIcon>\\r\\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        })}\\r\\n        <ListItem />\\r\\n      </List>\\r\\n    </Card>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Grid container spacing={2} justifyContent='center' alignItems='center'>\\r\\n      <Grid item>{customList('Choices', left)}</Grid>\\r\\n      <Grid item>\\r\\n        <Grid container direction='column' alignItems='center'>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleCheckedRight}\\r\\n            disabled={leftChecked.length === 0}\\r\\n            aria-label='move selected right'\\r\\n          >\\r\\n            &gt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            sx={{my: 0.5}}\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            onClick={handleCheckedLeft}\\r\\n            disabled={rightChecked.length === 0}\\r\\n            aria-label='move selected left'\\r\\n          >\\r\\n            &lt;\\r\\n          </Button>\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n      <Grid item>{customList('Chosen', right)}</Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}